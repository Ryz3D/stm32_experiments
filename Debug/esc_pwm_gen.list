
esc_pwm_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005048  08007a38  08007a38  00008a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca80  0800ca80  0000f100  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca80  0800ca80  0000da80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca88  0800ca88  0000f100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca88  0800ca88  0000da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca8c  0800ca8c  0000da8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001100  20000000  0800ca90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ab0  20001100  0800db90  0000f100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015bb0  0800db90  0000fbb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141af  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f73  00000000  00000000  000232df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00026258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027d18  00000000  00000000  00027530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001743b  00000000  00000000  0004f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f49fb  00000000  00000000  00066683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0015b07e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e61  00000000  00000000  0015b0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  0015bf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00160c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001100 	.word	0x20001100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a20 	.word	0x08007a20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001104 	.word	0x20001104
 80001c4:	08007a20 	.word	0x08007a20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <gpio_read>:
#include "cia.h"

uint8_t port_a = 0;

uint8_t gpio_read(uint8_t pin)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
}
 80004c2:	bf00      	nop
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <gpio_write>:

void gpio_write(uint8_t pin, uint8_t state)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <cia_read>:

int8_t cia_read(uint8_t addr_off)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	if (addr_off == 0x00)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <cia_read+0x18>
		return port_a;
 80004fc:	4b39      	ldr	r3, [pc, #228]	@ (80005e4 <cia_read+0xf8>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b25b      	sxtb	r3, r3
 8000502:	e06a      	b.n	80005da <cia_read+0xee>
	else if (addr_off == 0x01)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d15b      	bne.n	80005c2 <cia_read+0xd6>
	{
		uint8_t port_b = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	73fb      	strb	r3, [r7, #15]

		port_b |= gpio_read(0) << 3;
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ffd2 	bl	80004b8 <gpio_read>
 8000514:	4603      	mov	r3, r0
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	b25a      	sxtb	r2, r3
 800051a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800051e:	4313      	orrs	r3, r2
 8000520:	b25b      	sxtb	r3, r3
 8000522:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(1) << 6;
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ffc7 	bl	80004b8 <gpio_read>
 800052a:	4603      	mov	r3, r0
 800052c:	019b      	lsls	r3, r3, #6
 800052e:	b25a      	sxtb	r2, r3
 8000530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000534:	4313      	orrs	r3, r2
 8000536:	b25b      	sxtb	r3, r3
 8000538:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(2) << 5;
 800053a:	2002      	movs	r0, #2
 800053c:	f7ff ffbc 	bl	80004b8 <gpio_read>
 8000540:	4603      	mov	r3, r0
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	b25a      	sxtb	r2, r3
 8000546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800054a:	4313      	orrs	r3, r2
 800054c:	b25b      	sxtb	r3, r3
 800054e:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(3) << 4;
 8000550:	2003      	movs	r0, #3
 8000552:	f7ff ffb1 	bl	80004b8 <gpio_read>
 8000556:	4603      	mov	r3, r0
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	b25a      	sxtb	r2, r3
 800055c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000560:	4313      	orrs	r3, r2
 8000562:	b25b      	sxtb	r3, r3
 8000564:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(4) << 7;
 8000566:	2004      	movs	r0, #4
 8000568:	f7ff ffa6 	bl	80004b8 <gpio_read>
 800056c:	4603      	mov	r3, r0
 800056e:	01db      	lsls	r3, r3, #7
 8000570:	b25a      	sxtb	r2, r3
 8000572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000576:	4313      	orrs	r3, r2
 8000578:	b25b      	sxtb	r3, r3
 800057a:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(5) << 2;
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff ff9b 	bl	80004b8 <gpio_read>
 8000582:	4603      	mov	r3, r0
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	b25a      	sxtb	r2, r3
 8000588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058c:	4313      	orrs	r3, r2
 800058e:	b25b      	sxtb	r3, r3
 8000590:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(6) << 1;
 8000592:	2006      	movs	r0, #6
 8000594:	f7ff ff90 	bl	80004b8 <gpio_read>
 8000598:	4603      	mov	r3, r0
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	b25a      	sxtb	r2, r3
 800059e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read(7) << 0;
 80005a8:	2007      	movs	r0, #7
 80005aa:	f7ff ff85 	bl	80004b8 <gpio_read>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	73fb      	strb	r3, [r7, #15]

		return port_b;
 80005bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c0:	e00b      	b.n	80005da <cia_read+0xee>
	}
	else if (addr_off == 0x02)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d102      	bne.n	80005ce <cia_read+0xe2>
		return 0xff;
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	e005      	b.n	80005da <cia_read+0xee>
	else if (addr_off == 0x03)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d101      	bne.n	80005d8 <cia_read+0xec>
		return 0x00;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <cia_read+0xee>
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000111c 	.word	0x2000111c

080005e8 <cia_write>:

void cia_write(uint8_t addr_off, int8_t d)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
	if (addr_off == 0x00)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d155      	bne.n	80006aa <cia_write+0xc2>
	{
		port_a = d;
 80005fe:	79ba      	ldrb	r2, [r7, #6]
 8000600:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <cia_write+0xcc>)
 8000602:	701a      	strb	r2, [r3, #0]

		gpio_write(8, (port_a >> 0) & 1);
 8000604:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <cia_write+0xcc>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	2008      	movs	r0, #8
 8000612:	f7ff ff5d 	bl	80004d0 <gpio_write>
		gpio_write(9, (port_a >> 6) & 1);
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <cia_write+0xcc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	099b      	lsrs	r3, r3, #6
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	2009      	movs	r0, #9
 8000628:	f7ff ff52 	bl	80004d0 <gpio_write>
		gpio_write(10, (port_a >> 5) & 1);
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <cia_write+0xcc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	095b      	lsrs	r3, r3, #5
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	200a      	movs	r0, #10
 800063e:	f7ff ff47 	bl	80004d0 <gpio_write>
		gpio_write(11, (port_a >> 4) & 1);
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <cia_write+0xcc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	200b      	movs	r0, #11
 8000654:	f7ff ff3c 	bl	80004d0 <gpio_write>
		gpio_write(12, (port_a >> 3) & 1);
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <cia_write+0xcc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff ff31 	bl	80004d0 <gpio_write>
		gpio_write(13, (port_a >> 2) & 1);
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <cia_write+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	089b      	lsrs	r3, r3, #2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	200d      	movs	r0, #13
 8000680:	f7ff ff26 	bl	80004d0 <gpio_write>
		gpio_write(14, (port_a >> 1) & 1);
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <cia_write+0xcc>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	200e      	movs	r0, #14
 8000696:	f7ff ff1b 	bl	80004d0 <gpio_write>
		gpio_write(15, (port_a >> 7) & 1);
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <cia_write+0xcc>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	09db      	lsrs	r3, r3, #7
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	200f      	movs	r0, #15
 80006a6:	f7ff ff13 	bl	80004d0 <gpio_write>
	}
	else if (addr_off == 0x02)
		; // pin_mode(d, 9);
	else if (addr_off == 0x03)
		; // pin_mode(d, 1);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000111c 	.word	0x2000111c

080006b8 <reset>:
bool fN, fV, fB, fD, fI, fZ, fC;
uint8_t stack_pointer;
int8_t ins_buf[3];

void reset()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	a = x = y = 0;
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <reset+0x6c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <reset+0x6c>)
 80006c4:	f993 2000 	ldrsb.w	r2, [r3]
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <reset+0x70>)
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <reset+0x70>)
 80006ce:	f993 2000 	ldrsb.w	r2, [r3]
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <reset+0x74>)
 80006d4:	701a      	strb	r2, [r3, #0]
	fN = fV = fB = fD = fZ = fC = 0;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <reset+0x78>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <reset+0x78>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <reset+0x7c>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <reset+0x7c>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <reset+0x80>)
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <reset+0x80>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <reset+0x84>)
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <reset+0x84>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <reset+0x88>)
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <reset+0x88>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <reset+0x8c>)
 8000702:	701a      	strb	r2, [r3, #0]
	fI = 1;
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <reset+0x90>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
	stack_pointer = 0xff;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <reset+0x94>)
 800070c:	22ff      	movs	r2, #255	@ 0xff
 800070e:	701a      	strb	r2, [r3, #0]
	pc = mem_read16(0xfffc);
 8000710:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8000714:	f001 fd96 	bl	8002244 <mem_read16>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <reset+0x98>)
 800071e:	801a      	strh	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20001122 	.word	0x20001122
 8000728:	20001121 	.word	0x20001121
 800072c:	20001120 	.word	0x20001120
 8000730:	20001129 	.word	0x20001129
 8000734:	20001128 	.word	0x20001128
 8000738:	20001126 	.word	0x20001126
 800073c:	20001125 	.word	0x20001125
 8000740:	20001124 	.word	0x20001124
 8000744:	20001123 	.word	0x20001123
 8000748:	20001127 	.word	0x20001127
 800074c:	2000112a 	.word	0x2000112a
 8000750:	2000111e 	.word	0x2000111e

08000754 <irq>:

void irq()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if (!fI)
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <irq+0x98>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d03f      	beq.n	80007e6 <irq+0x92>
	{
		s_push16(pc);
 8000766:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <irq+0x9c>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f897 	bl	800089e <s_push16>
		fB = 0;
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <irq+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <irq+0xa4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	01db      	lsls	r3, r3, #7
 800077c:	b25a      	sxtb	r2, r3
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <irq+0xa8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	019b      	lsls	r3, r3, #6
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	b25a      	sxtb	r2, r3
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <irq+0xa0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	b25b      	sxtb	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b25a      	sxtb	r2, r3
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <irq+0xac>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <irq+0x98>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b25a      	sxtb	r2, r3
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <irq+0xb0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <irq+0xb4>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f836 	bl	800083c <s_push>
		fI = 1;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <irq+0x98>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
		pc = mem_read16(0xfffe);
 80007d6:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 80007da:	f001 fd33 	bl	8002244 <mem_read16>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <irq+0x9c>)
 80007e4:	801a      	strh	r2, [r3, #0]
	}
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20001127 	.word	0x20001127
 80007f0:	2000111e 	.word	0x2000111e
 80007f4:	20001125 	.word	0x20001125
 80007f8:	20001123 	.word	0x20001123
 80007fc:	20001124 	.word	0x20001124
 8000800:	20001126 	.word	0x20001126
 8000804:	20001128 	.word	0x20001128
 8000808:	20001129 	.word	0x20001129

0800080c <s_pop>:
	s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
	pc = mem_read16(0xfffa);
}

uint8_t s_pop()
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	return stack[++stack_pointer];
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <s_pop+0x28>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <s_pop+0x28>)
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <s_pop+0x28>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <s_pop+0x2c>)
 8000824:	569b      	ldrsb	r3, [r3, r2]
 8000826:	b2db      	uxtb	r3, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2000112a 	.word	0x2000112a
 8000838:	20001234 	.word	0x20001234

0800083c <s_push>:

void s_push(int8_t d)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	stack[stack_pointer--] = d;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <s_push+0x2c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	b2d1      	uxtb	r1, r2
 800084e:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <s_push+0x2c>)
 8000850:	7011      	strb	r1, [r2, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <s_push+0x30>)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	5453      	strb	r3, [r2, r1]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000112a 	.word	0x2000112a
 800086c:	20001234 	.word	0x20001234

08000870 <s_pop16>:

uint16_t s_pop16()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint8_t a = s_pop();
 8000876:	f7ff ffc9 	bl	800080c <s_pop>
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t b = s_pop();
 800087e:	f7ff ffc5 	bl	800080c <s_pop>
 8000882:	4603      	mov	r3, r0
 8000884:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t)b << 8) | (uint16_t)a;
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	b29b      	uxth	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <s_push16>:

void s_push16(uint16_t d)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	80fb      	strh	r3, [r7, #6]
	s_push(d >> 8);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ffc3 	bl	800083c <s_push>
	s_push(d & 0xff);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffbe 	bl	800083c <s_push>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <load_ins_buf>:

void load_ins_buf(uint8_t len)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e010      	b.n	80008fa <load_ins_buf+0x32>
		ins_buf[i] = mem_read(pc + i);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <load_ins_buf+0x54>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	7bfc      	ldrb	r4, [r7, #15]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fbea 	bl	80020c0 <mem_read>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <load_ins_buf+0x58>)
 80008f2:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < len; i++)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	3301      	adds	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	7bfa      	ldrb	r2, [r7, #15]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3ea      	bcc.n	80008d8 <load_ins_buf+0x10>
	pc += len;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <load_ins_buf+0x54>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	@ (800091c <load_ins_buf+0x54>)
 8000910:	801a      	strh	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	2000111e 	.word	0x2000111e
 8000920:	2000112c 	.word	0x2000112c

08000924 <get_operand>:

bool get_operand(int8_t *op, uint16_t *op_addr, uint8_t ins, uint8_t *variants)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	71fb      	strb	r3, [r7, #7]
	if (ins == 0x00)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <get_operand+0x1a>
		return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e120      	b.n	8000b80 <get_operand+0x25c>

	if (ins == variants[0])
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	429a      	cmp	r2, r3
 8000946:	d108      	bne.n	800095a <get_operand+0x36>
	{
		// immediate
		load_ins_buf(2);
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff ffbd 	bl	80008c8 <load_ins_buf>
		*op = ins_buf[1];
 800094e:	4b8e      	ldr	r3, [pc, #568]	@ (8000b88 <get_operand+0x264>)
 8000950:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e111      	b.n	8000b7e <get_operand+0x25a>
	}
	else
	{
		if (ins == variants[1])
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	429a      	cmp	r2, r3
 8000964:	d10a      	bne.n	800097c <get_operand+0x58>
		{
			// zeropage
			load_ins_buf(2);
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff ffae 	bl	80008c8 <load_ins_buf>
			*op_addr = (uint8_t)ins_buf[1];
 800096c:	4b86      	ldr	r3, [pc, #536]	@ (8000b88 <get_operand+0x264>)
 800096e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	801a      	strh	r2, [r3, #0]
 800097a:	e0f7      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[2])
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3302      	adds	r3, #2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	429a      	cmp	r2, r3
 8000986:	d110      	bne.n	80009aa <get_operand+0x86>
		{
			// x-indexed zeropage
			load_ins_buf(2);
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff9d 	bl	80008c8 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)x);
 800098e:	4b7e      	ldr	r3, [pc, #504]	@ (8000b88 <get_operand+0x264>)
 8000990:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b7d      	ldr	r3, [pc, #500]	@ (8000b8c <get_operand+0x268>)
 8000998:	f993 3000 	ldrsb.w	r3, [r3]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	801a      	strh	r2, [r3, #0]
 80009a8:	e0e0      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[3])
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	3303      	adds	r3, #3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d110      	bne.n	80009d8 <get_operand+0xb4>
		{
			// y-indexed zeropage
			load_ins_buf(2);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ff86 	bl	80008c8 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)y);
 80009bc:	4b72      	ldr	r3, [pc, #456]	@ (8000b88 <get_operand+0x264>)
 80009be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b72      	ldr	r3, [pc, #456]	@ (8000b90 <get_operand+0x26c>)
 80009c6:	f993 3000 	ldrsb.w	r3, [r3]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4413      	add	r3, r2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	801a      	strh	r2, [r3, #0]
 80009d6:	e0c9      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[4])
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	3304      	adds	r3, #4
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d116      	bne.n	8000a12 <get_operand+0xee>
		{
			// x-indexed zeropage indirect
			load_ins_buf(2);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff ff6f 	bl	80008c8 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1] + (uint8_t)x;
 80009ea:	4b67      	ldr	r3, [pc, #412]	@ (8000b88 <get_operand+0x264>)
 80009ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b66      	ldr	r3, [pc, #408]	@ (8000b8c <get_operand+0x268>)
 80009f4:	f993 3000 	ldrsb.w	r3, [r3]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	753b      	strb	r3, [r7, #20]
			*op_addr = mem_read16(op_addr_addr);
 80009fe:	7d3b      	ldrb	r3, [r7, #20]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fc1e 	bl	8002244 <mem_read16>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	801a      	strh	r2, [r3, #0]
 8000a10:	e0ac      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[5])
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	3305      	adds	r3, #5
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d116      	bne.n	8000a4c <get_operand+0x128>
		{
			// y-indexed zeropage indirect
			load_ins_buf(2);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff ff52 	bl	80008c8 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1];
 8000a24:	4b58      	ldr	r3, [pc, #352]	@ (8000b88 <get_operand+0x264>)
 8000a26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a2a:	757b      	strb	r3, [r7, #21]
			*op_addr = mem_read16(op_addr_addr) + (uint8_t)y;
 8000a2c:	7d7b      	ldrb	r3, [r7, #21]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fc07 	bl	8002244 <mem_read16>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <get_operand+0x26c>)
 8000a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	801a      	strh	r2, [r3, #0]
 8000a4a:	e08f      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[6])
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3306      	adds	r3, #6
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d113      	bne.n	8000a80 <get_operand+0x15c>
		{
			// absolute
			load_ins_buf(3);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f7ff ff35 	bl	80008c8 <load_ins_buf>
			*op_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 8000a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b88 <get_operand+0x264>)
 8000a60:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <get_operand+0x264>)
 8000a6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	e075      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[7])
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3307      	adds	r3, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d119      	bne.n	8000ac0 <get_operand+0x19c>
		{
			// x-indexed absolute
			load_ins_buf(3);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f7ff ff1b 	bl	80008c8 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)x;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <get_operand+0x264>)
 8000a94:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b88 <get_operand+0x264>)
 8000aa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4a37      	ldr	r2, [pc, #220]	@ (8000b8c <get_operand+0x268>)
 8000ab0:	f992 2000 	ldrsb.w	r2, [r2]
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	e055      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[8])
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d119      	bne.n	8000b00 <get_operand+0x1dc>
		{
			// y-indexed absolute
			load_ins_buf(3);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f7ff fefb 	bl	80008c8 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)y;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <get_operand+0x264>)
 8000ad4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <get_operand+0x264>)
 8000ae0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4a28      	ldr	r2, [pc, #160]	@ (8000b90 <get_operand+0x26c>)
 8000af0:	f992 2000 	ldrsb.w	r2, [r2]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	4413      	add	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	e035      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[9])
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3309      	adds	r3, #9
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d119      	bne.n	8000b40 <get_operand+0x21c>
		{
			// absolute indirect
			load_ins_buf(3);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f7ff fedb 	bl	80008c8 <load_ins_buf>
			uint16_t op_addr_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <get_operand+0x264>)
 8000b14:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <get_operand+0x264>)
 8000b20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	82fb      	strh	r3, [r7, #22]
			*op_addr = mem_read16(op_addr_addr);
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fb87 	bl	8002244 <mem_read16>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	801a      	strh	r2, [r3, #0]
 8000b3e:	e015      	b.n	8000b6c <get_operand+0x248>
		}
		else if (ins == variants[10])
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	330a      	adds	r3, #10
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d10d      	bne.n	8000b68 <get_operand+0x244>
		{
			// relative
			load_ins_buf(2);
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff febb 	bl	80008c8 <load_ins_buf>
			*op_addr = pc + ins_buf[1];
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <get_operand+0x264>)
 8000b54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <get_operand+0x270>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	e001      	b.n	8000b6c <get_operand+0x248>
		}
		else
			return 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e009      	b.n	8000b80 <get_operand+0x25c>

		*op = mem_read(*op_addr);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 faa5 	bl	80020c0 <mem_read>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000112c 	.word	0x2000112c
 8000b8c:	20001121 	.word	0x20001121
 8000b90:	20001122 	.word	0x20001122
 8000b94:	2000111e 	.word	0x2000111e

08000b98 <exec_ora>:
	0xa0, 0xa4, 0xb4, 0x00, 0x00, 0x00, 0xac, 0xbc, 0x00, 0x00, 0x00 };
uint8_t v_sty[] = {
	0x00, 0x84, 0x94, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00 };

bool exec_ora(uint8_t ins, int8_t *res)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ora))
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	f107 000f 	add.w	r0, r7, #15
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <exec_ora+0x50>)
 8000bb0:	490e      	ldr	r1, [pc, #56]	@ (8000bec <exec_ora+0x54>)
 8000bb2:	f7ff feb7 	bl	8000924 <get_operand>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00f      	beq.n	8000bdc <exec_ora+0x44>
	{
		*res = a |= op;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <exec_ora+0x58>)
 8000bbe:	f993 2000 	ldrsb.w	r2, [r3]
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <exec_ora+0x58>)
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <exec_ora+0x58>)
 8000bd0:	f993 2000 	ldrsb.w	r2, [r3]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
		return 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <exec_ora+0x46>
	}
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20001130 	.word	0x20001130
 8000bf0:	20001120 	.word	0x20001120

08000bf4 <exec_and>:

bool exec_and(uint8_t ins, int8_t *res)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_and))
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	f107 000f 	add.w	r0, r7, #15
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <exec_and+0x50>)
 8000c0c:	490e      	ldr	r1, [pc, #56]	@ (8000c48 <exec_and+0x54>)
 8000c0e:	f7ff fe89 	bl	8000924 <get_operand>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00f      	beq.n	8000c38 <exec_and+0x44>
	{
		*res = a &= op;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <exec_and+0x58>)
 8000c1a:	f993 2000 	ldrsb.w	r2, [r3]
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4013      	ands	r3, r2
 8000c24:	b25a      	sxtb	r2, r3
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <exec_and+0x58>)
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <exec_and+0x58>)
 8000c2c:	f993 2000 	ldrsb.w	r2, [r3]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <exec_and+0x46>
	}
	return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20001130 	.word	0x20001130
 8000c4c:	20001120 	.word	0x20001120

08000c50 <exec_eor>:

bool exec_eor(uint8_t ins, int8_t *res)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_eor))
 8000c60:	79fa      	ldrb	r2, [r7, #7]
 8000c62:	f107 000f 	add.w	r0, r7, #15
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <exec_eor+0x50>)
 8000c68:	490e      	ldr	r1, [pc, #56]	@ (8000ca4 <exec_eor+0x54>)
 8000c6a:	f7ff fe5b 	bl	8000924 <get_operand>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00f      	beq.n	8000c94 <exec_eor+0x44>
	{
		*res = a ^= op;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <exec_eor+0x58>)
 8000c76:	f993 2000 	ldrsb.w	r2, [r3]
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4053      	eors	r3, r2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <exec_eor+0x58>)
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <exec_eor+0x58>)
 8000c88:	f993 2000 	ldrsb.w	r2, [r3]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <exec_eor+0x46>
	}
	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000018 	.word	0x20000018
 8000ca4:	20001130 	.word	0x20001130
 8000ca8:	20001120 	.word	0x20001120

08000cac <setCV>:

int8_t setCV(int8_t a, int8_t b, bool sub)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	717b      	strb	r3, [r7, #5]
	int8_t res = a + (sub ? ~b : b) + fC;
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <setCV+0x20>
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e000      	b.n	8000cce <setCV+0x22>
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <setCV+0xac>)
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	73fb      	strb	r3, [r7, #15]
	if (sub)
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <setCV+0x40>
		b = -b;
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	71bb      	strb	r3, [r7, #6]
	uint8_t ua = a, ub = b, ur = res;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	73bb      	strb	r3, [r7, #14]
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	737b      	strb	r3, [r7, #13]
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	733b      	strb	r3, [r7, #12]
	fC = fC ? (ur <= ua) : (ur < ua);
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <setCV+0xac>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <setCV+0x64>
 8000d00:	7b3a      	ldrb	r2, [r7, #12]
 8000d02:	7bbb      	ldrb	r3, [r7, #14]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	bf94      	ite	ls
 8000d08:	2301      	movls	r3, #1
 8000d0a:	2300      	movhi	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	e006      	b.n	8000d1e <setCV+0x72>
 8000d10:	7b3a      	ldrb	r2, [r7, #12]
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	bf34      	ite	cc
 8000d18:	2301      	movcc	r3, #1
 8000d1a:	2300      	movcs	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <setCV+0xac>)
 8000d20:	7013      	strb	r3, [r2, #0]
	fV = (ua ^ ur) & (ub ^ ur) & (1 << 7);
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	7b3b      	ldrb	r3, [r7, #12]
 8000d26:	4053      	eors	r3, r2
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	7b79      	ldrb	r1, [r7, #13]
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	404b      	eors	r3, r1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4013      	ands	r3, r2
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <setCV+0xb0>)
 8000d46:	701a      	strb	r2, [r3, #0]
	return res;
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20001129 	.word	0x20001129
 8000d5c:	20001124 	.word	0x20001124

08000d60 <exec_adc>:

bool exec_adc(uint8_t ins, int8_t *res)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_adc))
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	f107 000f 	add.w	r0, r7, #15
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <exec_adc+0x58>)
 8000d78:	4910      	ldr	r1, [pc, #64]	@ (8000dbc <exec_adc+0x5c>)
 8000d7a:	f7ff fdd3 	bl	8000924 <get_operand>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d013      	beq.n	8000dac <exec_adc+0x4c>
	{
		*res = a = setCV(a, op, 0);
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <exec_adc+0x60>)
 8000d86:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff8b 	bl	8000cac <setCV>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <exec_adc+0x60>)
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <exec_adc+0x60>)
 8000da0:	f993 2000 	ldrsb.w	r2, [r3]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	701a      	strb	r2, [r3, #0]
		return 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <exec_adc+0x4e>
	}
	return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000024 	.word	0x20000024
 8000dbc:	20001130 	.word	0x20001130
 8000dc0:	20001120 	.word	0x20001120

08000dc4 <exec_sbc>:

bool exec_sbc(uint8_t ins, int8_t *res)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_sbc))
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	f107 000f 	add.w	r0, r7, #15
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <exec_sbc+0x58>)
 8000ddc:	4910      	ldr	r1, [pc, #64]	@ (8000e20 <exec_sbc+0x5c>)
 8000dde:	f7ff fda1 	bl	8000924 <get_operand>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d013      	beq.n	8000e10 <exec_sbc+0x4c>
	{
		*res = a = setCV(a, op, 1);
 8000de8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <exec_sbc+0x60>)
 8000dea:	f993 3000 	ldrsb.w	r3, [r3]
 8000dee:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff59 	bl	8000cac <setCV>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <exec_sbc+0x60>)
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <exec_sbc+0x60>)
 8000e04:	f993 2000 	ldrsb.w	r2, [r3]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <exec_sbc+0x4e>
	}
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000030 	.word	0x20000030
 8000e20:	20001130 	.word	0x20001130
 8000e24:	20001120 	.word	0x20001120

08000e28 <exec_cmp>:

bool exec_cmp(uint8_t ins, int8_t *res)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cmp))
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	f107 000f 	add.w	r0, r7, #15
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <exec_cmp+0x68>)
 8000e40:	4914      	ldr	r1, [pc, #80]	@ (8000e94 <exec_cmp+0x6c>)
 8000e42:	f7ff fd6f 	bl	8000924 <get_operand>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01b      	beq.n	8000e84 <exec_cmp+0x5c>
	{
		*res = a - op;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <exec_cmp+0x70>)
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)a >= (uint8_t)op;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <exec_cmp+0x70>)
 8000e66:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	429a      	cmp	r2, r3
 8000e74:	bf2c      	ite	cs
 8000e76:	2301      	movcs	r3, #1
 8000e78:	2300      	movcc	r3, #0
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <exec_cmp+0x74>)
 8000e7e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <exec_cmp+0x5e>
	}
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000003c 	.word	0x2000003c
 8000e94:	20001130 	.word	0x20001130
 8000e98:	20001120 	.word	0x20001120
 8000e9c:	20001129 	.word	0x20001129

08000ea0 <exec_cpx>:

bool exec_cpx(uint8_t ins, int8_t *res)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpx))
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	f107 000f 	add.w	r0, r7, #15
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <exec_cpx+0x68>)
 8000eb8:	4914      	ldr	r1, [pc, #80]	@ (8000f0c <exec_cpx+0x6c>)
 8000eba:	f7ff fd33 	bl	8000924 <get_operand>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d01b      	beq.n	8000efc <exec_cpx+0x5c>
	{
		*res = x - op;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <exec_cpx+0x70>)
 8000ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)x >= (uint8_t)op;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <exec_cpx+0x70>)
 8000ede:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf2c      	ite	cs
 8000eee:	2301      	movcs	r3, #1
 8000ef0:	2300      	movcc	r3, #0
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <exec_cpx+0x74>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <exec_cpx+0x5e>
	}
	return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000048 	.word	0x20000048
 8000f0c:	20001130 	.word	0x20001130
 8000f10:	20001121 	.word	0x20001121
 8000f14:	20001129 	.word	0x20001129

08000f18 <exec_cpy>:

bool exec_cpy(uint8_t ins, int8_t *res)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpy))
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	f107 000f 	add.w	r0, r7, #15
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <exec_cpy+0x68>)
 8000f30:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <exec_cpy+0x6c>)
 8000f32:	f7ff fcf7 	bl	8000924 <get_operand>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01b      	beq.n	8000f74 <exec_cpy+0x5c>
	{
		*res = y - op;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <exec_cpy+0x70>)
 8000f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b25a      	sxtb	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)y >= (uint8_t)op;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <exec_cpy+0x70>)
 8000f56:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	429a      	cmp	r2, r3
 8000f64:	bf2c      	ite	cs
 8000f66:	2301      	movcs	r3, #1
 8000f68:	2300      	movcc	r3, #0
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <exec_cpy+0x74>)
 8000f6e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <exec_cpy+0x5e>
	}
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000054 	.word	0x20000054
 8000f84:	20001130 	.word	0x20001130
 8000f88:	20001122 	.word	0x20001122
 8000f8c:	20001129 	.word	0x20001129

08000f90 <exec_dec>:

bool exec_dec(uint8_t ins, int8_t *res)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_dec))
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	f107 010c 	add.w	r1, r7, #12
 8000faa:	f107 000f 	add.w	r0, r7, #15
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <exec_dec+0x58>)
 8000fb0:	f7ff fcb8 	bl	8000924 <get_operand>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d011      	beq.n	8000fde <exec_dec+0x4e>
	{
		mem_write(op_addr, *res = op - 1);
 8000fba:	89ba      	ldrh	r2, [r7, #12]
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	b259      	sxtb	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	7019      	strb	r1, [r3, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f001 f953 	bl	8002280 <mem_write>
		return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <exec_dec+0x50>
	}
	return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000060 	.word	0x20000060

08000fec <exec_inc>:

bool exec_inc(uint8_t ins, int8_t *res)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_inc))
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	f107 010c 	add.w	r1, r7, #12
 8001006:	f107 000f 	add.w	r0, r7, #15
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <exec_inc+0x58>)
 800100c:	f7ff fc8a 	bl	8000924 <get_operand>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d011      	beq.n	800103a <exec_inc+0x4e>
	{
		mem_write(op_addr, *res = op + 1);
 8001016:	89ba      	ldrh	r2, [r7, #12]
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	3301      	adds	r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	b259      	sxtb	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	7019      	strb	r1, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f993 3000 	ldrsb.w	r3, [r3]
 800102e:	4619      	mov	r1, r3
 8001030:	4610      	mov	r0, r2
 8001032:	f001 f925 	bl	8002280 <mem_write>
		return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <exec_inc+0x50>
	}
	return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000006c 	.word	0x2000006c

08001048 <exec_asl>:

bool exec_asl(uint8_t ins, int8_t *res)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_asl))
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	f107 010c 	add.w	r1, r7, #12
 8001062:	f107 000f 	add.w	r0, r7, #15
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <exec_asl+0x6c>)
 8001068:	f7ff fc5c 	bl	8000924 <get_operand>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <exec_asl+0x62>
	{
		fC = op >> 7;
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	11db      	asrs	r3, r3, #7
 8001078:	b25b      	sxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf14      	ite	ne
 800107e:	2301      	movne	r3, #1
 8001080:	2300      	moveq	r3, #0
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <exec_asl+0x70>)
 8001086:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op << 1);
 8001088:	89ba      	ldrh	r2, [r7, #12]
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b259      	sxtb	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	7019      	strb	r1, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f993 3000 	ldrsb.w	r3, [r3]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f001 f8ed 	bl	8002280 <mem_write>
		return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <exec_asl+0x64>
	}
	return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000078 	.word	0x20000078
 80010b8:	20001129 	.word	0x20001129

080010bc <exec_rol>:

bool exec_rol(uint8_t ins, int8_t *res)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_rol))
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	f107 010c 	add.w	r1, r7, #12
 80010d6:	f107 000e 	add.w	r0, r7, #14
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <exec_rol+0x78>)
 80010dc:	f7ff fc22 	bl	8000924 <get_operand>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d021      	beq.n	800112a <exec_rol+0x6e>
	{
		bool c_in = fC;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <exec_rol+0x7c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	73fb      	strb	r3, [r7, #15]
		fC = op >> 7;
 80010ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010f0:	11db      	asrs	r3, r3, #7
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <exec_rol+0x7c>)
 8001100:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op << 1) | (uint8_t)c_in);
 8001102:	89b8      	ldrh	r0, [r7, #12]
 8001104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b25a      	sxtb	r2, r3
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	b25a      	sxtb	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	4619      	mov	r1, r3
 8001122:	f001 f8ad 	bl	8002280 <mem_write>
		return 1;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <exec_rol+0x70>
	}
	return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000084 	.word	0x20000084
 8001138:	20001129 	.word	0x20001129

0800113c <exec_lsr>:

bool exec_lsr(uint8_t ins, int8_t *res)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_lsr))
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	f107 010c 	add.w	r1, r7, #12
 8001156:	f107 000f 	add.w	r0, r7, #15
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <exec_lsr+0x70>)
 800115c:	f7ff fbe2 	bl	8000924 <get_operand>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d01d      	beq.n	80011a2 <exec_lsr+0x66>
	{
		fC = op & 1;
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf14      	ite	ne
 8001174:	2301      	movne	r3, #1
 8001176:	2300      	moveq	r3, #0
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <exec_lsr+0x74>)
 800117c:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op >> 1);
 800117e:	89ba      	ldrh	r2, [r7, #12]
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	085b      	lsrs	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	b259      	sxtb	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	7019      	strb	r1, [r3, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f993 3000 	ldrsb.w	r3, [r3]
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f001 f871 	bl	8002280 <mem_write>
		return 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <exec_lsr+0x68>
	}
	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000090 	.word	0x20000090
 80011b0:	20001129 	.word	0x20001129

080011b4 <exec_ror>:

bool exec_ror(uint8_t ins, int8_t *res)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_ror))
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f107 000e 	add.w	r0, r7, #14
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <exec_ror+0x80>)
 80011d4:	f7ff fba6 	bl	8000924 <get_operand>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d024      	beq.n	8001228 <exec_ror+0x74>
	{
		bool c_in = fC;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <exec_ror+0x84>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	73fb      	strb	r3, [r7, #15]
		fC = op & 1;
 80011e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <exec_ror+0x84>)
 80011fa:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op >> 1) | ((uint8_t)c_in << 7));
 80011fc:	89b8      	ldrh	r0, [r7, #12]
 80011fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	b25b      	sxtb	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b25a      	sxtb	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f993 3000 	ldrsb.w	r3, [r3]
 800121e:	4619      	mov	r1, r3
 8001220:	f001 f82e 	bl	8002280 <mem_write>
		return 1;
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <exec_ror+0x76>
	}
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000009c 	.word	0x2000009c
 8001238:	20001129 	.word	0x20001129

0800123c <exec_lda>:

bool exec_lda(uint8_t ins, int8_t *res)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_lda))
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	f107 000f 	add.w	r0, r7, #15
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <exec_lda+0x44>)
 8001254:	490b      	ldr	r1, [pc, #44]	@ (8001284 <exec_lda+0x48>)
 8001256:	f7ff fb65 	bl	8000924 <get_operand>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <exec_lda+0x3a>
	{
		*res = a = op;
 8001260:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <exec_lda+0x4c>)
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <exec_lda+0x4c>)
 800126a:	f993 2000 	ldrsb.w	r2, [r3]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	701a      	strb	r2, [r3, #0]
		return 1;
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <exec_lda+0x3c>
	}
	return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000a8 	.word	0x200000a8
 8001284:	20001130 	.word	0x20001130
 8001288:	20001120 	.word	0x20001120

0800128c <exec_sta>:

bool exec_sta(uint8_t ins, int8_t *res)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sta))
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	f107 010c 	add.w	r1, r7, #12
 80012a6:	f107 000f 	add.w	r0, r7, #15
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <exec_sta+0x48>)
 80012ac:	f7ff fb3a 	bl	8000924 <get_operand>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <exec_sta+0x3e>
	{
		mem_write(op_addr, a);
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <exec_sta+0x4c>)
 80012ba:	f992 2000 	ldrsb.w	r2, [r2]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 ffdd 	bl	8002280 <mem_write>
		return 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <exec_sta+0x40>
	}
	return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000b4 	.word	0x200000b4
 80012d8:	20001120 	.word	0x20001120

080012dc <exec_ldx>:

bool exec_ldx(uint8_t ins, int8_t *res)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldx))
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	f107 000f 	add.w	r0, r7, #15
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <exec_ldx+0x44>)
 80012f4:	490b      	ldr	r1, [pc, #44]	@ (8001324 <exec_ldx+0x48>)
 80012f6:	f7ff fb15 	bl	8000924 <get_operand>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <exec_ldx+0x3a>
	{
		*res = x = op;
 8001300:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <exec_ldx+0x4c>)
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <exec_ldx+0x4c>)
 800130a:	f993 2000 	ldrsb.w	r2, [r3]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	701a      	strb	r2, [r3, #0]
		return 1;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <exec_ldx+0x3c>
	}
	return 0;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000c0 	.word	0x200000c0
 8001324:	20001130 	.word	0x20001130
 8001328:	20001121 	.word	0x20001121

0800132c <exec_stx>:

bool exec_stx(uint8_t ins, int8_t *res)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_stx))
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	f107 000f 	add.w	r0, r7, #15
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <exec_stx+0x48>)
 800134c:	f7ff faea 	bl	8000924 <get_operand>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <exec_stx+0x3e>
	{
		mem_write(op_addr, x);
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	4a07      	ldr	r2, [pc, #28]	@ (8001378 <exec_stx+0x4c>)
 800135a:	f992 2000 	ldrsb.w	r2, [r2]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 ff8d 	bl	8002280 <mem_write>
		return 1;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <exec_stx+0x40>
	}
	return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000cc 	.word	0x200000cc
 8001378:	20001121 	.word	0x20001121

0800137c <exec_ldy>:

bool exec_ldy(uint8_t ins, int8_t *res)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldy))
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	f107 000f 	add.w	r0, r7, #15
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <exec_ldy+0x44>)
 8001394:	490b      	ldr	r1, [pc, #44]	@ (80013c4 <exec_ldy+0x48>)
 8001396:	f7ff fac5 	bl	8000924 <get_operand>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <exec_ldy+0x3a>
	{
		*res = y = op;
 80013a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <exec_ldy+0x4c>)
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <exec_ldy+0x4c>)
 80013aa:	f993 2000 	ldrsb.w	r2, [r3]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	701a      	strb	r2, [r3, #0]
		return 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <exec_ldy+0x3c>
	}
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000d8 	.word	0x200000d8
 80013c4:	20001130 	.word	0x20001130
 80013c8:	20001122 	.word	0x20001122

080013cc <exec_sty>:

bool exec_sty(uint8_t ins, int8_t *res)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sty))
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	f107 010c 	add.w	r1, r7, #12
 80013e6:	f107 000f 	add.w	r0, r7, #15
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <exec_sty+0x48>)
 80013ec:	f7ff fa9a 	bl	8000924 <get_operand>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <exec_sty+0x3e>
	{
		mem_write(op_addr, y);
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <exec_sty+0x4c>)
 80013fa:	f992 2000 	ldrsb.w	r2, [r2]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f000 ff3d 	bl	8002280 <mem_write>
		return 1;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <exec_sty+0x40>
	}
	return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000e4 	.word	0x200000e4
 8001418:	20001122 	.word	0x20001122

0800141c <exec_ins>:

void exec_ins()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
	uint8_t ins = (uint8_t)mem_read(pc);
 8001422:	4bab      	ldr	r3, [pc, #684]	@ (80016d0 <exec_ins+0x2b4>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fe4a 	bl	80020c0 <mem_read>
 800142c:	4603      	mov	r3, r0
 800142e:	73bb      	strb	r3, [r7, #14]
	int8_t res = 1;
 8001430:	2301      	movs	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
	bool skipZN = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

	if (exec_ora(ins, &res))
 8001438:	1dfa      	adds	r2, r7, #7
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbaa 	bl	8000b98 <exec_ora>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 85e7 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_and(ins, &res))
 800144c:	1dfa      	adds	r2, r7, #7
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fbce 	bl	8000bf4 <exec_and>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 85dd 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_eor(ins, &res))
 8001460:	1dfa      	adds	r2, r7, #7
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fbf2 	bl	8000c50 <exec_eor>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 85d3 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_adc(ins, &res))
 8001474:	1dfa      	adds	r2, r7, #7
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc70 	bl	8000d60 <exec_adc>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 85c9 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_sbc(ins, &res))
 8001488:	1dfa      	adds	r2, r7, #7
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc98 	bl	8000dc4 <exec_sbc>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 85bf 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_cmp(ins, &res))
 800149c:	1dfa      	adds	r2, r7, #7
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fcc0 	bl	8000e28 <exec_cmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 85b5 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_cpx(ins, &res))
 80014b0:	1dfa      	adds	r2, r7, #7
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fcf2 	bl	8000ea0 <exec_cpx>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 85ab 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_cpy(ins, &res))
 80014c4:	1dfa      	adds	r2, r7, #7
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fd24 	bl	8000f18 <exec_cpy>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 85a1 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_dec(ins, &res))
 80014d8:	1dfa      	adds	r2, r7, #7
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fd56 	bl	8000f90 <exec_dec>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8597 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (ins == 0xca)
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	2bca      	cmp	r3, #202	@ 0xca
 80014f0:	d114      	bne.n	800151c <exec_ins+0x100>
	{
		res = --x;
 80014f2:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <exec_ins+0x2b8>)
 80014f4:	f993 3000 	ldrsb.w	r3, [r3]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	4b74      	ldr	r3, [pc, #464]	@ (80016d4 <exec_ins+0x2b8>)
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	4b73      	ldr	r3, [pc, #460]	@ (80016d4 <exec_ins+0x2b8>)
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	71fb      	strb	r3, [r7, #7]
		pc++;
 800150c:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <exec_ins+0x2b4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b6e      	ldr	r3, [pc, #440]	@ (80016d0 <exec_ins+0x2b4>)
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	f000 bd7f 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x88)
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	2b88      	cmp	r3, #136	@ 0x88
 8001520:	d114      	bne.n	800154c <exec_ins+0x130>
	{
		res = --y;
 8001522:	4b6d      	ldr	r3, [pc, #436]	@ (80016d8 <exec_ins+0x2bc>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	b25a      	sxtb	r2, r3
 8001530:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <exec_ins+0x2bc>)
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	4b68      	ldr	r3, [pc, #416]	@ (80016d8 <exec_ins+0x2bc>)
 8001536:	f993 3000 	ldrsb.w	r3, [r3]
 800153a:	71fb      	strb	r3, [r7, #7]
		pc++;
 800153c:	4b64      	ldr	r3, [pc, #400]	@ (80016d0 <exec_ins+0x2b4>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b62      	ldr	r3, [pc, #392]	@ (80016d0 <exec_ins+0x2b4>)
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	f000 bd67 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (exec_inc(ins, &res))
 800154c:	1dfa      	adds	r2, r7, #7
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fd4a 	bl	8000fec <exec_inc>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 855d 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (ins == 0xe8)
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	2be8      	cmp	r3, #232	@ 0xe8
 8001564:	d114      	bne.n	8001590 <exec_ins+0x174>
	{
		res = ++x;
 8001566:	4b5b      	ldr	r3, [pc, #364]	@ (80016d4 <exec_ins+0x2b8>)
 8001568:	f993 3000 	ldrsb.w	r3, [r3]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	b25a      	sxtb	r2, r3
 8001574:	4b57      	ldr	r3, [pc, #348]	@ (80016d4 <exec_ins+0x2b8>)
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	4b56      	ldr	r3, [pc, #344]	@ (80016d4 <exec_ins+0x2b8>)
 800157a:	f993 3000 	ldrsb.w	r3, [r3]
 800157e:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001580:	4b53      	ldr	r3, [pc, #332]	@ (80016d0 <exec_ins+0x2b4>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <exec_ins+0x2b4>)
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	f000 bd45 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xc8)
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	2bc8      	cmp	r3, #200	@ 0xc8
 8001594:	d114      	bne.n	80015c0 <exec_ins+0x1a4>
	{
		res = ++y;
 8001596:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <exec_ins+0x2bc>)
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <exec_ins+0x2bc>)
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	4b4b      	ldr	r3, [pc, #300]	@ (80016d8 <exec_ins+0x2bc>)
 80015aa:	f993 3000 	ldrsb.w	r3, [r3]
 80015ae:	71fb      	strb	r3, [r7, #7]
		pc++;
 80015b0:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <exec_ins+0x2b4>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b45      	ldr	r3, [pc, #276]	@ (80016d0 <exec_ins+0x2b4>)
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	f000 bd2d 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x0a)
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d120      	bne.n	8001608 <exec_ins+0x1ec>
	{
		fC = (uint8_t)a >> 7;
 80015c6:	4b45      	ldr	r3, [pc, #276]	@ (80016dc <exec_ins+0x2c0>)
 80015c8:	f993 3000 	ldrsb.w	r3, [r3]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	09db      	lsrs	r3, r3, #7
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <exec_ins+0x2c4>)
 80015de:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a << 1;
 80015e0:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <exec_ins+0x2c0>)
 80015e2:	f993 3000 	ldrsb.w	r3, [r3]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <exec_ins+0x2c0>)
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <exec_ins+0x2c0>)
 80015f2:	f993 3000 	ldrsb.w	r3, [r3]
 80015f6:	71fb      	strb	r3, [r7, #7]
		pc++;
 80015f8:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <exec_ins+0x2b4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <exec_ins+0x2b4>)
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	f000 bd09 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (exec_asl(ins, &res))
 8001608:	1dfa      	adds	r2, r7, #7
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd1a 	bl	8001048 <exec_asl>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 84ff 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (ins == 0x2a)
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001620:	d127      	bne.n	8001672 <exec_ins+0x256>
	{
		bool c_in = fC;
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <exec_ins+0x2c4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	723b      	strb	r3, [r7, #8]
		fC = (uint8_t)a >> 7;
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <exec_ins+0x2c0>)
 800162a:	f993 3000 	ldrsb.w	r3, [r3]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	09db      	lsrs	r3, r3, #7
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <exec_ins+0x2c4>)
 8001640:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a << 1) | (uint8_t)c_in;
 8001642:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <exec_ins+0x2c0>)
 8001644:	f993 3000 	ldrsb.w	r3, [r3]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	b25a      	sxtb	r2, r3
 800164e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
 8001654:	b25a      	sxtb	r2, r3
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <exec_ins+0x2c0>)
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <exec_ins+0x2c0>)
 800165c:	f993 3000 	ldrsb.w	r3, [r3]
 8001660:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001662:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <exec_ins+0x2b4>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <exec_ins+0x2b4>)
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	f000 bcd4 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (exec_rol(ins, &res))
 8001672:	1dfa      	adds	r2, r7, #7
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd1f 	bl	80010bc <exec_rol>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	f040 84ca 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (ins == 0x4a)
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	2b4a      	cmp	r3, #74	@ 0x4a
 800168a:	d12b      	bne.n	80016e4 <exec_ins+0x2c8>
	{
		fC = (uint8_t)a & 1;
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <exec_ins+0x2c0>)
 800168e:	f993 3000 	ldrsb.w	r3, [r3]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <exec_ins+0x2c4>)
 80016a4:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a >> 1;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <exec_ins+0x2c0>)
 80016a8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <exec_ins+0x2c0>)
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <exec_ins+0x2c0>)
 80016ba:	f993 3000 	ldrsb.w	r3, [r3]
 80016be:	71fb      	strb	r3, [r7, #7]
		pc++;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <exec_ins+0x2b4>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b01      	ldr	r3, [pc, #4]	@ (80016d0 <exec_ins+0x2b4>)
 80016ca:	801a      	strh	r2, [r3, #0]
 80016cc:	f000 bca5 	b.w	800201a <exec_ins+0xbfe>
 80016d0:	2000111e 	.word	0x2000111e
 80016d4:	20001121 	.word	0x20001121
 80016d8:	20001122 	.word	0x20001122
 80016dc:	20001120 	.word	0x20001120
 80016e0:	20001129 	.word	0x20001129
	}
	else if (exec_lsr(ins, &res))
 80016e4:	1dfa      	adds	r2, r7, #7
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd26 	bl	800113c <exec_lsr>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 8491 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (ins == 0x6a)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	2b6a      	cmp	r3, #106	@ 0x6a
 80016fc:	d129      	bne.n	8001752 <exec_ins+0x336>
	{
		bool c_in = fC;
 80016fe:	4b88      	ldr	r3, [pc, #544]	@ (8001920 <exec_ins+0x504>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	727b      	strb	r3, [r7, #9]
		fC = (uint8_t)a & 1;
 8001704:	4b87      	ldr	r3, [pc, #540]	@ (8001924 <exec_ins+0x508>)
 8001706:	f993 3000 	ldrsb.w	r3, [r3]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b81      	ldr	r3, [pc, #516]	@ (8001920 <exec_ins+0x504>)
 800171c:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a >> 1) | ((uint8_t)c_in << 7);
 800171e:	4b81      	ldr	r3, [pc, #516]	@ (8001924 <exec_ins+0x508>)
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b25a      	sxtb	r2, r3
 800172c:	7a7b      	ldrb	r3, [r7, #9]
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25a      	sxtb	r2, r3
 8001736:	4b7b      	ldr	r3, [pc, #492]	@ (8001924 <exec_ins+0x508>)
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	4b7a      	ldr	r3, [pc, #488]	@ (8001924 <exec_ins+0x508>)
 800173c:	f993 3000 	ldrsb.w	r3, [r3]
 8001740:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001742:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <exec_ins+0x50c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <exec_ins+0x50c>)
 800174c:	801a      	strh	r2, [r3, #0]
 800174e:	f000 bc64 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (exec_ror(ins, &res))
 8001752:	1dfa      	adds	r2, r7, #7
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fd2b 	bl	80011b4 <exec_ror>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 845a 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_lda(ins, &res))
 8001766:	1dfa      	adds	r2, r7, #7
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fd65 	bl	800123c <exec_lda>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 8450 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_sta(ins, &res))
 800177a:	1dfa      	adds	r2, r7, #7
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fd83 	bl	800128c <exec_sta>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <exec_ins+0x378>
		skipZN = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	f000 bc43 	b.w	800201a <exec_ins+0xbfe>
	else if (exec_ldx(ins, &res))
 8001794:	1dfa      	adds	r2, r7, #7
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fd9e 	bl	80012dc <exec_ldx>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 8439 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_stx(ins, &res))
 80017a8:	1dfa      	adds	r2, r7, #7
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fdbc 	bl	800132c <exec_stx>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <exec_ins+0x3a6>
		skipZN = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	f000 bc2c 	b.w	800201a <exec_ins+0xbfe>
	else if (exec_ldy(ins, &res))
 80017c2:	1dfa      	adds	r2, r7, #7
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fdd7 	bl	800137c <exec_ldy>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 8422 	bne.w	800201a <exec_ins+0xbfe>
		;
	else if (exec_sty(ins, &res))
 80017d6:	1dfa      	adds	r2, r7, #7
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fdf5 	bl	80013cc <exec_sty>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <exec_ins+0x3d4>
		skipZN = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	f000 bc15 	b.w	800201a <exec_ins+0xbfe>
	else if (ins == 0xaa)
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	2baa      	cmp	r3, #170	@ 0xaa
 80017f4:	d110      	bne.n	8001818 <exec_ins+0x3fc>
	{
		res = x = a;
 80017f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <exec_ins+0x508>)
 80017f8:	f993 2000 	ldrsb.w	r2, [r3]
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <exec_ins+0x510>)
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <exec_ins+0x510>)
 8001802:	f993 3000 	ldrsb.w	r3, [r3]
 8001806:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001808:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <exec_ins+0x50c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <exec_ins+0x50c>)
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	f000 bc01 	b.w	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x8a)
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	2b8a      	cmp	r3, #138	@ 0x8a
 800181c:	d10f      	bne.n	800183e <exec_ins+0x422>
	{
		res = a = x;
 800181e:	4b43      	ldr	r3, [pc, #268]	@ (800192c <exec_ins+0x510>)
 8001820:	f993 2000 	ldrsb.w	r2, [r3]
 8001824:	4b3f      	ldr	r3, [pc, #252]	@ (8001924 <exec_ins+0x508>)
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b3e      	ldr	r3, [pc, #248]	@ (8001924 <exec_ins+0x508>)
 800182a:	f993 3000 	ldrsb.w	r3, [r3]
 800182e:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001830:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <exec_ins+0x50c>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <exec_ins+0x50c>)
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	e3ed      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xa8)
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	2ba8      	cmp	r3, #168	@ 0xa8
 8001842:	d10f      	bne.n	8001864 <exec_ins+0x448>
	{
		res = y = a;
 8001844:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <exec_ins+0x508>)
 8001846:	f993 2000 	ldrsb.w	r2, [r3]
 800184a:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <exec_ins+0x514>)
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <exec_ins+0x514>)
 8001850:	f993 3000 	ldrsb.w	r3, [r3]
 8001854:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <exec_ins+0x50c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <exec_ins+0x50c>)
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	e3da      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x98)
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	2b98      	cmp	r3, #152	@ 0x98
 8001868:	d10f      	bne.n	800188a <exec_ins+0x46e>
	{
		res = a = y;
 800186a:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <exec_ins+0x514>)
 800186c:	f993 2000 	ldrsb.w	r2, [r3]
 8001870:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <exec_ins+0x508>)
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <exec_ins+0x508>)
 8001876:	f993 3000 	ldrsb.w	r3, [r3]
 800187a:	71fb      	strb	r3, [r7, #7]
		pc++;
 800187c:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <exec_ins+0x50c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <exec_ins+0x50c>)
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e3c7      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xba)
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	2bba      	cmp	r3, #186	@ 0xba
 800188e:	d10f      	bne.n	80018b0 <exec_ins+0x494>
	{
		res = x = stack_pointer;
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <exec_ins+0x518>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b25a      	sxtb	r2, r3
 8001896:	4b25      	ldr	r3, [pc, #148]	@ (800192c <exec_ins+0x510>)
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <exec_ins+0x510>)
 800189c:	f993 3000 	ldrsb.w	r3, [r3]
 80018a0:	71fb      	strb	r3, [r7, #7]
		pc++;
 80018a2:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <exec_ins+0x50c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <exec_ins+0x50c>)
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e3b4      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x9a)
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	2b9a      	cmp	r3, #154	@ 0x9a
 80018b4:	d10e      	bne.n	80018d4 <exec_ins+0x4b8>
	{
		stack_pointer = x;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <exec_ins+0x510>)
 80018b8:	f993 3000 	ldrsb.w	r3, [r3]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <exec_ins+0x518>)
 80018c0:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		pc++;
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <exec_ins+0x50c>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <exec_ins+0x50c>)
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	e3a2      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x68)
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	2b68      	cmp	r3, #104	@ 0x68
 80018d8:	d110      	bne.n	80018fc <exec_ins+0x4e0>
	{
		res = a = s_pop();
 80018da:	f7fe ff97 	bl	800080c <s_pop>
 80018de:	4603      	mov	r3, r0
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <exec_ins+0x508>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <exec_ins+0x508>)
 80018e8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ec:	71fb      	strb	r3, [r7, #7]
		pc++;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <exec_ins+0x50c>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <exec_ins+0x50c>)
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	e38e      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x48)
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	2b48      	cmp	r3, #72	@ 0x48
 8001900:	d11a      	bne.n	8001938 <exec_ins+0x51c>
	{
		s_push(a);
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <exec_ins+0x508>)
 8001904:	f993 3000 	ldrsb.w	r3, [r3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ff97 	bl	800083c <s_push>
		skipZN = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <exec_ins+0x50c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <exec_ins+0x50c>)
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	e37c      	b.n	800201a <exec_ins+0xbfe>
 8001920:	20001129 	.word	0x20001129
 8001924:	20001120 	.word	0x20001120
 8001928:	2000111e 	.word	0x2000111e
 800192c:	20001121 	.word	0x20001121
 8001930:	20001122 	.word	0x20001122
 8001934:	2000112a 	.word	0x2000112a
	}
	else if (ins == 0x28)
 8001938:	7bbb      	ldrb	r3, [r7, #14]
 800193a:	2b28      	cmp	r3, #40	@ 0x28
 800193c:	d148      	bne.n	80019d0 <exec_ins+0x5b4>
	{
		uint8_t status = s_pop();
 800193e:	f7fe ff65 	bl	800080c <s_pop>
 8001942:	4603      	mov	r3, r0
 8001944:	72bb      	strb	r3, [r7, #10]
		fN = status & (1 << 7);
 8001946:	7abb      	ldrb	r3, [r7, #10]
 8001948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b8d      	ldr	r3, [pc, #564]	@ (8001b8c <exec_ins+0x770>)
 8001958:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 800195a:	7abb      	ldrb	r3, [r7, #10]
 800195c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b89      	ldr	r3, [pc, #548]	@ (8001b90 <exec_ins+0x774>)
 800196c:	701a      	strb	r2, [r3, #0]
		fD = status & (1 << 3);
 800196e:	7abb      	ldrb	r3, [r7, #10]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf14      	ite	ne
 8001978:	2301      	movne	r3, #1
 800197a:	2300      	moveq	r3, #0
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <exec_ins+0x778>)
 8001980:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 8001982:	7abb      	ldrb	r3, [r7, #10]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b81      	ldr	r3, [pc, #516]	@ (8001b98 <exec_ins+0x77c>)
 8001994:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 8001996:	7abb      	ldrb	r3, [r7, #10]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b7d      	ldr	r3, [pc, #500]	@ (8001b9c <exec_ins+0x780>)
 80019a8:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 80019aa:	7abb      	ldrb	r3, [r7, #10]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <exec_ins+0x784>)
 80019bc:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
		pc++;
 80019c2:	4b78      	ldr	r3, [pc, #480]	@ (8001ba4 <exec_ins+0x788>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <exec_ins+0x788>)
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	e324      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x08)
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d135      	bne.n	8001a42 <exec_ins+0x626>
	{
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 80019d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <exec_ins+0x770>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	4b6c      	ldr	r3, [pc, #432]	@ (8001b90 <exec_ins+0x774>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <exec_ins+0x78c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <exec_ins+0x778>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	4b63      	ldr	r3, [pc, #396]	@ (8001b98 <exec_ins+0x77c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	4b61      	ldr	r3, [pc, #388]	@ (8001b9c <exec_ins+0x780>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba0 <exec_ins+0x784>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe ff06 	bl	800083c <s_push>
		skipZN = 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001a34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba4 <exec_ins+0x788>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <exec_ins+0x788>)
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	e2eb      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x10)
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d11e      	bne.n	8001a86 <exec_ins+0x66a>
	{
		if (!fN)
 8001a48:	4b50      	ldr	r3, [pc, #320]	@ (8001b8c <exec_ins+0x770>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00e      	beq.n	8001a74 <exec_ins+0x658>
			pc += mem_read(pc + 1);
 8001a56:	4b53      	ldr	r3, [pc, #332]	@ (8001ba4 <exec_ins+0x788>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fb2e 	bl	80020c0 <mem_read>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba4 <exec_ins+0x788>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba4 <exec_ins+0x788>)
 8001a72:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001a74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba4 <exec_ins+0x788>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b49      	ldr	r3, [pc, #292]	@ (8001ba4 <exec_ins+0x788>)
 8001a7e:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e2c9      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x30)
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	2b30      	cmp	r3, #48	@ 0x30
 8001a8a:	d11b      	bne.n	8001ac4 <exec_ins+0x6a8>
	{
		if (fN)
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b8c <exec_ins+0x770>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00e      	beq.n	8001ab2 <exec_ins+0x696>
			pc += mem_read(pc + 1);
 8001a94:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <exec_ins+0x788>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fb0f 	bl	80020c0 <mem_read>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <exec_ins+0x788>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <exec_ins+0x788>)
 8001ab0:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <exec_ins+0x788>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <exec_ins+0x788>)
 8001abc:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e2aa      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x50)
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	2b50      	cmp	r3, #80	@ 0x50
 8001ac8:	d11e      	bne.n	8001b08 <exec_ins+0x6ec>
	{
		if (!fV)
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <exec_ins+0x774>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <exec_ins+0x6da>
			pc += mem_read(pc + 1);
 8001ad8:	4b32      	ldr	r3, [pc, #200]	@ (8001ba4 <exec_ins+0x788>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 faed 	bl	80020c0 <mem_read>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <exec_ins+0x788>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <exec_ins+0x788>)
 8001af4:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001af6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <exec_ins+0x788>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	3302      	adds	r3, #2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <exec_ins+0x788>)
 8001b00:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e288      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x70)
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	2b70      	cmp	r3, #112	@ 0x70
 8001b0c:	d11b      	bne.n	8001b46 <exec_ins+0x72a>
	{
		if (fV)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <exec_ins+0x774>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00e      	beq.n	8001b34 <exec_ins+0x718>
			pc += mem_read(pc + 1);
 8001b16:	4b23      	ldr	r3, [pc, #140]	@ (8001ba4 <exec_ins+0x788>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 face 	bl	80020c0 <mem_read>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <exec_ins+0x788>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <exec_ins+0x788>)
 8001b32:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <exec_ins+0x788>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <exec_ins+0x788>)
 8001b3e:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e269      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x90)
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	2b90      	cmp	r3, #144	@ 0x90
 8001b4a:	d12f      	bne.n	8001bac <exec_ins+0x790>
	{
		if (!fC)
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <exec_ins+0x784>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00e      	beq.n	8001b78 <exec_ins+0x75c>
			pc += mem_read(pc + 1);
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <exec_ins+0x788>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 faac 	bl	80020c0 <mem_read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <exec_ins+0x788>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <exec_ins+0x788>)
 8001b76:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <exec_ins+0x788>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <exec_ins+0x788>)
 8001b82:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e247      	b.n	800201a <exec_ins+0xbfe>
 8001b8a:	bf00      	nop
 8001b8c:	20001123 	.word	0x20001123
 8001b90:	20001124 	.word	0x20001124
 8001b94:	20001126 	.word	0x20001126
 8001b98:	20001127 	.word	0x20001127
 8001b9c:	20001128 	.word	0x20001128
 8001ba0:	20001129 	.word	0x20001129
 8001ba4:	2000111e 	.word	0x2000111e
 8001ba8:	20001125 	.word	0x20001125
	}
	else if (ins == 0xb0)
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb0:	d11b      	bne.n	8001bea <exec_ins+0x7ce>
	{
		if (fC)
 8001bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8001e2c <exec_ins+0xa10>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <exec_ins+0x7bc>
			pc += mem_read(pc + 1);
 8001bba:	4b9d      	ldr	r3, [pc, #628]	@ (8001e30 <exec_ins+0xa14>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fa7c 	bl	80020c0 <mem_read>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b98      	ldr	r3, [pc, #608]	@ (8001e30 <exec_ins+0xa14>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <exec_ins+0xa14>)
 8001bd6:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001bd8:	4b95      	ldr	r3, [pc, #596]	@ (8001e30 <exec_ins+0xa14>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b93      	ldr	r3, [pc, #588]	@ (8001e30 <exec_ins+0xa14>)
 8001be2:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e217      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xd0)
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	2bd0      	cmp	r3, #208	@ 0xd0
 8001bee:	d11e      	bne.n	8001c2e <exec_ins+0x812>
	{
		if (!fZ)
 8001bf0:	4b90      	ldr	r3, [pc, #576]	@ (8001e34 <exec_ins+0xa18>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00e      	beq.n	8001c1c <exec_ins+0x800>
			pc += mem_read(pc + 1);
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	@ (8001e30 <exec_ins+0xa14>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fa5a 	bl	80020c0 <mem_read>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b87      	ldr	r3, [pc, #540]	@ (8001e30 <exec_ins+0xa14>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b85      	ldr	r3, [pc, #532]	@ (8001e30 <exec_ins+0xa14>)
 8001c1a:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001c1c:	4b84      	ldr	r3, [pc, #528]	@ (8001e30 <exec_ins+0xa14>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3302      	adds	r3, #2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b82      	ldr	r3, [pc, #520]	@ (8001e30 <exec_ins+0xa14>)
 8001c26:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e1f5      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xf0)
 8001c2e:	7bbb      	ldrb	r3, [r7, #14]
 8001c30:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c32:	d11b      	bne.n	8001c6c <exec_ins+0x850>
	{
		if (fZ)
 8001c34:	4b7f      	ldr	r3, [pc, #508]	@ (8001e34 <exec_ins+0xa18>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00e      	beq.n	8001c5a <exec_ins+0x83e>
			pc += mem_read(pc + 1);
 8001c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e30 <exec_ins+0xa14>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fa3b 	bl	80020c0 <mem_read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b78      	ldr	r3, [pc, #480]	@ (8001e30 <exec_ins+0xa14>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b76      	ldr	r3, [pc, #472]	@ (8001e30 <exec_ins+0xa14>)
 8001c58:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001c5a:	4b75      	ldr	r3, [pc, #468]	@ (8001e30 <exec_ins+0xa14>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <exec_ins+0xa14>)
 8001c64:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e1d6      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x00)
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d144      	bne.n	8001cfc <exec_ins+0x8e0>
	{
		s_push16(pc + 1);
 8001c72:	4b6f      	ldr	r3, [pc, #444]	@ (8001e30 <exec_ins+0xa14>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fe0f 	bl	800089e <s_push16>
		fB = 1;
 8001c80:	4b6d      	ldr	r3, [pc, #436]	@ (8001e38 <exec_ins+0xa1c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8001c86:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <exec_ins+0xa20>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	b25a      	sxtb	r2, r3
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <exec_ins+0xa24>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	019b      	lsls	r3, r3, #6
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	4b65      	ldr	r3, [pc, #404]	@ (8001e38 <exec_ins+0xa1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	4b65      	ldr	r3, [pc, #404]	@ (8001e44 <exec_ins+0xa28>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <exec_ins+0xa2c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e34 <exec_ins+0xa18>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b25a      	sxtb	r2, r3
 8001cd0:	4b56      	ldr	r3, [pc, #344]	@ (8001e2c <exec_ins+0xa10>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fdae 	bl	800083c <s_push>
		fI = 1;
 8001ce0:	4b59      	ldr	r3, [pc, #356]	@ (8001e48 <exec_ins+0xa2c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
		pc = mem_read16(0xfffe);
 8001ce6:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8001cea:	f000 faab 	bl	8002244 <mem_read16>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e30 <exec_ins+0xa14>)
 8001cf4:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e18e      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x40)
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	2b40      	cmp	r3, #64	@ 0x40
 8001d00:	d148      	bne.n	8001d94 <exec_ins+0x978>
	{
		uint8_t status = s_pop();
 8001d02:	f7fe fd83 	bl	800080c <s_pop>
 8001d06:	4603      	mov	r3, r0
 8001d08:	72fb      	strb	r3, [r7, #11]
		fN = status & (1 << 7);
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <exec_ins+0xa20>)
 8001d1c:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <exec_ins+0xa24>)
 8001d30:	701a      	strb	r2, [r3, #0]
		// fB = status & (1 << 4);
		fD = status & (1 << 3);
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <exec_ins+0xa28>)
 8001d44:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b3c      	ldr	r3, [pc, #240]	@ (8001e48 <exec_ins+0xa2c>)
 8001d58:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <exec_ins+0xa18>)
 8001d6c:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <exec_ins+0xa10>)
 8001d80:	701a      	strb	r2, [r3, #0]
		pc = s_pop16();
 8001d82:	f7fe fd75 	bl	8000870 <s_pop16>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <exec_ins+0xa14>)
 8001d8c:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e142      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x20)
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d114      	bne.n	8001dc4 <exec_ins+0x9a8>
	{
		s_push16(pc + 2);
 8001d9a:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <exec_ins+0xa14>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fd7b 	bl	800089e <s_push16>
		pc = mem_read16(pc + 1);
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <exec_ins+0xa14>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa47 	bl	8002244 <mem_read16>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b1d      	ldr	r3, [pc, #116]	@ (8001e30 <exec_ins+0xa14>)
 8001dbc:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e12a      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x60)
 8001dc4:	7bbb      	ldrb	r3, [r7, #14]
 8001dc6:	2b60      	cmp	r3, #96	@ 0x60
 8001dc8:	d109      	bne.n	8001dde <exec_ins+0x9c2>
	{
		pc = s_pop16() + 1;
 8001dca:	f7fe fd51 	bl	8000870 <s_pop16>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <exec_ins+0xa14>)
 8001dd6:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e11d      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x4c)
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	2b4c      	cmp	r3, #76	@ 0x4c
 8001de2:	d10d      	bne.n	8001e00 <exec_ins+0x9e4>
	{
		pc = mem_read16(pc + 1);
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <exec_ins+0xa14>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fa29 	bl	8002244 <mem_read16>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <exec_ins+0xa14>)
 8001df8:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e10c      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x6c)
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	2b6c      	cmp	r3, #108	@ 0x6c
 8001e04:	d122      	bne.n	8001e4c <exec_ins+0xa30>
	{
		pc = mem_read16(mem_read16(pc + 1));
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <exec_ins+0xa14>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa18 	bl	8002244 <mem_read16>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fa14 	bl	8002244 <mem_read16>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <exec_ins+0xa14>)
 8001e22:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e0f7      	b.n	800201a <exec_ins+0xbfe>
 8001e2a:	bf00      	nop
 8001e2c:	20001129 	.word	0x20001129
 8001e30:	2000111e 	.word	0x2000111e
 8001e34:	20001128 	.word	0x20001128
 8001e38:	20001125 	.word	0x20001125
 8001e3c:	20001123 	.word	0x20001123
 8001e40:	20001124 	.word	0x20001124
 8001e44:	20001126 	.word	0x20001126
 8001e48:	20001127 	.word	0x20001127
	}
	else if (ins == 0x24)
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	2b24      	cmp	r3, #36	@ 0x24
 8001e50:	d12f      	bne.n	8001eb2 <exec_ins+0xa96>
	{
		load_ins_buf(2);
 8001e52:	2002      	movs	r0, #2
 8001e54:	f7fe fd38 	bl	80008c8 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read((uint8_t)ins_buf[1]);
 8001e58:	4b7f      	ldr	r3, [pc, #508]	@ (8002058 <exec_ins+0xc3c>)
 8001e5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f92d 	bl	80020c0 <mem_read>
 8001e66:	4603      	mov	r3, r0
 8001e68:	733b      	strb	r3, [r7, #12]
		fZ = (a & op) == 0;
 8001e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800205c <exec_ins+0xc40>)
 8001e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	7b3b      	ldrb	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b77      	ldr	r3, [pc, #476]	@ (8002060 <exec_ins+0xc44>)
 8001e82:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 8001e84:	7b3b      	ldrb	r3, [r7, #12]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b73      	ldr	r3, [pc, #460]	@ (8002064 <exec_ins+0xc48>)
 8001e96:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 8001e98:	7b3b      	ldrb	r3, [r7, #12]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <exec_ins+0xc4c>)
 8001eaa:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e0b3      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x2c)
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001eb6:	d139      	bne.n	8001f2c <exec_ins+0xb10>
	{
		load_ins_buf(3);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f7fe fd05 	bl	80008c8 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read(((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]);
 8001ebe:	4b66      	ldr	r3, [pc, #408]	@ (8002058 <exec_ins+0xc3c>)
 8001ec0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b63      	ldr	r3, [pc, #396]	@ (8002058 <exec_ins+0xc3c>)
 8001ecc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f8f0 	bl	80020c0 <mem_read>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	737b      	strb	r3, [r7, #13]
		fZ = (a & op) == 0;
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <exec_ins+0xc40>)
 8001ee6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eea:	461a      	mov	r2, r3
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <exec_ins+0xc44>)
 8001efc:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 8001efe:	7b7b      	ldrb	r3, [r7, #13]
 8001f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b55      	ldr	r3, [pc, #340]	@ (8002064 <exec_ins+0xc48>)
 8001f10:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 8001f12:	7b7b      	ldrb	r3, [r7, #13]
 8001f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <exec_ins+0xc4c>)
 8001f24:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e076      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x18)
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	2b18      	cmp	r3, #24
 8001f30:	d10b      	bne.n	8001f4a <exec_ins+0xb2e>
	{
		fC = 0;
 8001f32:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <exec_ins+0xc50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <exec_ins+0xc54>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <exec_ins+0xc54>)
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	e067      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x38)
 8001f4a:	7bbb      	ldrb	r3, [r7, #14]
 8001f4c:	2b38      	cmp	r3, #56	@ 0x38
 8001f4e:	d10b      	bne.n	8001f68 <exec_ins+0xb4c>
	{
		fC = 1;
 8001f50:	4b46      	ldr	r3, [pc, #280]	@ (800206c <exec_ins+0xc50>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001f5a:	4b45      	ldr	r3, [pc, #276]	@ (8002070 <exec_ins+0xc54>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <exec_ins+0xc54>)
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e058      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xd8)
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	2bd8      	cmp	r3, #216	@ 0xd8
 8001f6c:	d10b      	bne.n	8001f86 <exec_ins+0xb6a>
	{
		fD = 0;
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <exec_ins+0xc58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001f78:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <exec_ins+0xc54>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <exec_ins+0xc54>)
 8001f82:	801a      	strh	r2, [r3, #0]
 8001f84:	e049      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xf8)
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	2bf8      	cmp	r3, #248	@ 0xf8
 8001f8a:	d10b      	bne.n	8001fa4 <exec_ins+0xb88>
	{
		fD = 1;
 8001f8c:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <exec_ins+0xc58>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <exec_ins+0xc54>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <exec_ins+0xc54>)
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	e03a      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x58)
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	2b58      	cmp	r3, #88	@ 0x58
 8001fa8:	d10b      	bne.n	8001fc2 <exec_ins+0xba6>
	{
		fI = 0;
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <exec_ins+0xc5c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <exec_ins+0xc54>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002070 <exec_ins+0xc54>)
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	e02b      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0x78)
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	2b78      	cmp	r3, #120	@ 0x78
 8001fc6:	d10b      	bne.n	8001fe0 <exec_ins+0xbc4>
	{
		fI = 1;
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <exec_ins+0xc5c>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <exec_ins+0xc54>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <exec_ins+0xc54>)
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	e01c      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xb8)
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	2bb8      	cmp	r3, #184	@ 0xb8
 8001fe4:	d10b      	bne.n	8001ffe <exec_ins+0xbe2>
	{
		fV = 0;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <exec_ins+0xc4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <exec_ins+0xc54>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <exec_ins+0xc54>)
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	e00d      	b.n	800201a <exec_ins+0xbfe>
	}
	else if (ins == 0xea)
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	2bea      	cmp	r3, #234	@ 0xea
 8002002:	d108      	bne.n	8002016 <exec_ins+0xbfa>
	{
		skipZN = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <exec_ins+0xc54>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <exec_ins+0xc54>)
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e001      	b.n	800201a <exec_ins+0xbfe>
	}
	else
	{
		reset();
 8002016:	f7fe fb4f 	bl	80006b8 <reset>
	}

	if (!skipZN)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d013      	beq.n	800204e <exec_ins+0xc32>
	{
		fZ = res == 0;
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <exec_ins+0xc44>)
 8002036:	701a      	strb	r2, [r3, #0]
		fN = res & (1 << 7);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <exec_ins+0xc48>)
 800204c:	701a      	strb	r2, [r3, #0]
	}
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000112c 	.word	0x2000112c
 800205c:	20001120 	.word	0x20001120
 8002060:	20001128 	.word	0x20001128
 8002064:	20001123 	.word	0x20001123
 8002068:	20001124 	.word	0x20001124
 800206c:	20001129 	.word	0x20001129
 8002070:	2000111e 	.word	0x2000111e
 8002074:	20001126 	.word	0x20001126
 8002078:	20001127 	.word	0x20001127

0800207c <display_clear>:
uint16_t color_bright = (0b01110 << 11) | (0b011011 << 5) | 0b11101;
uint16_t color_dark = (0b00101 << 11) | (0b001000 << 5) | 0b11010;
uint8_t display_zoom = 0;

void display_clear()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	for (uint16_t x = 0; x < 500; x++)
 8002082:	2300      	movs	r3, #0
 8002084:	80fb      	strh	r3, [r7, #6]
 8002086:	e012      	b.n	80020ae <display_clear+0x32>
	{
		for (uint16_t y = 0; y < 500; y++)
 8002088:	2300      	movs	r3, #0
 800208a:	80bb      	strh	r3, [r7, #4]
 800208c:	e008      	b.n	80020a0 <display_clear+0x24>
		{
			display_set_pixel(x, y, 0);
 800208e:	88b9      	ldrh	r1, [r7, #4]
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	2200      	movs	r2, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fe2d 	bl	8002cf4 <display_set_pixel>
		for (uint16_t y = 0; y < 500; y++)
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	3301      	adds	r3, #1
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020a6:	d3f2      	bcc.n	800208e <display_clear+0x12>
	for (uint16_t x = 0; x < 500; x++)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	3301      	adds	r3, #1
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020b4:	d3e8      	bcc.n	8002088 <display_clear+0xc>
		}
	}
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <mem_read>:
int8_t basicram[24827]; // 38912
uint8_t ram[4096] = {
	120, 162, 0, 160, 0, 200, 208, 253, 232, 208, 250, 108, 252, 255 };

int8_t mem_read(uint16_t addr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
	uint16_t addr_off = addr;
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	2bff      	cmp	r3, #255	@ 0xff
 80020d2:	d803      	bhi.n	80020dc <mem_read+0x1c>
	{
		// zeropage
		return zeropage[addr];
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <mem_read+0x160>)
 80020d8:	56d3      	ldrsb	r3, [r2, r3]
 80020da:	e09c      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0x0200)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e2:	d207      	bcs.n	80020f4 <mem_read+0x34>
	{
		addr_off -= 0x0100;
 80020e4:	89fb      	ldrh	r3, [r7, #14]
 80020e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020ea:	81fb      	strh	r3, [r7, #14]
		// stack
		return stack[addr_off];
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002224 <mem_read+0x164>)
 80020f0:	56d3      	ldrsb	r3, [r2, r3]
 80020f2:	e090      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0x0400)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d207      	bcs.n	800210c <mem_read+0x4c>
	{
		addr_off -= 0x0200;
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002102:	81fb      	strh	r3, [r7, #14]
		// sysvar
		return sysvar[addr_off];
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	4a48      	ldr	r2, [pc, #288]	@ (8002228 <mem_read+0x168>)
 8002108:	56d3      	ldrsb	r3, [r2, r3]
 800210a:	e084      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0x0800)
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002112:	d207      	bcs.n	8002124 <mem_read+0x64>
	{
		addr_off -= 0x0400;
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800211a:	81fb      	strh	r3, [r7, #14]
		// screen
		return screen[addr_off];
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	4a43      	ldr	r2, [pc, #268]	@ (800222c <mem_read+0x16c>)
 8002120:	56d3      	ldrsb	r3, [r2, r3]
 8002122:	e078      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0xa000)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800212a:	d207      	bcs.n	800213c <mem_read+0x7c>
	{
		addr_off -= 0x0800;
 800212c:	89fb      	ldrh	r3, [r7, #14]
 800212e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002132:	81fb      	strh	r3, [r7, #14]
		// basic ram
		return basicram[addr_off];
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	4a3e      	ldr	r2, [pc, #248]	@ (8002230 <mem_read+0x170>)
 8002138:	56d3      	ldrsb	r3, [r2, r3]
 800213a:	e06c      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0xc000)
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002142:	d208      	bcs.n	8002156 <mem_read+0x96>
	{
		addr_off -= 0xa000;
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 800214a:	81fb      	strh	r3, [r7, #14]
		// basic rom
		return basic[addr_off];
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <mem_read+0x174>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	e05f      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0xd000)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 800215c:	d208      	bcs.n	8002170 <mem_read+0xb0>
	{
		addr_off -= 0xc000;
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002164:	81fb      	strh	r3, [r7, #14]
		// free ram
		return ram[addr_off];
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	4a33      	ldr	r2, [pc, #204]	@ (8002238 <mem_read+0x178>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	b25b      	sxtb	r3, r3
 800216e:	e052      	b.n	8002216 <mem_read+0x156>
	}
	else if (addr < 0xe000)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002176:	d244      	bcs.n	8002202 <mem_read+0x142>
	{
		if (addr < 0xd400)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 800217e:	d209      	bcs.n	8002194 <mem_read+0xd4>
		{
			addr_off -= 0xd000;
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002186:	81fb      	strh	r3, [r7, #14]
			// vic registers
			return vic_read(addr_off);
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f99e 	bl	80024cc <vic_read>
 8002190:	4603      	mov	r3, r0
 8002192:	e040      	b.n	8002216 <mem_read+0x156>
		}
		else if (addr < 0xd800)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800219a:	d204      	bcs.n	80021a6 <mem_read+0xe6>
		{
			addr_off -= 0xd400;
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 80021a2:	81fb      	strh	r3, [r7, #14]
 80021a4:	e036      	b.n	8002214 <mem_read+0x154>
			// sid registers
		}
		else if (addr < 0xdc00)
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80021ac:	d204      	bcs.n	80021b8 <mem_read+0xf8>
		{
			addr_off -= 0xd800;
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80021b4:	81fb      	strh	r3, [r7, #14]
 80021b6:	e02d      	b.n	8002214 <mem_read+0x154>
			// color ram
		}
		else if (addr < 0xdd00)
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 80021be:	d20d      	bcs.n	80021dc <mem_read+0x11c>
		{
			addr_off -= 0xdc00;
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80021c6:	81fb      	strh	r3, [r7, #14]
			return cia_read(addr_off % 16);
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f98a 	bl	80004ec <cia_read>
 80021d8:	4603      	mov	r3, r0
 80021da:	e01c      	b.n	8002216 <mem_read+0x156>
		}
		else if (addr < 0xde00)
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 80021e2:	d209      	bcs.n	80021f8 <mem_read+0x138>
		{
			addr_off -= 0xdd00;
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 80021ea:	81fb      	strh	r3, [r7, #14]
			// cia 2
			return cia2_reg[addr_off % 16];
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <mem_read+0x17c>)
 80021f4:	56d3      	ldrsb	r3, [r2, r3]
 80021f6:	e00e      	b.n	8002216 <mem_read+0x156>
		}
		else
		{
			addr_off -= 0xde00;
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 80021fe:	81fb      	strh	r3, [r7, #14]
 8002200:	e008      	b.n	8002214 <mem_read+0x154>
			// interface expansions
		}
	}
	else
	{
		addr_off -= 0xe000;
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002208:	81fb      	strh	r3, [r7, #14]
		// kernal rom
		return kernal[addr_off];
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <mem_read+0x180>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	e000      	b.n	8002216 <mem_read+0x156>
	}
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20001134 	.word	0x20001134
 8002224:	20001234 	.word	0x20001234
 8002228:	20001334 	.word	0x20001334
 800222c:	20001534 	.word	0x20001534
 8002230:	20001944 	.word	0x20001944
 8002234:	08007a38 	.word	0x08007a38
 8002238:	200000f4 	.word	0x200000f4
 800223c:	20001934 	.word	0x20001934
 8002240:	0800aa38 	.word	0x0800aa38

08002244 <mem_read16>:

uint16_t mem_read16(uint16_t addr0)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)(uint8_t)mem_read(addr0 + 1) << 8) | (uint16_t)(uint8_t)mem_read(addr0);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	3301      	adds	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff33 	bl	80020c0 <mem_read>
 800225a:	4603      	mov	r3, r0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21c      	sxth	r4, r3
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff2b 	bl	80020c0 <mem_read>
 800226a:	4603      	mov	r3, r0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	b21b      	sxth	r3, r3
 8002270:	4323      	orrs	r3, r4
 8002272:	b21b      	sxth	r3, r3
 8002274:	b29b      	uxth	r3, r3
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
	...

08002280 <mem_write>:

void mem_write(uint16_t addr, int8_t d)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	80fb      	strh	r3, [r7, #6]
 800228c:	4613      	mov	r3, r2
 800228e:	717b      	strb	r3, [r7, #5]
	uint16_t addr_off = addr;
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	2bff      	cmp	r3, #255	@ 0xff
 8002298:	d804      	bhi.n	80022a4 <mem_write+0x24>
	{
		// zeropage
		zeropage[addr] = d;
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4981      	ldr	r1, [pc, #516]	@ (80024a4 <mem_write+0x224>)
 800229e:	797a      	ldrb	r2, [r7, #5]
 80022a0:	54ca      	strb	r2, [r1, r3]
	else
	{
		addr_off -= 0xe000;
		// kernal rom
	}
}
 80022a2:	e0fb      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0x0200)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022aa:	d208      	bcs.n	80022be <mem_write+0x3e>
		addr_off -= 0x0100;
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022b2:	81fb      	strh	r3, [r7, #14]
		stack[addr_off] = d;
 80022b4:	89fb      	ldrh	r3, [r7, #14]
 80022b6:	497c      	ldr	r1, [pc, #496]	@ (80024a8 <mem_write+0x228>)
 80022b8:	797a      	ldrb	r2, [r7, #5]
 80022ba:	54ca      	strb	r2, [r1, r3]
}
 80022bc:	e0ee      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0x0400)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c4:	d208      	bcs.n	80022d8 <mem_write+0x58>
		addr_off -= 0x0200;
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80022cc:	81fb      	strh	r3, [r7, #14]
		sysvar[addr_off] = d;
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	4976      	ldr	r1, [pc, #472]	@ (80024ac <mem_write+0x22c>)
 80022d2:	797a      	ldrb	r2, [r7, #5]
 80022d4:	54ca      	strb	r2, [r1, r3]
}
 80022d6:	e0e1      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0x0800)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022de:	d20f      	bcs.n	8002300 <mem_write+0x80>
		addr_off -= 0x0400;
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80022e6:	81fb      	strh	r3, [r7, #14]
		screen[addr_off] = d;
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	4971      	ldr	r1, [pc, #452]	@ (80024b0 <mem_write+0x230>)
 80022ec:	797a      	ldrb	r2, [r7, #5]
 80022ee:	54ca      	strb	r2, [r1, r3]
		vic_write_screen(addr_off, d);
 80022f0:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f949 	bl	8002590 <vic_write_screen>
}
 80022fe:	e0cd      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xa000)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002306:	d208      	bcs.n	800231a <mem_write+0x9a>
		addr_off -= 0x0800;
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800230e:	81fb      	strh	r3, [r7, #14]
		basicram[addr_off] = d;
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	4968      	ldr	r1, [pc, #416]	@ (80024b4 <mem_write+0x234>)
 8002314:	797a      	ldrb	r2, [r7, #5]
 8002316:	54ca      	strb	r2, [r1, r3]
}
 8002318:	e0c0      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xc000)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002320:	d204      	bcs.n	800232c <mem_write+0xac>
		addr_off -= 0xa000;
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8002328:	81fb      	strh	r3, [r7, #14]
}
 800232a:	e0b7      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xd000)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 8002332:	d261      	bcs.n	80023f8 <mem_write+0x178>
		addr_off -= 0xc000;
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800233a:	81fb      	strh	r3, [r7, #14]
		ram[addr_off] = d;
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	7979      	ldrb	r1, [r7, #5]
 8002340:	4a5d      	ldr	r2, [pc, #372]	@ (80024b8 <mem_write+0x238>)
 8002342:	54d1      	strb	r1, [r2, r3]
		if (addr == 0xcff1)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	f64c 72f1 	movw	r2, #53233	@ 0xcff1
 800234a:	4293      	cmp	r3, r2
 800234c:	d102      	bne.n	8002354 <mem_write+0xd4>
			display_zoom = d;
 800234e:	797a      	ldrb	r2, [r7, #5]
 8002350:	4b5a      	ldr	r3, [pc, #360]	@ (80024bc <mem_write+0x23c>)
 8002352:	701a      	strb	r2, [r3, #0]
		if (addr == 0xcff2)
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	f64c 72f2 	movw	r2, #53234	@ 0xcff2
 800235a:	4293      	cmp	r3, r2
 800235c:	f040 809e 	bne.w	800249c <mem_write+0x21c>
			if (d == 0)
 8002360:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <mem_write+0xfa>
				color_bright = (0b11001 << 11) | (0b111000 << 5) | 0b11111;
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <mem_write+0x240>)
 800236a:	f64c 721f 	movw	r2, #53023	@ 0xcf1f
 800236e:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00101 << 11) | (0b001000 << 5) | 0b11010;
 8002370:	4b54      	ldr	r3, [pc, #336]	@ (80024c4 <mem_write+0x244>)
 8002372:	f642 121a 	movw	r2, #10522	@ 0x291a
 8002376:	801a      	strh	r2, [r3, #0]
}
 8002378:	e090      	b.n	800249c <mem_write+0x21c>
			else if (d == 1)
 800237a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <mem_write+0x114>
				color_bright = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <mem_write+0x240>)
 8002384:	f645 4268 	movw	r2, #23656	@ 0x5c68
 8002388:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 800238a:	4b4e      	ldr	r3, [pc, #312]	@ (80024c4 <mem_write+0x244>)
 800238c:	f640 1244 	movw	r2, #2372	@ 0x944
 8002390:	801a      	strh	r2, [r3, #0]
}
 8002392:	e083      	b.n	800249c <mem_write+0x21c>
			else if (d == 2)
 8002394:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d108      	bne.n	80023ae <mem_write+0x12e>
				color_bright = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 800239c:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <mem_write+0x240>)
 800239e:	f640 1244 	movw	r2, #2372	@ 0x944
 80023a2:	801a      	strh	r2, [r3, #0]
				color_dark = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 80023a4:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <mem_write+0x244>)
 80023a6:	f645 4268 	movw	r2, #23656	@ 0x5c68
 80023aa:	801a      	strh	r2, [r3, #0]
}
 80023ac:	e076      	b.n	800249c <mem_write+0x21c>
			else if (d == 3)
 80023ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <mem_write+0x146>
				color_bright = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 80023b6:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <mem_write+0x240>)
 80023b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023bc:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <mem_write+0x244>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]
}
 80023c4:	e06a      	b.n	800249c <mem_write+0x21c>
			else if (d == 4)
 80023c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d107      	bne.n	80023de <mem_write+0x15e>
				color_bright = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 80023ce:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <mem_write+0x240>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	801a      	strh	r2, [r3, #0]
				color_dark = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <mem_write+0x244>)
 80023d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023da:	801a      	strh	r2, [r3, #0]
}
 80023dc:	e05e      	b.n	800249c <mem_write+0x21c>
			else if (d == 5)
 80023de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d15a      	bne.n	800249c <mem_write+0x21c>
				color_bright = (0b01010 << 11) | (0b110000 << 5) | 0b11111;
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <mem_write+0x240>)
 80023e8:	f245 621f 	movw	r2, #22047	@ 0x561f
 80023ec:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00100 << 11) | (0b001000 << 5) | 0b00100;
 80023ee:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <mem_write+0x244>)
 80023f0:	f242 1204 	movw	r2, #8452	@ 0x2104
 80023f4:	801a      	strh	r2, [r3, #0]
}
 80023f6:	e051      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xd400)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 80023fe:	d20b      	bcs.n	8002418 <mem_write+0x198>
		addr_off -= 0xd000;
 8002400:	89fb      	ldrh	r3, [r7, #14]
 8002402:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002406:	81fb      	strh	r3, [r7, #14]
		vic_write(addr_off, d);
 8002408:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f89b 	bl	800254c <vic_write>
}
 8002416:	e041      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xd800)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800241e:	d204      	bcs.n	800242a <mem_write+0x1aa>
		addr_off -= 0xd400;
 8002420:	89fb      	ldrh	r3, [r7, #14]
 8002422:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002426:	81fb      	strh	r3, [r7, #14]
}
 8002428:	e038      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xdc00)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002430:	d204      	bcs.n	800243c <mem_write+0x1bc>
		addr_off -= 0xd800;
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002438:	81fb      	strh	r3, [r7, #14]
}
 800243a:	e02f      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xdd00)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 8002442:	d20f      	bcs.n	8002464 <mem_write+0x1e4>
		addr_off -= 0xdc00;
 8002444:	89fb      	ldrh	r3, [r7, #14]
 8002446:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800244a:	81fb      	strh	r3, [r7, #14]
		cia_write(addr_off % 16, d);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f8c3 	bl	80005e8 <cia_write>
}
 8002462:	e01b      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xde00)
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 800246a:	d20a      	bcs.n	8002482 <mem_write+0x202>
		addr_off -= 0xdd00;
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8002472:	81fb      	strh	r3, [r7, #14]
		cia2_reg[addr_off % 16] = d;
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4913      	ldr	r1, [pc, #76]	@ (80024c8 <mem_write+0x248>)
 800247c:	797a      	ldrb	r2, [r7, #5]
 800247e:	54ca      	strb	r2, [r1, r3]
}
 8002480:	e00c      	b.n	800249c <mem_write+0x21c>
	else if (addr < 0xe000)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002488:	d204      	bcs.n	8002494 <mem_write+0x214>
		addr_off -= 0xde00;
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8002490:	81fb      	strh	r3, [r7, #14]
}
 8002492:	e003      	b.n	800249c <mem_write+0x21c>
		addr_off -= 0xe000;
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800249a:	81fb      	strh	r3, [r7, #14]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20001134 	.word	0x20001134
 80024a8:	20001234 	.word	0x20001234
 80024ac:	20001334 	.word	0x20001334
 80024b0:	20001534 	.word	0x20001534
 80024b4:	20001944 	.word	0x20001944
 80024b8:	200000f4 	.word	0x200000f4
 80024bc:	20001132 	.word	0x20001132
 80024c0:	200000f0 	.word	0x200000f0
 80024c4:	200000f2 	.word	0x200000f2
 80024c8:	20001934 	.word	0x20001934

080024cc <vic_read>:

uint8_t vic_reg[48];
uint8_t vic_line = 0;

int8_t vic_read(uint16_t addr_off)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
	if (addr_off == 0x12)
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d114      	bne.n	8002506 <vic_read+0x3a>
		return vic_line = (vic_line + 1) % 24;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <vic_read+0x70>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <vic_read+0x74>)
 80024e4:	fb83 1302 	smull	r1, r3, r3, r2
 80024e8:	1099      	asrs	r1, r3, #2
 80024ea:	17d3      	asrs	r3, r2, #31
 80024ec:	1ac9      	subs	r1, r1, r3
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1ad1      	subs	r1, r2, r3
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <vic_read+0x70>)
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <vic_read+0x70>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b25b      	sxtb	r3, r3
 8002504:	e013      	b.n	800252e <vic_read+0x62>
	else if (addr_off == 0x19)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b19      	cmp	r3, #25
 800250a:	d101      	bne.n	8002510 <vic_read+0x44>
		return 0; // NTSC
 800250c:	2300      	movs	r3, #0
 800250e:	e00e      	b.n	800252e <vic_read+0x62>
	else
		return vic_reg[addr_off % 0x30];
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <vic_read+0x78>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	0959      	lsrs	r1, r3, #5
 800251a:	460b      	mov	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	440b      	add	r3, r1
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <vic_read+0x7c>)
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	b25b      	sxtb	r3, r3
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20007a70 	.word	0x20007a70
 8002540:	2aaaaaab 	.word	0x2aaaaaab
 8002544:	aaaaaaab 	.word	0xaaaaaaab
 8002548:	20007a40 	.word	0x20007a40

0800254c <vic_write>:

void vic_write(uint16_t addr_off, int8_t d)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	4613      	mov	r3, r2
 800255a:	717b      	strb	r3, [r7, #5]
	vic_reg[addr_off % 0x30] = d;
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <vic_write+0x3c>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	0959      	lsrs	r1, r3, #5
 8002566:	460b      	mov	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	7979      	ldrb	r1, [r7, #5]
 8002576:	4b05      	ldr	r3, [pc, #20]	@ (800258c <vic_write+0x40>)
 8002578:	5499      	strb	r1, [r3, r2]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	aaaaaaab 	.word	0xaaaaaaab
 800258c:	20007a40 	.word	0x20007a40

08002590 <vic_write_screen>:

void vic_write_screen(uint16_t addr_off, int8_t d)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	460a      	mov	r2, r1
 800259a:	80fb      	strh	r3, [r7, #6]
 800259c:	4613      	mov	r3, r2
 800259e:	717b      	strb	r3, [r7, #5]
	if (addr_off < 1000)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025a6:	d25e      	bcs.n	8002666 <vic_write_screen+0xd6>
	{
		uint16_t screen_x = addr_off % 40;
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <vic_write_screen+0xe0>)
 80025ac:	fba3 1302 	umull	r1, r3, r3, r2
 80025b0:	0959      	lsrs	r1, r3, #5
 80025b2:	460b      	mov	r3, r1
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	82bb      	strh	r3, [r7, #20]
		uint16_t screen_y = addr_off / 40;
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002670 <vic_write_screen+0xe0>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	827b      	strh	r3, [r7, #18]
		for (uint8_t char_y = 0; char_y < 8; char_y++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
 80025ce:	e047      	b.n	8002660 <vic_write_screen+0xd0>
		{
			uint16_t char_offset = (uint8_t)vic_reg[0x18] >> 1 ? 0x0000 : 0x0800;
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <vic_write_screen+0xe4>)
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <vic_write_screen+0x50>
 80025dc:	2300      	movs	r3, #0
 80025de:	e001      	b.n	80025e4 <vic_write_screen+0x54>
 80025e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025e4:	823b      	strh	r3, [r7, #16]
			uint8_t char_line = characters[(uint8_t)d * 8 + char_y + char_offset];
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	00da      	lsls	r2, r3, #3
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	441a      	add	r2, r3
 80025ee:	8a3b      	ldrh	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <vic_write_screen+0xe8>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	73fb      	strb	r3, [r7, #15]
			for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	75bb      	strb	r3, [r7, #22]
 80025fc:	e023      	b.n	8002646 <vic_write_screen+0xb6>
			{
				uint16_t total_x = 8 * screen_x + char_x;
 80025fe:	8abb      	ldrh	r3, [r7, #20]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	b29a      	uxth	r2, r3
 8002604:	7dbb      	ldrb	r3, [r7, #22]
 8002606:	b29b      	uxth	r3, r3
 8002608:	4413      	add	r3, r2
 800260a:	81bb      	strh	r3, [r7, #12]
				uint16_t total_y = 8 * screen_y + char_y;
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	b29a      	uxth	r2, r3
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4413      	add	r3, r2
 8002618:	817b      	strh	r3, [r7, #10]
				display_set_pixel(total_x, total_y, (char_line >> (7 - (char_x % 8))) & 1);
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	7dbb      	ldrb	r3, [r7, #22]
 800261e:	43db      	mvns	r3, r3
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	fa42 f303 	asr.w	r3, r2, r3
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fb5a 	bl	8002cf4 <display_set_pixel>
			for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 8002640:	7dbb      	ldrb	r3, [r7, #22]
 8002642:	3301      	adds	r3, #1
 8002644:	75bb      	strb	r3, [r7, #22]
 8002646:	7dbb      	ldrb	r3, [r7, #22]
 8002648:	4a0c      	ldr	r2, [pc, #48]	@ (800267c <vic_write_screen+0xec>)
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d001      	beq.n	8002654 <vic_write_screen+0xc4>
 8002650:	2210      	movs	r2, #16
 8002652:	e000      	b.n	8002656 <vic_write_screen+0xc6>
 8002654:	2208      	movs	r2, #8
 8002656:	429a      	cmp	r2, r3
 8002658:	dcd1      	bgt.n	80025fe <vic_write_screen+0x6e>
		for (uint8_t char_y = 0; char_y < 8; char_y++)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	3301      	adds	r3, #1
 800265e:	75fb      	strb	r3, [r7, #23]
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b07      	cmp	r3, #7
 8002664:	d9b4      	bls.n	80025d0 <vic_write_screen+0x40>
			}
		}
	}
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	cccccccd 	.word	0xcccccccd
 8002674:	20007a40 	.word	0x20007a40
 8002678:	08009a38 	.word	0x08009a38
 800267c:	20001132 	.word	0x20001132

08002680 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002686:	f000 ffe1 	bl	800364c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800268a:	f000 f8b1 	bl	80027f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800268e:	f000 fa99 	bl	8002bc4 <MX_GPIO_Init>
	MX_DMA_Init();
 8002692:	f000 fa79 	bl	8002b88 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002696:	f000 fa47 	bl	8002b28 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800269a:	f000 f92d 	bl	80028f8 <MX_TIM2_Init>
	MX_DAC1_Init();
 800269e:	f000 f8f9 	bl	8002894 <MX_DAC1_Init>
	MX_TIM4_Init();
 80026a2:	f000 f9a1 	bl	80029e8 <MX_TIM4_Init>
	MX_TIM15_Init();
 80026a6:	f000 f9ed 	bl	8002a84 <MX_TIM15_Init>
		 */
	}
#endif

#if PAL
	hpal1.hdac = &hdac1;
 80026aa:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <main+0x154>)
 80026ac:	4a4a      	ldr	r2, [pc, #296]	@ (80027d8 <main+0x158>)
 80026ae:	601a      	str	r2, [r3, #0]
	hpal1.dac_channel = DAC_CHANNEL_1;
 80026b0:	4b48      	ldr	r3, [pc, #288]	@ (80027d4 <main+0x154>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
	hpal1.htim = &htim4;
 80026b6:	4b47      	ldr	r3, [pc, #284]	@ (80027d4 <main+0x154>)
 80026b8:	4a48      	ldr	r2, [pc, #288]	@ (80027dc <main+0x15c>)
 80026ba:	609a      	str	r2, [r3, #8]
	PAL_Init(&hpal1);
 80026bc:	4845      	ldr	r0, [pc, #276]	@ (80027d4 <main+0x154>)
 80026be:	f000 fb75 	bl	8002dac <PAL_Init>
	for (uint32_t y = 0; y < PAL_FRAME_LINE_COUNT; y++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e018      	b.n	80026fa <main+0x7a>
	{
		for (uint32_t x = 0; x < PAL_FRAME_LINE_LEN; x++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	e00f      	b.n	80026ee <main+0x6e>
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = PAL_BLACK;
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	019b      	lsls	r3, r3, #6
 80026d8:	441a      	add	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4413      	add	r3, r2
 80026de:	4a3d      	ldr	r2, [pc, #244]	@ (80027d4 <main+0x154>)
 80026e0:	4413      	add	r3, r2
 80026e2:	2217      	movs	r2, #23
 80026e4:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
		for (uint32_t x = 0; x < PAL_FRAME_LINE_LEN; x++)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3301      	adds	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80026f2:	d9ec      	bls.n	80026ce <main+0x4e>
	for (uint32_t y = 0; y < PAL_FRAME_LINE_COUNT; y++)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8002700:	d9e2      	bls.n	80026c8 <main+0x48>
		}
	}
	PAL_Start(&hpal1);
 8002702:	4834      	ldr	r0, [pc, #208]	@ (80027d4 <main+0x154>)
 8002704:	f000 fc60 	bl	8002fc8 <PAL_Start>

	reset();
 8002708:	f7fd ffd6 	bl	80006b8 <reset>
	ram[0xff0] = ram[0xff1] = ram[0xff2] = 0;
 800270c:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <main+0x160>)
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2ff2 	strb.w	r2, [r3, #4082]	@ 0xff2
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <main+0x160>)
 8002716:	f893 2ff2 	ldrb.w	r2, [r3, #4082]	@ 0xff2
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <main+0x160>)
 800271c:	f883 2ff1 	strb.w	r2, [r3, #4081]	@ 0xff1
 8002720:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <main+0x160>)
 8002722:	f893 2ff1 	ldrb.w	r2, [r3, #4081]	@ 0xff1
 8002726:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <main+0x160>)
 8002728:	f883 2ff0 	strb.w	r2, [r3, #4080]	@ 0xff0
	while (1)
	{
		if (c64_irq)
 800272c:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <main+0x164>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <main+0xbe>
		{
			irq();
 8002734:	f7fe f80e 	bl	8000754 <irq>
			c64_irq = 0;
 8002738:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <main+0x164>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
		}
		if (pc == 0xe544)
 800273e:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <main+0x168>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	f24e 5244 	movw	r2, #58692	@ 0xe544
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <main+0xce>
		{
			display_clear();
 800274a:	f7ff fc97 	bl	800207c <display_clear>
		}
		if (pc == 0xe5cd)
 800274e:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <main+0x168>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f24e 52cd 	movw	r2, #58829	@ 0xe5cd
 8002756:	4293      	cmp	r3, r2
 8002758:	d12a      	bne.n	80027b0 <main+0x130>
		{
			// siehe 0xEB35
			uint8_t kb_index = (uint8_t)mem_read(0xc6);
 800275a:	20c6      	movs	r0, #198	@ 0xc6
 800275c:	f7ff fcb0 	bl	80020c0 <mem_read>
 8002760:	4603      	mov	r3, r0
 8002762:	70fb      	strb	r3, [r7, #3]
			if (kb_index < (uint8_t)mem_read(0x0289))
 8002764:	f240 2089 	movw	r0, #649	@ 0x289
 8002768:	f7ff fcaa 	bl	80020c0 <mem_read>
 800276c:	4603      	mov	r3, r0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	429a      	cmp	r2, r3
 8002774:	d21c      	bcs.n	80027b0 <main+0x130>
			{
				int c = 0; // getchar();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
				if (c > 0)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	dd17      	ble.n	80027b0 <main+0x130>
				{
					if (c == '\n')
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b0a      	cmp	r3, #10
 8002784:	d101      	bne.n	800278a <main+0x10a>
						c = '\r';
 8002786:	230d      	movs	r3, #13
 8002788:	607b      	str	r3, [r7, #4]
					mem_write(0x0277 + kb_index, c);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f203 2377 	addw	r3, r3, #631	@ 0x277
 8002792:	b29b      	uxth	r3, r3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	b252      	sxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fd70 	bl	8002280 <mem_write>
					mem_write(0xc6, kb_index + 1);
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	20c6      	movs	r0, #198	@ 0xc6
 80027ac:	f7ff fd68 	bl	8002280 <mem_write>
				}
			}
		}
		if (pc == 0xe716)
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <main+0x168>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f24e 7216 	movw	r2, #59158	@ 0xe716
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <main+0x14e>
		{
			if (a == '\r')
 80027bc:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <main+0x16c>)
 80027be:	f993 3000 	ldrsb.w	r3, [r3]
 80027c2:	2b0d      	cmp	r3, #13
 80027c4:	d003      	beq.n	80027ce <main+0x14e>
				; // putchar('\n');
			else if (a == 0x1d)
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <main+0x16c>)
 80027c8:	f993 3000 	ldrsb.w	r3, [r3]
 80027cc:	2b1d      	cmp	r3, #29
			else if ((uint8_t)a != 0x93)
				; // putchar(a);
		}
		// if (!gpio_get_level(42))
		// nmi();
		exec_ins();
 80027ce:	f7fe fe25 	bl	800141c <exec_ins>
		if (c64_irq)
 80027d2:	e7ab      	b.n	800272c <main+0xac>
 80027d4:	20007c3c 	.word	0x20007c3c
 80027d8:	20007a74 	.word	0x20007a74
 80027dc:	20007b1c 	.word	0x20007b1c
 80027e0:	200000f4 	.word	0x200000f4
 80027e4:	20015718 	.word	0x20015718
 80027e8:	2000111e 	.word	0x2000111e
 80027ec:	20001120 	.word	0x20001120

080027f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b096      	sub	sp, #88	@ 0x58
 80027f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	2244      	movs	r2, #68	@ 0x44
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 f8d3 	bl	80079aa <memset>
		0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8002804:	463b      	mov	r3, r7
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
		0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002812:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002816:	f001 ffab 	bl	8004770 <HAL_PWREx_ControlVoltageScaling>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8002820:	f000 fabe 	bl	8002da0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002824:	2302      	movs	r3, #2
 8002826:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800282c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282e:	2310      	movs	r3, #16
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002832:	2302      	movs	r3, #2
 8002834:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002836:	2302      	movs	r3, #2
 8002838:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800283a:	2301      	movs	r3, #1
 800283c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800283e:	230a      	movs	r3, #10
 8002840:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002842:	2307      	movs	r3, #7
 8002844:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002846:	2302      	movs	r3, #2
 8002848:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800284a:	2302      	movs	r3, #2
 800284c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4618      	mov	r0, r3
 8002854:	f001 ffe2 	bl	800481c <HAL_RCC_OscConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800285e:	f000 fa9f 	bl	8002da0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002862:	230f      	movs	r3, #15
 8002864:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002866:	2303      	movs	r3, #3
 8002868:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002876:	463b      	mov	r3, r7
 8002878:	2104      	movs	r1, #4
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fbaa 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8002886:	f000 fa8b 	bl	8002da0 <Error_Handler>
	}
}
 800288a:	bf00      	nop
 800288c:	3758      	adds	r7, #88	@ 0x58
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	@ 0x28
 8002898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2224      	movs	r2, #36	@ 0x24
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f005 f882 	bl	80079aa <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <MX_DAC1_Init+0x5c>)
 80028a8:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <MX_DAC1_Init+0x60>)
 80028aa:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80028ac:	4810      	ldr	r0, [pc, #64]	@ (80028f0 <MX_DAC1_Init+0x5c>)
 80028ae:	f001 f87e 	bl	80039ae <HAL_DAC_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 80028b8:	f000 fa72 	bl	8002da0 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80028c0:	232c      	movs	r3, #44	@ 0x2c
 80028c2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80028c4:	2302      	movs	r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	4619      	mov	r1, r3
 80028d6:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <MX_DAC1_Init+0x5c>)
 80028d8:	f001 f9c6 	bl	8003c68 <HAL_DAC_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 80028e2:	f000 fa5d 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	@ 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20007a74 	.word	0x20007a74
 80028f4:	40007400 	.word	0x40007400

080028f8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	@ 0x38
 80028fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 80028fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
		0 };
	TIM_OC_InitTypeDef sConfigOC = {
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	615a      	str	r2, [r3, #20]
 8002928:	619a      	str	r2, [r3, #24]
		0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800292a:	4b2d      	ldr	r3, [pc, #180]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800292c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002930:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002932:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1600000;
 800293e:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 8002940:	4a28      	ldr	r2, [pc, #160]	@ (80029e4 <MX_TIM2_Init+0xec>)
 8002942:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002950:	4823      	ldr	r0, [pc, #140]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 8002952:	f003 fa1f 	bl	8005d94 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 800295c:	f000 fa20 	bl	8002da0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800296a:	4619      	mov	r1, r3
 800296c:	481c      	ldr	r0, [pc, #112]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800296e:	f003 fd4d 	bl	800640c <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8002978:	f000 fa12 	bl	8002da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800297c:	4818      	ldr	r0, [pc, #96]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800297e:	f003 fac9 	bl	8005f14 <HAL_TIM_PWM_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8002988:	f000 fa0a 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 800299c:	f004 fa3e 	bl	8006e1c <HAL_TIMEx_MasterConfigSynchronization>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 80029a6:	f000 f9fb 	bl	8002da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80029aa:	2370      	movs	r3, #112	@ 0x70
 80029ac:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80029b2:	2302      	movs	r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	2200      	movs	r2, #0
 80029be:	4619      	mov	r1, r3
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 80029c2:	f003 fc0f 	bl	80061e4 <HAL_TIM_PWM_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 80029cc:	f000 f9e8 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <MX_TIM2_Init+0xe8>)
 80029d2:	f000 fd1f 	bl	8003414 <HAL_TIM_MspPostInit>

}
 80029d6:	bf00      	nop
 80029d8:	3738      	adds	r7, #56	@ 0x38
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20007ad0 	.word	0x20007ad0
 80029e4:	00186a00 	.word	0x00186a00

080029e8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
		0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a08:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <MX_TIM4_Init+0x98>)
 8002a0a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 21;
 8002a18:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a1a:	2215      	movs	r2, #21
 8002a1c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a2a:	4814      	ldr	r0, [pc, #80]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a2c:	f003 f9b2 	bl	8005d94 <HAL_TIM_Base_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8002a36:	f000 f9b3 	bl	8002da0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a48:	f003 fce0 	bl	800640c <HAL_TIM_ConfigClockSource>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8002a52:	f000 f9a5 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a56:	2320      	movs	r3, #32
 8002a58:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	@ (8002a7c <MX_TIM4_Init+0x94>)
 8002a64:	f004 f9da 	bl	8006e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8002a6e:	f000 f997 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20007b1c 	.word	0x20007b1c
 8002a80:	40000800 	.word	0x40000800

08002a84 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
		0 };

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <MX_TIM15_Init+0xa0>)
 8002aa6:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 26666 - 1;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002aaa:	f646 0229 	movw	r2, #26665	@ 0x6829
 8002aae:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 50;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002ab8:	2232      	movs	r2, #50	@ 0x32
 8002aba:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ace:	4814      	ldr	r0, [pc, #80]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002ad0:	f003 f960 	bl	8005d94 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM15_Init+0x5a>
	{
		Error_Handler();
 8002ada:	f000 f961 	bl	8002da0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002aec:	f003 fc8e 	bl	800640c <HAL_TIM_ConfigClockSource>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM15_Init+0x76>
	{
		Error_Handler();
 8002af6:	f000 f953 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002afa:	2320      	movs	r3, #32
 8002afc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	@ (8002b20 <MX_TIM15_Init+0x9c>)
 8002b08:	f004 f988 	bl	8006e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM15_Init+0x92>
	{
		Error_Handler();
 8002b12:	f000 f945 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20007b68 	.word	0x20007b68
 8002b24:	40014000 	.word	0x40014000

08002b28 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b2e:	4a15      	ldr	r2, [pc, #84]	@ (8002b84 <MX_USART2_UART_Init+0x5c>)
 8002b30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002b32:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b4e:	220c      	movs	r2, #12
 8002b50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <MX_USART2_UART_Init+0x58>)
 8002b6c:	f004 f9fc 	bl	8006f68 <HAL_UART_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8002b76:	f000 f913 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20007bb4 	.word	0x20007bb4
 8002b84:	40004400 	.word	0x40004400

08002b88 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <MX_DMA_Init+0x38>)
 8002b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b92:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <MX_DMA_Init+0x38>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <MX_DMA_Init+0x38>)
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	200d      	movs	r0, #13
 8002bac:	f000 fec9 	bl	8003942 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002bb0:	200d      	movs	r0, #13
 8002bb2:	f000 fee2 	bl	800397a <HAL_NVIC_EnableIRQ>

}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]
		0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	4b2b      	ldr	r3, [pc, #172]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	4a2a      	ldr	r2, [pc, #168]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be6:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	4a24      	ldr	r2, [pc, #144]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfe:	4b22      	ldr	r3, [pc, #136]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2e:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <MX_GPIO_Init+0xc4>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c42:	f001 fd6f 	bl	8004724 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480b      	ldr	r0, [pc, #44]	@ (8002c8c <MX_GPIO_Init+0xc8>)
 8002c5e:	f001 fbb7 	bl	80043d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002c62:	2320      	movs	r3, #32
 8002c64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c7c:	f001 fba8 	bl	80043d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002c80:	bf00      	nop
 8002c82:	3728      	adds	r7, #40	@ 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	48000800 	.word	0x48000800

08002c90 <HAL_DAC_ConvHalfCpltCallbackCh1>:
{
	HAL_UART_Transmit(&huart2, &ch, sizeof(uint8_t), 10);
}

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	PAL_IntHalfCplt(&hpal1);
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8002c9a:	f000 fab9 	bl	8003210 <PAL_IntHalfCplt>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20007c3c 	.word	0x20007c3c

08002cac <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	PAL_IntCplt(&hpal1);
 8002cb4:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8002cb6:	f000 fab7 	bl	8003228 <PAL_IntCplt>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20007c3c 	.word	0x20007c3c

08002cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a05      	ldr	r2, [pc, #20]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d102      	bne.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		c64_irq = 1;
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	20015718 	.word	0x20015718

08002cf4 <display_set_pixel>:
{
	HAL_GPIO_WritePin(cia_gpio_ports[pin], cia_gpio_pins[pin], state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void display_set_pixel(uint16_t x, uint16_t y, bool state)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	80bb      	strh	r3, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	70fb      	strb	r3, [r7, #3]
	// centering
	x += 27;
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	331b      	adds	r3, #27
 8002d0a:	80fb      	strh	r3, [r7, #6]
	y += 45;
 8002d0c:	88bb      	ldrh	r3, [r7, #4]
 8002d0e:	332d      	adds	r3, #45	@ 0x2d
 8002d10:	80bb      	strh	r3, [r7, #4]
	// neccessary sacrifices
	x /= 2;
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	80fb      	strh	r3, [r7, #6]
	y += 4;
 8002d18:	88bb      	ldrh	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	80bb      	strh	r3, [r7, #4]
	if (x < PAL_FRAME_LINE_LEN && y < PAL_FRAME_LINE_COUNT)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d22:	d835      	bhi.n	8002d90 <display_set_pixel+0x9c>
 8002d24:	88bb      	ldrh	r3, [r7, #4]
 8002d26:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8002d2a:	d831      	bhi.n	8002d90 <display_set_pixel+0x9c>
	{
		if (state)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <display_set_pixel+0x6c>
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = x % 2 == 0 ? PAL_WHITE : (PAL_WHITE - 10);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <display_set_pixel+0x4e>
 8002d3e:	214d      	movs	r1, #77	@ 0x4d
 8002d40:	e000      	b.n	8002d44 <display_set_pixel+0x50>
 8002d42:	2143      	movs	r1, #67	@ 0x43
 8002d44:	88ba      	ldrh	r2, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	441a      	add	r2, r3
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <display_set_pixel+0xa8>)
 8002d56:	4413      	add	r3, r2
 8002d58:	460a      	mov	r2, r1
 8002d5a:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
		else
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = ((x + y) % 2 == 0) ? PAL_BLACK : (PAL_BLACK + 10);
		}
	}
}
 8002d5e:	e017      	b.n	8002d90 <display_set_pixel+0x9c>
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = ((x + y) % 2 == 0) ? PAL_BLACK : (PAL_BLACK + 10);
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <display_set_pixel+0x80>
 8002d70:	2117      	movs	r1, #23
 8002d72:	e000      	b.n	8002d76 <display_set_pixel+0x82>
 8002d74:	2121      	movs	r1, #33	@ 0x21
 8002d76:	88ba      	ldrh	r2, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	441a      	add	r2, r3
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4413      	add	r3, r2
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <display_set_pixel+0xa8>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	20007c3c 	.word	0x20007c3c

08002da0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <Error_Handler+0x8>

08002dac <PAL_Init>:
void PAL_CopyBuffer(PAL_t *hpal, uint32_t n, uint8_t second);
void PAL_CopyLine(PAL_t *hpal, uint32_t n, uint8_t second);
void PAL_SetBuffer(PAL_t *hpal, uint8_t second);

void PAL_Init(PAL_t *hpal)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	@ 0x38
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < sizeof(hpal->dma_buffer); i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db8:	e008      	b.n	8002dcc <PAL_Init+0x20>
	{
		hpal->dma_buffer[i] = PAL_ZERO;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3310      	adds	r3, #16
 8002dc2:	2217      	movs	r2, #23
 8002dc4:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(hpal->dma_buffer); i++)
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	3301      	adds	r3, #1
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	2be8      	cmp	r3, #232	@ 0xe8
 8002dd0:	d9f3      	bls.n	8002dba <PAL_Init+0xe>
	}
	for (uint32_t i = 0; i < sizeof(pal_line_buffers); i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd6:	e007      	b.n	8002de8 <PAL_Init+0x3c>
	{
		pal_line_buffers[i] = PAL_ZERO;
 8002dd8:	4a79      	ldr	r2, [pc, #484]	@ (8002fc0 <PAL_Init+0x214>)
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	4413      	add	r3, r2
 8002dde:	2217      	movs	r2, #23
 8002de0:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(pal_line_buffers); i++)
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	3301      	adds	r3, #1
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	f240 428c 	movw	r2, #1164	@ 0x48c
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d9f2      	bls.n	8002dd8 <PAL_Init+0x2c>
	}

	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df6:	e01a      	b.n	8002e2e <PAL_Init+0x82>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	4a72      	ldr	r2, [pc, #456]	@ (8002fc4 <PAL_Init+0x218>)
 8002dfc:	fba2 1203 	umull	r1, r2, r2, r3
 8002e00:	1a99      	subs	r1, r3, r2
 8002e02:	0849      	lsrs	r1, r1, #1
 8002e04:	440a      	add	r2, r1
 8002e06:	0992      	lsrs	r2, r2, #6
 8002e08:	2175      	movs	r1, #117	@ 0x75
 8002e0a:	fb01 f202 	mul.w	r2, r1, r2
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
		pal_line_buffers[i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b63      	cmp	r3, #99	@ 0x63
 8002e16:	d801      	bhi.n	8002e1c <PAL_Init+0x70>
 8002e18:	2100      	movs	r1, #0
 8002e1a:	e000      	b.n	8002e1e <PAL_Init+0x72>
 8002e1c:	2117      	movs	r1, #23
 8002e1e:	4a68      	ldr	r2, [pc, #416]	@ (8002fc0 <PAL_Init+0x214>)
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	4413      	add	r3, r2
 8002e24:	460a      	mov	r2, r1
 8002e26:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2be8      	cmp	r3, #232	@ 0xe8
 8002e32:	d9e1      	bls.n	8002df8 <PAL_Init+0x4c>
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e38:	e027      	b.n	8002e8a <PAL_Init+0xde>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 8002e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3c:	4a61      	ldr	r2, [pc, #388]	@ (8002fc4 <PAL_Init+0x218>)
 8002e3e:	fba2 1203 	umull	r1, r2, r2, r3
 8002e42:	1a99      	subs	r1, r3, r2
 8002e44:	0849      	lsrs	r1, r1, #1
 8002e46:	440a      	add	r2, r1
 8002e48:	0992      	lsrs	r2, r2, #6
 8002e4a:	2175      	movs	r1, #117	@ 0x75
 8002e4c:	fb01 f202 	mul.w	r2, r1, r2
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
		if (i < (PAL_LINE_LEN + 1) / 2)
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	2b74      	cmp	r3, #116	@ 0x74
 8002e58:	d80a      	bhi.n	8002e70 <PAL_Init+0xc4>
		{
			pal_line_buffers[1 * PAL_LINE_LEN + i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b63      	cmp	r3, #99	@ 0x63
 8002e5e:	d801      	bhi.n	8002e64 <PAL_Init+0xb8>
 8002e60:	2100      	movs	r1, #0
 8002e62:	e000      	b.n	8002e66 <PAL_Init+0xba>
 8002e64:	2117      	movs	r1, #23
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	33e9      	adds	r3, #233	@ 0xe9
 8002e6a:	4a55      	ldr	r2, [pc, #340]	@ (8002fc0 <PAL_Init+0x214>)
 8002e6c:	54d1      	strb	r1, [r2, r3]
 8002e6e:	e009      	b.n	8002e84 <PAL_Init+0xd8>
		}
		else
		{
			pal_line_buffers[1 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d801      	bhi.n	8002e7a <PAL_Init+0xce>
 8002e76:	2100      	movs	r1, #0
 8002e78:	e000      	b.n	8002e7c <PAL_Init+0xd0>
 8002e7a:	2117      	movs	r1, #23
 8002e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7e:	33e9      	adds	r3, #233	@ 0xe9
 8002e80:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc0 <PAL_Init+0x214>)
 8002e82:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	3301      	adds	r3, #1
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	2be8      	cmp	r3, #232	@ 0xe8
 8002e8e:	d9d4      	bls.n	8002e3a <PAL_Init+0x8e>
		}
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e94:	e01a      	b.n	8002ecc <PAL_Init+0x120>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <PAL_Init+0x218>)
 8002e9a:	fba2 1203 	umull	r1, r2, r2, r3
 8002e9e:	1a99      	subs	r1, r3, r2
 8002ea0:	0849      	lsrs	r1, r1, #1
 8002ea2:	440a      	add	r2, r1
 8002ea4:	0992      	lsrs	r2, r2, #6
 8002ea6:	2175      	movs	r1, #117	@ 0x75
 8002ea8:	fb01 f202 	mul.w	r2, r1, r2
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
		pal_line_buffers[2 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d801      	bhi.n	8002eba <PAL_Init+0x10e>
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	e000      	b.n	8002ebc <PAL_Init+0x110>
 8002eba:	2117      	movs	r1, #23
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	f503 73e9 	add.w	r3, r3, #466	@ 0x1d2
 8002ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc0 <PAL_Init+0x214>)
 8002ec4:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	2be8      	cmp	r3, #232	@ 0xe8
 8002ed0:	d9e1      	bls.n	8002e96 <PAL_Init+0xea>
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	e029      	b.n	8002f2c <PAL_Init+0x180>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc4 <PAL_Init+0x218>)
 8002edc:	fba2 1203 	umull	r1, r2, r2, r3
 8002ee0:	1a99      	subs	r1, r3, r2
 8002ee2:	0849      	lsrs	r1, r1, #1
 8002ee4:	440a      	add	r2, r1
 8002ee6:	0992      	lsrs	r2, r2, #6
 8002ee8:	2175      	movs	r1, #117	@ 0x75
 8002eea:	fb01 f202 	mul.w	r2, r1, r2
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
		if (i < (PAL_LINE_LEN + 1) / 2)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2b74      	cmp	r3, #116	@ 0x74
 8002ef6:	d80b      	bhi.n	8002f10 <PAL_Init+0x164>
		{
			pal_line_buffers[3 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	d801      	bhi.n	8002f02 <PAL_Init+0x156>
 8002efe:	2100      	movs	r1, #0
 8002f00:	e000      	b.n	8002f04 <PAL_Init+0x158>
 8002f02:	2117      	movs	r1, #23
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f203 23bb 	addw	r3, r3, #699	@ 0x2bb
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc0 <PAL_Init+0x214>)
 8002f0c:	54d1      	strb	r1, [r2, r3]
 8002f0e:	e00a      	b.n	8002f26 <PAL_Init+0x17a>
		}
		else
		{
			pal_line_buffers[3 * PAL_LINE_LEN + i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b63      	cmp	r3, #99	@ 0x63
 8002f14:	d801      	bhi.n	8002f1a <PAL_Init+0x16e>
 8002f16:	2100      	movs	r1, #0
 8002f18:	e000      	b.n	8002f1c <PAL_Init+0x170>
 8002f1a:	2117      	movs	r1, #23
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f203 23bb 	addw	r3, r3, #699	@ 0x2bb
 8002f22:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <PAL_Init+0x214>)
 8002f24:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	2be8      	cmp	r3, #232	@ 0xe8
 8002f30:	d9d2      	bls.n	8002ed8 <PAL_Init+0x12c>
		}
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e030      	b.n	8002f9a <PAL_Init+0x1ee>
	{
		if (i < PAL_LINE_SYNC)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d806      	bhi.n	8002f4c <PAL_Init+0x1a0>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_OFF;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002f44:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <PAL_Init+0x214>)
 8002f46:	2100      	movs	r1, #0
 8002f48:	54d1      	strb	r1, [r2, r3]
 8002f4a:	e023      	b.n	8002f94 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_SYNC + PAL_BACK_PORCH)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b28      	cmp	r3, #40	@ 0x28
 8002f50:	d806      	bhi.n	8002f60 <PAL_Init+0x1b4>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002f58:	4a19      	ldr	r2, [pc, #100]	@ (8002fc0 <PAL_Init+0x214>)
 8002f5a:	2117      	movs	r1, #23
 8002f5c:	54d1      	strb	r1, [r2, r3]
 8002f5e:	e019      	b.n	8002f94 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_LEN - PAL_ONE_US - PAL_FRONT_PORCH)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2be2      	cmp	r3, #226	@ 0xe2
 8002f64:	d806      	bhi.n	8002f74 <PAL_Init+0x1c8>
		{
			// frame area
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <PAL_Init+0x214>)
 8002f6e:	2117      	movs	r1, #23
 8002f70:	54d1      	strb	r1, [r2, r3]
 8002f72:	e00f      	b.n	8002f94 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_LEN - PAL_FRONT_PORCH)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2be2      	cmp	r3, #226	@ 0xe2
 8002f78:	d806      	bhi.n	8002f88 <PAL_Init+0x1dc>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO; // PAL_BLACK
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002f80:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc0 <PAL_Init+0x214>)
 8002f82:	2117      	movs	r1, #23
 8002f84:	54d1      	strb	r1, [r2, r3]
 8002f86:	e005      	b.n	8002f94 <PAL_Init+0x1e8>
		}
		else
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <PAL_Init+0x214>)
 8002f90:	2117      	movs	r1, #23
 8002f92:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2be8      	cmp	r3, #232	@ 0xe8
 8002f9e:	d9cb      	bls.n	8002f38 <PAL_Init+0x18c>
		}
	}

	hpal->line_counter = PAL_LINE_COUNT - 1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002fa6:	60da      	str	r2, [r3, #12]
	PAL_SetBuffer(hpal, 0);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f888 	bl	80030c0 <PAL_SetBuffer>
	PAL_SetBuffer(hpal, 1);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f884 	bl	80030c0 <PAL_SetBuffer>
}
 8002fb8:	bf00      	nop
 8002fba:	3738      	adds	r7, #56	@ 0x38
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	2001571c 	.word	0x2001571c
 8002fc4:	18118119 	.word	0x18118119

08002fc8 <PAL_Start>:

void PAL_Start(PAL_t *hpal)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hpal->hdac, hpal->dac_channel, (uint32_t*)hpal->dma_buffer, PAL_LINE_LEN, DAC_ALIGN_8B_R);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 0210 	add.w	r2, r3, #16
 8002fde:	2308      	movs	r3, #8
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	23e9      	movs	r3, #233	@ 0xe9
 8002fe4:	f000 fd06 	bl	80039f4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(hpal->htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 ff29 	bl	8005e44 <HAL_TIM_Base_Start>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <PAL_CopyBuffer>:

void PAL_CopyBuffer(PAL_t *hpal, uint32_t n, uint8_t second)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	71fb      	strb	r3, [r7, #7]
	if (second)
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00f      	beq.n	8003030 <PAL_CopyBuffer+0x34>
	{
		memcpy(hpal->dma_buffer + PAL_BUFFER_LEN1, pal_line_buffers + PAL_LINE_LEN * n + PAL_BUFFER_LEN1, PAL_BUFFER_LEN2);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3310      	adds	r3, #16
 8003014:	f103 0074 	add.w	r0, r3, #116	@ 0x74
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	22e9      	movs	r2, #233	@ 0xe9
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	3374      	adds	r3, #116	@ 0x74
 8003022:	4a0c      	ldr	r2, [pc, #48]	@ (8003054 <PAL_CopyBuffer+0x58>)
 8003024:	4413      	add	r3, r2
 8003026:	2275      	movs	r2, #117	@ 0x75
 8003028:	4619      	mov	r1, r3
 800302a:	f004 fceb 	bl	8007a04 <memcpy>
	}
	else
	{
		memcpy(hpal->dma_buffer, pal_line_buffers + PAL_LINE_LEN * n, PAL_BUFFER_LEN1);
	}
}
 800302e:	e00c      	b.n	800304a <PAL_CopyBuffer+0x4e>
		memcpy(hpal->dma_buffer, pal_line_buffers + PAL_LINE_LEN * n, PAL_BUFFER_LEN1);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f103 0010 	add.w	r0, r3, #16
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	22e9      	movs	r2, #233	@ 0xe9
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a05      	ldr	r2, [pc, #20]	@ (8003054 <PAL_CopyBuffer+0x58>)
 8003040:	4413      	add	r3, r2
 8003042:	2274      	movs	r2, #116	@ 0x74
 8003044:	4619      	mov	r1, r3
 8003046:	f004 fcdd 	bl	8007a04 <memcpy>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2001571c 	.word	0x2001571c

08003058 <PAL_CopyLine>:

void PAL_CopyLine(PAL_t *hpal, uint32_t n, uint8_t second)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	71fb      	strb	r3, [r7, #7]
	if (second)
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <PAL_CopyLine+0x3c>
	{
		memcpy(hpal->dma_buffer + PAL_LINE_OFF2, hpal->frame_buffer + PAL_FRAME_LINE_LEN * n + PAL_LINE_LEN1, PAL_LINE_LEN2);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3310      	adds	r3, #16
 8003070:	f103 0074 	add.w	r0, r3, #116	@ 0x74
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	019b      	lsls	r3, r3, #6
 8003084:	4413      	add	r3, r2
 8003086:	334b      	adds	r3, #75	@ 0x4b
 8003088:	440b      	add	r3, r1
 800308a:	226f      	movs	r2, #111	@ 0x6f
 800308c:	4619      	mov	r1, r3
 800308e:	f004 fcb9 	bl	8007a04 <memcpy>
	}
	else
	{
		memcpy(hpal->dma_buffer + PAL_LINE_OFF1, hpal->frame_buffer + PAL_FRAME_LINE_LEN * n, PAL_LINE_LEN1);
	}
}
 8003092:	e011      	b.n	80030b8 <PAL_CopyLine+0x60>
		memcpy(hpal->dma_buffer + PAL_LINE_OFF1, hpal->frame_buffer + PAL_FRAME_LINE_LEN * n, PAL_LINE_LEN1);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3310      	adds	r3, #16
 8003098:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	4413      	add	r3, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	224b      	movs	r2, #75	@ 0x4b
 80030b2:	4619      	mov	r1, r3
 80030b4:	f004 fca6 	bl	8007a04 <memcpy>
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <PAL_SetBuffer>:

void PAL_SetBuffer(PAL_t *hpal, uint8_t second)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
	// 1 ls
	// 2 ss
	// 3 sl
	// 4 sync

	uint32_t line = (hpal->line_counter + 1) % PAL_LINE_COUNT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <PAL_SetBuffer+0x14c>)
 80030d4:	fba2 1203 	umull	r1, r2, r2, r3
 80030d8:	0a52      	lsrs	r2, r2, #9
 80030da:	f240 2171 	movw	r1, #625	@ 0x271
 80030de:	fb01 f202 	mul.w	r2, r1, r2
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
	if (line == 0)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <PAL_SetBuffer+0x3a>
	{
		PAL_CopyBuffer(hpal, 0, second);
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	461a      	mov	r2, r3
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ff82 	bl	8002ffc <PAL_CopyBuffer>
	}
	else if (line == 622)
	{
		PAL_CopyBuffer(hpal, 2, second);
	}
}
 80030f8:	e084      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 2)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d106      	bne.n	800310e <PAL_SetBuffer+0x4e>
		PAL_CopyBuffer(hpal, 1, second);
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	461a      	mov	r2, r3
 8003104:	2101      	movs	r1, #1
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ff78 	bl	8002ffc <PAL_CopyBuffer>
}
 800310c:	e07a      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 3)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d106      	bne.n	8003122 <PAL_SetBuffer+0x62>
		PAL_CopyBuffer(hpal, 2, second);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	461a      	mov	r2, r3
 8003118:	2102      	movs	r1, #2
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff6e 	bl	8002ffc <PAL_CopyBuffer>
}
 8003120:	e070      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 5)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d106      	bne.n	8003136 <PAL_SetBuffer+0x76>
		PAL_CopyBuffer(hpal, 4, second);
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	461a      	mov	r2, r3
 800312c:	2104      	movs	r1, #4
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff64 	bl	8002ffc <PAL_CopyBuffer>
}
 8003134:	e066      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line >= 5 + PAL_BLANKING_LINES && line < 310)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b14      	cmp	r3, #20
 800313a:	d90b      	bls.n	8003154 <PAL_SetBuffer+0x94>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003142:	d207      	bcs.n	8003154 <PAL_SetBuffer+0x94>
		PAL_CopyLine(hpal, line - 22, second);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3b16      	subs	r3, #22
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff83 	bl	8003058 <PAL_CopyLine>
 8003152:	e057      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 310)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800315a:	d106      	bne.n	800316a <PAL_SetBuffer+0xaa>
		PAL_CopyBuffer(hpal, 2, second);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	461a      	mov	r2, r3
 8003160:	2102      	movs	r1, #2
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff4a 	bl	8002ffc <PAL_CopyBuffer>
}
 8003168:	e04c      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 312)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003170:	d106      	bne.n	8003180 <PAL_SetBuffer+0xc0>
		PAL_CopyBuffer(hpal, 3, second);
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	461a      	mov	r2, r3
 8003176:	2103      	movs	r1, #3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff3f 	bl	8002ffc <PAL_CopyBuffer>
}
 800317e:	e041      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 313)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f240 1239 	movw	r2, #313	@ 0x139
 8003186:	4293      	cmp	r3, r2
 8003188:	d106      	bne.n	8003198 <PAL_SetBuffer+0xd8>
		PAL_CopyBuffer(hpal, 0, second);
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	461a      	mov	r2, r3
 800318e:	2100      	movs	r1, #0
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff33 	bl	8002ffc <PAL_CopyBuffer>
}
 8003196:	e035      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 315)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f240 123b 	movw	r2, #315	@ 0x13b
 800319e:	4293      	cmp	r3, r2
 80031a0:	d106      	bne.n	80031b0 <PAL_SetBuffer+0xf0>
		PAL_CopyBuffer(hpal, 2, second);
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	461a      	mov	r2, r3
 80031a6:	2102      	movs	r1, #2
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff27 	bl	8002ffc <PAL_CopyBuffer>
}
 80031ae:	e029      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 317)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f240 123d 	movw	r2, #317	@ 0x13d
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d106      	bne.n	80031c8 <PAL_SetBuffer+0x108>
		PAL_CopyBuffer(hpal, 4, second);
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	461a      	mov	r2, r3
 80031be:	2104      	movs	r1, #4
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff1b 	bl	8002ffc <PAL_CopyBuffer>
}
 80031c6:	e01d      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line >= 317 + PAL_BLANKING_LINES && line < 622)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 80031ce:	d90d      	bls.n	80031ec <PAL_SetBuffer+0x12c>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f240 226d 	movw	r2, #621	@ 0x26d
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d808      	bhi.n	80031ec <PAL_SetBuffer+0x12c>
		PAL_CopyLine(hpal, line - 334, second);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f5a3 73a7 	sub.w	r3, r3, #334	@ 0x14e
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff37 	bl	8003058 <PAL_CopyLine>
 80031ea:	e00b      	b.n	8003204 <PAL_SetBuffer+0x144>
	else if (line == 622)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f240 226e 	movw	r2, #622	@ 0x26e
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d106      	bne.n	8003204 <PAL_SetBuffer+0x144>
		PAL_CopyBuffer(hpal, 2, second);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	461a      	mov	r2, r3
 80031fa:	2102      	movs	r1, #2
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fefd 	bl	8002ffc <PAL_CopyBuffer>
}
 8003202:	e7ff      	b.n	8003204 <PAL_SetBuffer+0x144>
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	d1b71759 	.word	0xd1b71759

08003210 <PAL_IntHalfCplt>:

void PAL_IntHalfCplt(PAL_t *hpal)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	PAL_SetBuffer(hpal, 0);
 8003218:	2100      	movs	r1, #0
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff50 	bl	80030c0 <PAL_SetBuffer>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <PAL_IntCplt>:

void PAL_IntCplt(PAL_t *hpal)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	PAL_SetBuffer(hpal, 1);
 8003230:	2101      	movs	r1, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff44 	bl	80030c0 <PAL_SetBuffer>
	hpal->line_counter++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <HAL_MspInit+0x44>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	4a0e      	ldr	r2, [pc, #56]	@ (8003290 <HAL_MspInit+0x44>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6613      	str	r3, [r2, #96]	@ 0x60
 800325e:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <HAL_MspInit+0x44>)
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_MspInit+0x44>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	4a08      	ldr	r2, [pc, #32]	@ (8003290 <HAL_MspInit+0x44>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	@ 0x58
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_MspInit+0x44>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	@ 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2e      	ldr	r2, [pc, #184]	@ (800336c <HAL_DAC_MspInit+0xd8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d155      	bne.n	8003362 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80032b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032da:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_DAC_MspInit+0xdc>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032e6:	2310      	movs	r3, #16
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ea:	2303      	movs	r3, #3
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4619      	mov	r1, r3
 80032f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fc:	f001 f868 	bl	80043d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003300:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003302:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <HAL_DAC_MspInit+0xe4>)
 8003304:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003308:	2206      	movs	r2, #6
 800330a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 800330e:	2210      	movs	r2, #16
 8003310:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003312:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003318:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003320:	2200      	movs	r2, #0
 8003322:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800332a:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 800332c:	2220      	movs	r2, #32
 800332e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003330:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003336:	480f      	ldr	r0, [pc, #60]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 8003338:	f000 fe52 	bl	8003fe0 <HAL_DMA_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8003342:	f7ff fd2d 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <HAL_DAC_MspInit+0xe0>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	2036      	movs	r0, #54	@ 0x36
 8003358:	f000 faf3 	bl	8003942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800335c:	2036      	movs	r0, #54	@ 0x36
 800335e:	f000 fb0c 	bl	800397a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	@ 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40007400 	.word	0x40007400
 8003370:	40021000 	.word	0x40021000
 8003374:	20007a88 	.word	0x20007a88
 8003378:	40020030 	.word	0x40020030

0800337c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d10c      	bne.n	80033a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6593      	str	r3, [r2, #88]	@ 0x58
 800339a:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80033a6:	e02a      	b.n	80033fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a17      	ldr	r2, [pc, #92]	@ (800340c <HAL_TIM_Base_MspInit+0x90>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10c      	bne.n	80033cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033b8:	f043 0304 	orr.w	r3, r3, #4
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033be:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
}
 80033ca:	e018      	b.n	80033fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003410 <HAL_TIM_Base_MspInit+0x94>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80033d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	4a0b      	ldr	r2, [pc, #44]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_TIM_Base_MspInit+0x8c>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2018      	movs	r0, #24
 80033f4:	f000 faa5 	bl	8003942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80033f8:	2018      	movs	r0, #24
 80033fa:	f000 fabe 	bl	800397a <HAL_NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40000800 	.word	0x40000800
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003434:	d11d      	bne.n	8003472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	4b11      	ldr	r3, [pc, #68]	@ (800347c <HAL_TIM_MspPostInit+0x68>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	4a10      	ldr	r2, [pc, #64]	@ (800347c <HAL_TIM_MspPostInit+0x68>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <HAL_TIM_MspPostInit+0x68>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800344e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003460:	2301      	movs	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800346e:	f000 ffaf 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003472:	bf00      	nop
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b0ac      	sub	sp, #176	@ 0xb0
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2288      	movs	r2, #136	@ 0x88
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 fa82 	bl	80079aa <memset>
  if(huart->Instance==USART2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a21      	ldr	r2, [pc, #132]	@ (8003530 <HAL_UART_MspInit+0xb0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d13b      	bne.n	8003528 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034b0:	2302      	movs	r3, #2
 80034b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034b4:	2300      	movs	r3, #0
 80034b6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 ffad 	bl	800541c <HAL_RCCEx_PeriphCLKConfig>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034c8:	f7ff fc6a 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d0:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d8:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e8:	4a12      	ldr	r2, [pc, #72]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f0:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <HAL_UART_MspInit+0xb4>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034fc:	230c      	movs	r3, #12
 80034fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350e:	2303      	movs	r3, #3
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003514:	2307      	movs	r3, #7
 8003516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800351e:	4619      	mov	r1, r3
 8003520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003524:	f000 ff54 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003528:	bf00      	nop
 800352a:	37b0      	adds	r7, #176	@ 0xb0
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40004400 	.word	0x40004400
 8003534:	40021000 	.word	0x40021000

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <NMI_Handler+0x4>

08003540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <HardFault_Handler+0x4>

08003548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <MemManage_Handler+0x4>

08003550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <BusFault_Handler+0x4>

08003558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <UsageFault_Handler+0x4>

08003560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358e:	f000 f8b9 	bl	8003704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800359c:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <DMA1_Channel3_IRQHandler+0x10>)
 800359e:	f000 fe37 	bl	8004210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20007a88 	.word	0x20007a88

080035ac <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80035b0:	4802      	ldr	r0, [pc, #8]	@ (80035bc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80035b2:	f002 fd10 	bl	8005fd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20007b68 	.word	0x20007b68

080035c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80035c4:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <TIM6_DAC_IRQHandler+0x10>)
 80035c6:	f000 fae1 	bl	8003b8c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20007a74 	.word	0x20007a74

080035d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <SystemInit+0x20>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <SystemInit+0x20>)
 80035e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035fc:	f7ff ffea 	bl	80035d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003600:	480c      	ldr	r0, [pc, #48]	@ (8003634 <LoopForever+0x6>)
  ldr r1, =_edata
 8003602:	490d      	ldr	r1, [pc, #52]	@ (8003638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <LoopForever+0xe>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003618:	4c0a      	ldr	r4, [pc, #40]	@ (8003644 <LoopForever+0x16>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003626:	f004 f9c9 	bl	80079bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800362a:	f7ff f829 	bl	8002680 <main>

0800362e <LoopForever>:

LoopForever:
    b LoopForever
 800362e:	e7fe      	b.n	800362e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003630:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003638:	20001100 	.word	0x20001100
  ldr r2, =_sidata
 800363c:	0800ca90 	.word	0x0800ca90
  ldr r2, =_sbss
 8003640:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8003644:	20015bb0 	.word	0x20015bb0

08003648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <ADC1_2_IRQHandler>
	...

0800364c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003656:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_Init+0x3c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <HAL_Init+0x3c>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003660:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003662:	2003      	movs	r0, #3
 8003664:	f000 f962 	bl	800392c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003668:	2000      	movs	r0, #0
 800366a:	f000 f80f 	bl	800368c <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	71fb      	strb	r3, [r7, #7]
 8003678:	e001      	b.n	800367e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800367a:	f7ff fde7 	bl	800324c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800367e:	79fb      	ldrb	r3, [r7, #7]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40022000 	.word	0x40022000

0800368c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003698:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <HAL_InitTick+0x6c>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036a0:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_InitTick+0x70>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <HAL_InitTick+0x6c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f96d 	bl	8003996 <HAL_SYSTICK_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d809      	bhi.n	80036dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c8:	2200      	movs	r2, #0
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f000 f937 	bl	8003942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <HAL_InitTick+0x74>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e007      	b.n	80036ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e004      	b.n	80036ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e001      	b.n	80036ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200010fc 	.word	0x200010fc
 80036fc:	200010f4 	.word	0x200010f4
 8003700:	200010f8 	.word	0x200010f8

08003704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_IncTick+0x20>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_IncTick+0x24>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4413      	add	r3, r2
 8003714:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <HAL_IncTick+0x24>)
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200010fc 	.word	0x200010fc
 8003728:	20015bac 	.word	0x20015bac

0800372c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return uwTick;
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <HAL_GetTick+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20015bac 	.word	0x20015bac

08003744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7ff ffee 	bl	800372c <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d005      	beq.n	800376a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800375e:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_Delay+0x44>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800376a:	bf00      	nop
 800376c:	f7ff ffde 	bl	800372c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	429a      	cmp	r2, r3
 800377a:	d8f7      	bhi.n	800376c <HAL_Delay+0x28>
  {
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200010fc 	.word	0x200010fc

0800378c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a8:	4013      	ands	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037be:	4a04      	ldr	r2, [pc, #16]	@ (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	60d3      	str	r3, [r2, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <__NVIC_GetPriorityGrouping+0x18>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0307 	and.w	r3, r3, #7
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db0b      	blt.n	800381a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	4907      	ldr	r1, [pc, #28]	@ (8003828 <__NVIC_EnableIRQ+0x38>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2001      	movs	r0, #1
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	2b00      	cmp	r3, #0
 800383e:	db0a      	blt.n	8003856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	490c      	ldr	r1, [pc, #48]	@ (8003878 <__NVIC_SetPriority+0x4c>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	440b      	add	r3, r1
 8003850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003854:	e00a      	b.n	800386c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4908      	ldr	r1, [pc, #32]	@ (800387c <__NVIC_SetPriority+0x50>)
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	3b04      	subs	r3, #4
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	440b      	add	r3, r1
 800386a:	761a      	strb	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f1c3 0307 	rsb	r3, r3, #7
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf28      	it	cs
 800389e:	2304      	movcs	r3, #4
 80038a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d902      	bls.n	80038b0 <NVIC_EncodePriority+0x30>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3b03      	subs	r3, #3
 80038ae:	e000      	b.n	80038b2 <NVIC_EncodePriority+0x32>
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	401a      	ands	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	43d9      	mvns	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d8:	4313      	orrs	r3, r2
         );
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	@ 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f8:	d301      	bcc.n	80038fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00f      	b.n	800391e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <SysTick_Config+0x40>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003906:	210f      	movs	r1, #15
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	f7ff ff8e 	bl	800382c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <SysTick_Config+0x40>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003916:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <SysTick_Config+0x40>)
 8003918:	2207      	movs	r2, #7
 800391a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	e000e010 	.word	0xe000e010

0800392c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff29 	bl	800378c <__NVIC_SetPriorityGrouping>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003954:	f7ff ff3e 	bl	80037d4 <__NVIC_GetPriorityGrouping>
 8003958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff8e 	bl	8003880 <NVIC_EncodePriority>
 8003964:	4602      	mov	r2, r0
 8003966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff5d 	bl	800382c <__NVIC_SetPriority>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff31 	bl	80037f0 <__NVIC_EnableIRQ>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffa2 	bl	80038e8 <SysTick_Config>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e014      	b.n	80039ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	791b      	ldrb	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fc5f 	bl	8003294 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	795b      	ldrb	r3, [r3, #5]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_DAC_Start_DMA+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0ab      	b.n	8003b6a <HAL_DAC_Start_DMA+0x176>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d12f      	bne.n	8003a84 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	@ (8003b74 <HAL_DAC_Start_DMA+0x180>)
 8003a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a51      	ldr	r2, [pc, #324]	@ (8003b78 <HAL_DAC_Start_DMA+0x184>)
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a50      	ldr	r2, [pc, #320]	@ (8003b7c <HAL_DAC_Start_DMA+0x188>)
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d013      	beq.n	8003a7a <HAL_DAC_Start_DMA+0x86>
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d845      	bhi.n	8003ae4 <HAL_DAC_Start_DMA+0xf0>
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_DAC_Start_DMA+0x72>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d005      	beq.n	8003a70 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a64:	e03e      	b.n	8003ae4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	613b      	str	r3, [r7, #16]
        break;
 8003a6e:	e03c      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
        break;
 8003a78:	e037      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3310      	adds	r3, #16
 8003a80:	613b      	str	r3, [r7, #16]
        break;
 8003a82:	e032      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a3d      	ldr	r2, [pc, #244]	@ (8003b80 <HAL_DAC_Start_DMA+0x18c>)
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	@ (8003b84 <HAL_DAC_Start_DMA+0x190>)
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3b      	ldr	r2, [pc, #236]	@ (8003b88 <HAL_DAC_Start_DMA+0x194>)
 8003a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d013      	beq.n	8003ada <HAL_DAC_Start_DMA+0xe6>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d817      	bhi.n	8003ae8 <HAL_DAC_Start_DMA+0xf4>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_DAC_Start_DMA+0xd2>
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003ac4:	e010      	b.n	8003ae8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	613b      	str	r3, [r7, #16]
        break;
 8003ace:	e00c      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	613b      	str	r3, [r7, #16]
        break;
 8003ad8:	e007      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	331c      	adds	r3, #28
 8003ae0:	613b      	str	r3, [r7, #16]
        break;
 8003ae2:	e002      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        break;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_DAC_Start_DMA+0xf6>
        break;
 8003ae8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003afe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6898      	ldr	r0, [r3, #8]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	f000 fb21 	bl	8004150 <HAL_DMA_Start_IT>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]
 8003b12:	e010      	b.n	8003b36 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003b22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68d8      	ldr	r0, [r3, #12]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	f000 fb0f 	bl	8004150 <HAL_DMA_Start_IT>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e005      	b.n	8003b68 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08003eb7 	.word	0x08003eb7
 8003b78:	08003ed9 	.word	0x08003ed9
 8003b7c:	08003ef5 	.word	0x08003ef5
 8003b80:	08003f73 	.word	0x08003f73
 8003b84:	08003f95 	.word	0x08003f95
 8003b88:	08003fb1 	.word	0x08003fb1

08003b8c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	d120      	bne.n	8003be6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb2:	d118      	bne.n	8003be6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bde:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f837 	bl	8003c54 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf4:	d120      	bne.n	8003c38 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c04:	d118      	bne.n	8003c38 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f043 0202 	orr.w	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003c20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003c30:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f993 	bl	8003f5e <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	795b      	ldrb	r3, [r3, #5]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_DAC_ConfigChannel+0x1c>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e114      	b.n	8003eae <HAL_DAC_ConfigChannel+0x246>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	f040 8081 	bne.w	8003d9c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c9a:	f7ff fd47 	bl	800372c <HAL_GetTick>
 8003c9e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d140      	bne.n	8003d28 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ca6:	e018      	b.n	8003cda <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ca8:	f7ff fd40 	bl	800372c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d911      	bls.n	8003cda <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f043 0208 	orr.w	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0e9      	b.n	8003eae <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1df      	bne.n	8003ca8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff fd2b 	bl	8003744 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	6992      	ldr	r2, [r2, #24]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cf8:	e023      	b.n	8003d42 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003cfa:	f7ff fd17 	bl	800372c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d90f      	bls.n	8003d28 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da0a      	bge.n	8003d28 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f043 0208 	orr.w	r2, r3, #8
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2203      	movs	r2, #3
 8003d22:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0c2      	b.n	8003eae <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	dbe3      	blt.n	8003cfa <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003d32:	2001      	movs	r0, #1
 8003d34:	f7ff fd06 	bl	8003744 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	6992      	ldr	r2, [r2, #24]
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	ea02 0103 	and.w	r1, r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	21ff      	movs	r1, #255	@ 0xff
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	ea02 0103 	and.w	r1, r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d11d      	bne.n	8003de0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	221f      	movs	r2, #31
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2207      	movs	r2, #7
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6819      	ldr	r1, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	22c0      	movs	r2, #192	@ 0xc0
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7fe fef1 	bl	8002cac <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	711a      	strb	r2, [r3, #4]
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7fe fed2 	bl	8002c90 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fe96 	bl	8003c40 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	711a      	strb	r2, [r3, #4]
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ffce 	bl	8003f22 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	711a      	strb	r2, [r3, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ffc7 	bl	8003f36 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff ffbd 	bl	8003f4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	711a      	strb	r2, [r3, #4]
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e098      	b.n	8004124 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8004130 <HAL_DMA_Init+0x150>)
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d80f      	bhi.n	800401e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_DMA_Init+0x154>)
 8004006:	4413      	add	r3, r2
 8004008:	4a4b      	ldr	r2, [pc, #300]	@ (8004138 <HAL_DMA_Init+0x158>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a48      	ldr	r2, [pc, #288]	@ (800413c <HAL_DMA_Init+0x15c>)
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40
 800401c:	e00e      	b.n	800403c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	4b46      	ldr	r3, [pc, #280]	@ (8004140 <HAL_DMA_Init+0x160>)
 8004026:	4413      	add	r3, r2
 8004028:	4a43      	ldr	r2, [pc, #268]	@ (8004138 <HAL_DMA_Init+0x158>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	009a      	lsls	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a42      	ldr	r2, [pc, #264]	@ (8004144 <HAL_DMA_Init+0x164>)
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004096:	d039      	beq.n	800410c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <HAL_DMA_Init+0x15c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d11a      	bne.n	80040d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <HAL_DMA_Init+0x168>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f003 031c 	and.w	r3, r3, #28
 80040ae:	210f      	movs	r1, #15
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	4924      	ldr	r1, [pc, #144]	@ (8004148 <HAL_DMA_Init+0x168>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040bc:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <HAL_DMA_Init+0x168>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	f003 031c 	and.w	r3, r3, #28
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	491d      	ldr	r1, [pc, #116]	@ (8004148 <HAL_DMA_Init+0x168>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
 80040d6:	e019      	b.n	800410c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040d8:	4b1c      	ldr	r3, [pc, #112]	@ (800414c <HAL_DMA_Init+0x16c>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e0:	f003 031c 	and.w	r3, r3, #28
 80040e4:	210f      	movs	r1, #15
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	4917      	ldr	r1, [pc, #92]	@ (800414c <HAL_DMA_Init+0x16c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040f2:	4b16      	ldr	r3, [pc, #88]	@ (800414c <HAL_DMA_Init+0x16c>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f003 031c 	and.w	r3, r3, #28
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	4911      	ldr	r1, [pc, #68]	@ (800414c <HAL_DMA_Init+0x16c>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40020407 	.word	0x40020407
 8004134:	bffdfff8 	.word	0xbffdfff8
 8004138:	cccccccd 	.word	0xcccccccd
 800413c:	40020000 	.word	0x40020000
 8004140:	bffdfbf8 	.word	0xbffdfbf8
 8004144:	40020400 	.word	0x40020400
 8004148:	400200a8 	.word	0x400200a8
 800414c:	400204a8 	.word	0x400204a8

08004150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_DMA_Start_IT+0x20>
 800416c:	2302      	movs	r3, #2
 800416e:	e04b      	b.n	8004208 <HAL_DMA_Start_IT+0xb8>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d13a      	bne.n	80041fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f8e0 	bl	800436e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 020e 	orr.w	r2, r2, #14
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00f      	b.n	80041e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 020a 	orr.w	r2, r2, #10
 80041e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e005      	b.n	8004206 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	f003 031c 	and.w	r3, r3, #28
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d026      	beq.n	800428a <HAL_DMA_IRQHandler+0x7a>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d021      	beq.n	800428a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f003 021c 	and.w	r2, r3, #28
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2104      	movs	r1, #4
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d071      	beq.n	8004364 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004288:	e06c      	b.n	8004364 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f003 031c 	and.w	r3, r3, #28
 8004292:	2202      	movs	r2, #2
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d02e      	beq.n	80042fc <HAL_DMA_IRQHandler+0xec>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d029      	beq.n	80042fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 020a 	bic.w	r2, r2, #10
 80042c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	f003 021c 	and.w	r2, r3, #28
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2102      	movs	r1, #2
 80042dc:	fa01 f202 	lsl.w	r2, r1, r2
 80042e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d038      	beq.n	8004364 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042fa:	e033      	b.n	8004364 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	f003 031c 	and.w	r3, r3, #28
 8004304:	2208      	movs	r2, #8
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02a      	beq.n	8004366 <HAL_DMA_IRQHandler+0x156>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d025      	beq.n	8004366 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 020e 	bic.w	r2, r2, #14
 8004328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 021c 	and.w	r2, r3, #28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004364:	bf00      	nop
 8004366:	bf00      	nop
}
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	f003 021c 	and.w	r2, r3, #28
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	2101      	movs	r1, #1
 800438a:	fa01 f202 	lsl.w	r2, r1, r2
 800438e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d108      	bne.n	80043b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043b0:	e007      	b.n	80043c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	60da      	str	r2, [r3, #12]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043de:	e17f      	b.n	80046e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8171 	beq.w	80046da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d005      	beq.n	8004410 <HAL_GPIO_Init+0x40>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0201 	and.w	r2, r3, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d118      	bne.n	80044b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004484:	2201      	movs	r2, #1
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	08db      	lsrs	r3, r3, #3
 800449a:	f003 0201 	and.w	r2, r3, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d017      	beq.n	80044ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d123      	bne.n	8004540 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	220f      	movs	r2, #15
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	6939      	ldr	r1, [r7, #16]
 800453c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80ac 	beq.w	80046da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	4b5f      	ldr	r3, [pc, #380]	@ (8004700 <HAL_GPIO_Init+0x330>)
 8004584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004586:	4a5e      	ldr	r2, [pc, #376]	@ (8004700 <HAL_GPIO_Init+0x330>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6613      	str	r3, [r2, #96]	@ 0x60
 800458e:	4b5c      	ldr	r3, [pc, #368]	@ (8004700 <HAL_GPIO_Init+0x330>)
 8004590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800459a:	4a5a      	ldr	r2, [pc, #360]	@ (8004704 <HAL_GPIO_Init+0x334>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	3302      	adds	r3, #2
 80045a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	220f      	movs	r2, #15
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045c4:	d025      	beq.n	8004612 <HAL_GPIO_Init+0x242>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004708 <HAL_GPIO_Init+0x338>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01f      	beq.n	800460e <HAL_GPIO_Init+0x23e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4e      	ldr	r2, [pc, #312]	@ (800470c <HAL_GPIO_Init+0x33c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d019      	beq.n	800460a <HAL_GPIO_Init+0x23a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004710 <HAL_GPIO_Init+0x340>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_GPIO_Init+0x236>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004714 <HAL_GPIO_Init+0x344>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00d      	beq.n	8004602 <HAL_GPIO_Init+0x232>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_GPIO_Init+0x348>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x22e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4a      	ldr	r2, [pc, #296]	@ (800471c <HAL_GPIO_Init+0x34c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_GPIO_Init+0x22a>
 80045f6:	2306      	movs	r3, #6
 80045f8:	e00c      	b.n	8004614 <HAL_GPIO_Init+0x244>
 80045fa:	2307      	movs	r3, #7
 80045fc:	e00a      	b.n	8004614 <HAL_GPIO_Init+0x244>
 80045fe:	2305      	movs	r3, #5
 8004600:	e008      	b.n	8004614 <HAL_GPIO_Init+0x244>
 8004602:	2304      	movs	r3, #4
 8004604:	e006      	b.n	8004614 <HAL_GPIO_Init+0x244>
 8004606:	2303      	movs	r3, #3
 8004608:	e004      	b.n	8004614 <HAL_GPIO_Init+0x244>
 800460a:	2302      	movs	r3, #2
 800460c:	e002      	b.n	8004614 <HAL_GPIO_Init+0x244>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_GPIO_Init+0x244>
 8004612:	2300      	movs	r3, #0
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	f002 0203 	and.w	r2, r2, #3
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	4093      	lsls	r3, r2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004624:	4937      	ldr	r1, [pc, #220]	@ (8004704 <HAL_GPIO_Init+0x334>)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	3302      	adds	r3, #2
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_GPIO_Init+0x350>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004656:	4a32      	ldr	r2, [pc, #200]	@ (8004720 <HAL_GPIO_Init+0x350>)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800465c:	4b30      	ldr	r3, [pc, #192]	@ (8004720 <HAL_GPIO_Init+0x350>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43db      	mvns	r3, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004680:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <HAL_GPIO_Init+0x350>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004686:	4b26      	ldr	r3, [pc, #152]	@ (8004720 <HAL_GPIO_Init+0x350>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_GPIO_Init+0x350>)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_GPIO_Init+0x350>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046d4:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <HAL_GPIO_Init+0x350>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3301      	adds	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47f ae78 	bne.w	80043e0 <HAL_GPIO_Init+0x10>
  }
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40010000 	.word	0x40010000
 8004708:	48000400 	.word	0x48000400
 800470c:	48000800 	.word	0x48000800
 8004710:	48000c00 	.word	0x48000c00
 8004714:	48001000 	.word	0x48001000
 8004718:	48001400 	.word	0x48001400
 800471c:	48001800 	.word	0x48001800
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	4613      	mov	r3, r2
 8004732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004734:	787b      	ldrb	r3, [r7, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004740:	e002      	b.n	8004748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <HAL_PWREx_GetVoltageRange+0x18>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40007000 	.word	0x40007000

08004770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800477e:	d130      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004780:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478c:	d038      	beq.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800478e:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004798:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800479c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800479e:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2232      	movs	r2, #50	@ 0x32
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0c9b      	lsrs	r3, r3, #18
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b4:	e002      	b.n	80047bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047bc:	4b14      	ldr	r3, [pc, #80]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c8:	d102      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f2      	bne.n	80047b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047dc:	d110      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e00f      	b.n	8004802 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ee:	d007      	beq.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047f8:	4a05      	ldr	r2, [pc, #20]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40007000 	.word	0x40007000
 8004814:	200010f4 	.word	0x200010f4
 8004818:	431bde83 	.word	0x431bde83

0800481c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e3ca      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482e:	4b97      	ldr	r3, [pc, #604]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004838:	4b94      	ldr	r3, [pc, #592]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80e4 	beq.w	8004a18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_RCC_OscConfig+0x4a>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	f040 808b 	bne.w	8004974 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 8087 	bne.w	8004974 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004866:	4b89      	ldr	r3, [pc, #548]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x62>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e3a2      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1a      	ldr	r2, [r3, #32]
 8004882:	4b82      	ldr	r3, [pc, #520]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <HAL_RCC_OscConfig+0x7c>
 800488e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004896:	e005      	b.n	80048a4 <HAL_RCC_OscConfig+0x88>
 8004898:	4b7c      	ldr	r3, [pc, #496]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d223      	bcs.n	80048f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fd55 	bl	800535c <RCC_SetFlashLatencyFromMSIRange>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e383      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048bc:	4b73      	ldr	r3, [pc, #460]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a72      	ldr	r2, [pc, #456]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048c2:	f043 0308 	orr.w	r3, r3, #8
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b70      	ldr	r3, [pc, #448]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	496d      	ldr	r1, [pc, #436]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048da:	4b6c      	ldr	r3, [pc, #432]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	4968      	ldr	r1, [pc, #416]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	604b      	str	r3, [r1, #4]
 80048ee:	e025      	b.n	800493c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f0:	4b66      	ldr	r3, [pc, #408]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048f6:	f043 0308 	orr.w	r3, r3, #8
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b63      	ldr	r3, [pc, #396]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	4960      	ldr	r1, [pc, #384]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800490e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	495b      	ldr	r1, [pc, #364]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fd15 	bl	800535c <RCC_SetFlashLatencyFromMSIRange>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e343      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800493c:	f000 fc4a 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b52      	ldr	r3, [pc, #328]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	4950      	ldr	r1, [pc, #320]	@ (8004a90 <HAL_RCC_OscConfig+0x274>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	4a4e      	ldr	r2, [pc, #312]	@ (8004a94 <HAL_RCC_OscConfig+0x278>)
 800495a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800495c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fe93 	bl	800368c <HAL_InitTick>
 8004966:	4603      	mov	r3, r0
 8004968:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d052      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	e327      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d032      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800497c:	4b43      	ldr	r3, [pc, #268]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a42      	ldr	r2, [pc, #264]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004988:	f7fe fed0 	bl	800372c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004990:	f7fe fecc 	bl	800372c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e310      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a2:	4b3a      	ldr	r3, [pc, #232]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ae:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a36      	ldr	r2, [pc, #216]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b34      	ldr	r3, [pc, #208]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4931      	ldr	r1, [pc, #196]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049cc:	4b2f      	ldr	r3, [pc, #188]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	492c      	ldr	r1, [pc, #176]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	604b      	str	r3, [r1, #4]
 80049e0:	e01a      	b.n	8004a18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049e2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a29      	ldr	r2, [pc, #164]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049ee:	f7fe fe9d 	bl	800372c <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049f6:	f7fe fe99 	bl	800372c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e2dd      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a08:	4b20      	ldr	r3, [pc, #128]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x1da>
 8004a14:	e000      	b.n	8004a18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d074      	beq.n	8004b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d005      	beq.n	8004a36 <HAL_RCC_OscConfig+0x21a>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d10e      	bne.n	8004a4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a36:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d064      	beq.n	8004b0c <HAL_RCC_OscConfig+0x2f0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d160      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e2ba      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x24a>
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e026      	b.n	8004ab4 <HAL_RCC_OscConfig+0x298>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a6e:	d115      	bne.n	8004a9c <HAL_RCC_OscConfig+0x280>
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a05      	ldr	r2, [pc, #20]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a02      	ldr	r2, [pc, #8]	@ (8004a8c <HAL_RCC_OscConfig+0x270>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e014      	b.n	8004ab4 <HAL_RCC_OscConfig+0x298>
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	0800ca38 	.word	0x0800ca38
 8004a94:	200010f4 	.word	0x200010f4
 8004a98:	200010f8 	.word	0x200010f8
 8004a9c:	4ba0      	ldr	r3, [pc, #640]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a9f      	ldr	r2, [pc, #636]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b9d      	ldr	r3, [pc, #628]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a9c      	ldr	r2, [pc, #624]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fe36 	bl	800372c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fe fe32 	bl	800372c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e276      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	4b92      	ldr	r3, [pc, #584]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2a8>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fe22 	bl	800372c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fe fe1e 	bl	800372c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e262      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004afe:	4b88      	ldr	r3, [pc, #544]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x2d0>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d060      	beq.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x310>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d119      	bne.n	8004b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d116      	bne.n	8004b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_OscConfig+0x328>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e23f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	4973      	ldr	r1, [pc, #460]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b58:	e040      	b.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d023      	beq.n	8004baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b62:	4b6f      	ldr	r3, [pc, #444]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6e      	ldr	r2, [pc, #440]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fddd 	bl	800372c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fe fdd9 	bl	800372c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e21d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b88:	4b65      	ldr	r3, [pc, #404]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b62      	ldr	r3, [pc, #392]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	495f      	ldr	r1, [pc, #380]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
 8004ba8:	e018      	b.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004baa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fe fdb9 	bl	800372c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fe fdb5 	bl	800372c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1f9      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd0:	4b53      	ldr	r3, [pc, #332]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d03c      	beq.n	8004c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fe fd94 	bl	800372c <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c08:	f7fe fd90 	bl	800372c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e1d4      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1a:	4b41      	ldr	r3, [pc, #260]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ef      	beq.n	8004c08 <HAL_RCC_OscConfig+0x3ec>
 8004c28:	e01b      	b.n	8004c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c30:	4a3b      	ldr	r2, [pc, #236]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fd77 	bl	800372c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe fd73 	bl	800372c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e1b7      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c54:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ef      	bne.n	8004c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a6 	beq.w	8004dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c70:	2300      	movs	r3, #0
 8004c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10d      	bne.n	8004c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c80:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	4a26      	ldr	r2, [pc, #152]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c8c:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9c:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <HAL_RCC_OscConfig+0x508>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d118      	bne.n	8004cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <HAL_RCC_OscConfig+0x508>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1d      	ldr	r2, [pc, #116]	@ (8004d24 <HAL_RCC_OscConfig+0x508>)
 8004cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb4:	f7fe fd3a 	bl	800372c <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbc:	f7fe fd36 	bl	800372c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e17a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <HAL_RCC_OscConfig+0x508>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d108      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4d8>
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf2:	e029      	b.n	8004d48 <HAL_RCC_OscConfig+0x52c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b05      	cmp	r3, #5
 8004cfa:	d115      	bne.n	8004d28 <HAL_RCC_OscConfig+0x50c>
 8004cfc:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	4a07      	ldr	r2, [pc, #28]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d0c:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	4a03      	ldr	r2, [pc, #12]	@ (8004d20 <HAL_RCC_OscConfig+0x504>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d1c:	e014      	b.n	8004d48 <HAL_RCC_OscConfig+0x52c>
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40007000 	.word	0x40007000
 8004d28:	4b9c      	ldr	r3, [pc, #624]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d38:	4b98      	ldr	r3, [pc, #608]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	4a97      	ldr	r2, [pc, #604]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fe fcec 	bl	800372c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d58:	f7fe fce8 	bl	800372c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e12a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ed      	beq.n	8004d58 <HAL_RCC_OscConfig+0x53c>
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fcd5 	bl	800372c <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe fcd1 	bl	800372c <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e113      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ed      	bne.n	8004d86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004daa:	7ffb      	ldrb	r3, [r7, #31]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d105      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db0:	4b7a      	ldr	r3, [pc, #488]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	4a79      	ldr	r2, [pc, #484]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80fe 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	f040 80d0 	bne.w	8004f70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dd0:	4b72      	ldr	r3, [pc, #456]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0203 	and.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d130      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	3b01      	subs	r3, #1
 8004df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d127      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11f      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e10:	2a07      	cmp	r2, #7
 8004e12:	bf14      	ite	ne
 8004e14:	2201      	movne	r2, #1
 8004e16:	2200      	moveq	r2, #0
 8004e18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d113      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d109      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d06e      	beq.n	8004f24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	d069      	beq.n	8004f20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e4c:	4b53      	ldr	r3, [pc, #332]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e58:	4b50      	ldr	r3, [pc, #320]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0ad      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e68:	4b4c      	ldr	r3, [pc, #304]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e74:	f7fe fc5a 	bl	800372c <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fe fc56 	bl	800372c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e09a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8e:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9a:	4b40      	ldr	r3, [pc, #256]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	4b40      	ldr	r3, [pc, #256]	@ (8004fa0 <HAL_RCC_OscConfig+0x784>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	0112      	lsls	r2, r2, #4
 8004eae:	4311      	orrs	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eb4:	0212      	lsls	r2, r2, #8
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0552      	lsls	r2, r2, #21
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ec8:	0852      	lsrs	r2, r2, #1
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	0652      	lsls	r2, r2, #25
 8004ece:	4311      	orrs	r1, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ed4:	0912      	lsrs	r2, r2, #4
 8004ed6:	0452      	lsls	r2, r2, #17
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	4930      	ldr	r1, [pc, #192]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eec:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ef8:	f7fe fc18 	bl	800372c <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fe fc14 	bl	800372c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e058      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f12:	4b22      	ldr	r3, [pc, #136]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f1e:	e050      	b.n	8004fc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d148      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f30:	4b1a      	ldr	r3, [pc, #104]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a19      	ldr	r2, [pc, #100]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f3c:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a16      	ldr	r2, [pc, #88]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f48:	f7fe fbf0 	bl	800372c <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fe fbec 	bl	800372c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e030      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f62:	4b0e      	ldr	r3, [pc, #56]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x734>
 8004f6e:	e028      	b.n	8004fc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d023      	beq.n	8004fbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <HAL_RCC_OscConfig+0x780>)
 8004f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fe fbd3 	bl	800372c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f88:	e00c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fe fbcf 	bl	800372c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d905      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e013      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <HAL_RCC_OscConfig+0x7b0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ec      	bne.n	8004f8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_RCC_OscConfig+0x7b0>)
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4905      	ldr	r1, [pc, #20]	@ (8004fcc <HAL_RCC_OscConfig+0x7b0>)
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_OscConfig+0x7b4>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	feeefffc 	.word	0xfeeefffc

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0e7      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b75      	ldr	r3, [pc, #468]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d910      	bls.n	8005018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b72      	ldr	r3, [pc, #456]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4970      	ldr	r1, [pc, #448]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b6e      	ldr	r3, [pc, #440]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0cf      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d010      	beq.n	8005046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4b66      	ldr	r3, [pc, #408]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b63      	ldr	r3, [pc, #396]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4960      	ldr	r1, [pc, #384]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04c      	beq.n	80050ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	4b5a      	ldr	r3, [pc, #360]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d121      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0a6      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005072:	4b54      	ldr	r3, [pc, #336]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e09a      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800508a:	4b4e      	ldr	r3, [pc, #312]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e08e      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509a:	4b4a      	ldr	r3, [pc, #296]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e086      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b46      	ldr	r3, [pc, #280]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4943      	ldr	r1, [pc, #268]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fe fb36 	bl	800372c <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fe fb32 	bl	800372c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e06e      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b3a      	ldr	r3, [pc, #232]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005104:	429a      	cmp	r2, r3
 8005106:	d208      	bcs.n	800511a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b2e      	ldr	r3, [pc, #184]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	492b      	ldr	r1, [pc, #172]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511a:	4b29      	ldr	r3, [pc, #164]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d210      	bcs.n	800514a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 0207 	bic.w	r2, r3, #7
 8005130:	4923      	ldr	r1, [pc, #140]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d001      	beq.n	800514a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e036      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005156:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4918      	ldr	r1, [pc, #96]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4910      	ldr	r1, [pc, #64]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005188:	f000 f824 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	490b      	ldr	r1, [pc, #44]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f4>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <HAL_RCC_ClockConfig+0x1f8>)
 80051a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_ClockConfig+0x1fc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fa6d 	bl	800368c <HAL_InitTick>
 80051b2:	4603      	mov	r3, r0
 80051b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80051b6:	7afb      	ldrb	r3, [r7, #11]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40022000 	.word	0x40022000
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800ca38 	.word	0x0800ca38
 80051cc:	200010f4 	.word	0x200010f4
 80051d0:	200010f8 	.word	0x200010f8

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	@ 0x24
 80051d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e2:	4b3e      	ldr	r3, [pc, #248]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ec:	4b3b      	ldr	r3, [pc, #236]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x34>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d121      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d11e      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005208:	4b34      	ldr	r3, [pc, #208]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d107      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005214:	4b31      	ldr	r3, [pc, #196]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	e005      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005224:	4b2d      	ldr	r3, [pc, #180]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005244:	e00a      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b04      	cmp	r3, #4
 800524a:	d102      	bne.n	8005252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e004      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d101      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005258:	4b23      	ldr	r3, [pc, #140]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800525a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d134      	bne.n	80052cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005262:	4b1e      	ldr	r3, [pc, #120]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0xa6>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d003      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xac>
 8005278:	e005      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800527a:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800527c:	617b      	str	r3, [r7, #20]
      break;
 800527e:	e005      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005282:	617b      	str	r3, [r7, #20]
      break;
 8005284:	e002      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	617b      	str	r3, [r7, #20]
      break;
 800528a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800528c:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	3301      	adds	r3, #1
 8005298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800529a:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	fb03 f202 	mul.w	r2, r3, r2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	0e5b      	lsrs	r3, r3, #25
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	3301      	adds	r3, #1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052cc:	69bb      	ldr	r3, [r7, #24]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	@ 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800ca50 	.word	0x0800ca50
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	007a1200 	.word	0x007a1200

080052ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f0:	4b03      	ldr	r3, [pc, #12]	@ (8005300 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	200010f4 	.word	0x200010f4

08005304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005308:	f7ff fff0 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4904      	ldr	r1, [pc, #16]	@ (800532c <HAL_RCC_GetPCLK1Freq+0x28>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	0800ca48 	.word	0x0800ca48

08005330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005334:	f7ff ffda 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0adb      	lsrs	r3, r3, #11
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4904      	ldr	r1, [pc, #16]	@ (8005358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	0800ca48 	.word	0x0800ca48

0800535c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005368:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005374:	f7ff f9ee 	bl	8004754 <HAL_PWREx_GetVoltageRange>
 8005378:	6178      	str	r0, [r7, #20]
 800537a:	e014      	b.n	80053a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005380:	4a24      	ldr	r2, [pc, #144]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005386:	6593      	str	r3, [r2, #88]	@ 0x58
 8005388:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800538a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005394:	f7ff f9de 	bl	8004754 <HAL_PWREx_GetVoltageRange>
 8005398:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4b1e      	ldr	r3, [pc, #120]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	4a1d      	ldr	r2, [pc, #116]	@ (8005414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ac:	d10b      	bne.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b80      	cmp	r3, #128	@ 0x80
 80053b2:	d919      	bls.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80053b8:	d902      	bls.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ba:	2302      	movs	r3, #2
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e013      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053c0:	2301      	movs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	e010      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b80      	cmp	r3, #128	@ 0x80
 80053ca:	d902      	bls.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053cc:	2303      	movs	r3, #3
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e00a      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b80      	cmp	r3, #128	@ 0x80
 80053d6:	d102      	bne.n	80053de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053d8:	2302      	movs	r3, #2
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	e004      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b70      	cmp	r3, #112	@ 0x70
 80053e2:	d101      	bne.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053e4:	2301      	movs	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 0207 	bic.w	r2, r3, #7
 80053f0:	4909      	ldr	r1, [pc, #36]	@ (8005418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053f8:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021000 	.word	0x40021000
 8005418:	40022000 	.word	0x40022000

0800541c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005424:	2300      	movs	r3, #0
 8005426:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005428:	2300      	movs	r3, #0
 800542a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005434:	2b00      	cmp	r3, #0
 8005436:	d041      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005440:	d02a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005442:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005446:	d824      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800544c:	d008      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800544e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005452:	d81e      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800545c:	d010      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800545e:	e018      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005460:	4b86      	ldr	r3, [pc, #536]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a85      	ldr	r2, [pc, #532]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800546c:	e015      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fabb 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800547e:	e00c      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3320      	adds	r3, #32
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fba6 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005490:	e003      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	74fb      	strb	r3, [r7, #19]
      break;
 8005496:	e000      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a0:	4b76      	ldr	r3, [pc, #472]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ae:	4973      	ldr	r1, [pc, #460]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054b6:	e001      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d041      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054d0:	d02a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054d6:	d824      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054dc:	d008      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e2:	d81e      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054ec:	d010      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054ee:	e018      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054f0:	4b62      	ldr	r3, [pc, #392]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a61      	ldr	r2, [pc, #388]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054fc:	e015      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa73 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800550e:	e00c      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3320      	adds	r3, #32
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fb5e 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005520:	e003      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	74fb      	strb	r3, [r7, #19]
      break;
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005530:	4b52      	ldr	r3, [pc, #328]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800553e:	494f      	ldr	r1, [pc, #316]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80a0 	beq.w	800569a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555a:	2300      	movs	r3, #0
 800555c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800555e:	4b47      	ldr	r3, [pc, #284]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00d      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005574:	4b41      	ldr	r3, [pc, #260]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	4a40      	ldr	r2, [pc, #256]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005580:	4b3e      	ldr	r3, [pc, #248]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558c:	2301      	movs	r3, #1
 800558e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005590:	4b3b      	ldr	r3, [pc, #236]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3a      	ldr	r2, [pc, #232]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559c:	f7fe f8c6 	bl	800372c <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055a2:	e009      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fe f8c2 	bl	800372c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d902      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	74fb      	strb	r3, [r7, #19]
        break;
 80055b6:	e005      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055b8:	4b31      	ldr	r3, [pc, #196]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ef      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d15c      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055ca:	4b2c      	ldr	r3, [pc, #176]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01f      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e8:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f4:	4b21      	ldr	r3, [pc, #132]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	4a20      	ldr	r2, [pc, #128]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560a:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fe f881 	bl	800372c <HAL_GetTick>
 800562a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562c:	e00b      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562e:	f7fe f87d 	bl	800372c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d902      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	74fb      	strb	r3, [r7, #19]
            break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ec      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800565a:	4b08      	ldr	r3, [pc, #32]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566a:	4904      	ldr	r1, [pc, #16]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	74bb      	strb	r3, [r7, #18]
 8005678:	e006      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	7cfb      	ldrb	r3, [r7, #19]
 8005686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005688:	7c7b      	ldrb	r3, [r7, #17]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d105      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568e:	4b9e      	ldr	r3, [pc, #632]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	4a9d      	ldr	r2, [pc, #628]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005698:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a6:	4b98      	ldr	r3, [pc, #608]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f023 0203 	bic.w	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	4994      	ldr	r1, [pc, #592]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 020c 	bic.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d6:	498c      	ldr	r1, [pc, #560]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ea:	4b87      	ldr	r3, [pc, #540]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	4983      	ldr	r1, [pc, #524]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800570c:	4b7e      	ldr	r3, [pc, #504]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	497b      	ldr	r1, [pc, #492]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800572e:	4b76      	ldr	r3, [pc, #472]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573c:	4972      	ldr	r1, [pc, #456]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005750:	4b6d      	ldr	r3, [pc, #436]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	496a      	ldr	r1, [pc, #424]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005772:	4b65      	ldr	r3, [pc, #404]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005780:	4961      	ldr	r1, [pc, #388]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005794:	4b5c      	ldr	r3, [pc, #368]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a2:	4959      	ldr	r1, [pc, #356]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b6:	4b54      	ldr	r3, [pc, #336]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	4950      	ldr	r1, [pc, #320]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	4948      	ldr	r1, [pc, #288]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057fa:	4b43      	ldr	r3, [pc, #268]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005808:	493f      	ldr	r1, [pc, #252]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d028      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800581c:	4b3a      	ldr	r3, [pc, #232]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582a:	4937      	ldr	r1, [pc, #220]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800583a:	d106      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583c:	4b32      	ldr	r3, [pc, #200]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005846:	60d3      	str	r3, [r2, #12]
 8005848:	e011      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800584e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005852:	d10c      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	2101      	movs	r1, #1
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f8c8 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800587a:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005880:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	491f      	ldr	r1, [pc, #124]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005898:	d106      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589a:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a4:	60d3      	str	r3, [r2, #12]
 80058a6:	e011      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2101      	movs	r1, #1
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f899 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02b      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	4908      	ldr	r1, [pc, #32]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058f6:	d109      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f8:	4b03      	ldr	r3, [pc, #12]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a02      	ldr	r2, [pc, #8]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005902:	60d3      	str	r3, [r2, #12]
 8005904:	e014      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005914:	d10c      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	2101      	movs	r1, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f867 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800593c:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800594a:	4928      	ldr	r1, [pc, #160]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800595a:	d10d      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	2102      	movs	r1, #2
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f844 	bl	80059f0 <RCCEx_PLLSAI1_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d014      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	74bb      	strb	r3, [r7, #18]
 8005976:	e011      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800597c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3320      	adds	r3, #32
 8005986:	2102      	movs	r1, #2
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f925 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b6:	490d      	ldr	r1, [pc, #52]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ca:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	4904      	ldr	r1, [pc, #16]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000

080059f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059fe:	4b75      	ldr	r3, [pc, #468]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d018      	beq.n	8005a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a0a:	4b72      	ldr	r3, [pc, #456]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0203 	and.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d10d      	bne.n	8005a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a22:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
       ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d047      	beq.n	8005ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e044      	b.n	8005ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d018      	beq.n	8005a76 <RCCEx_PLLSAI1_Config+0x86>
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d825      	bhi.n	8005a94 <RCCEx_PLLSAI1_Config+0xa4>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d002      	beq.n	8005a52 <RCCEx_PLLSAI1_Config+0x62>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d009      	beq.n	8005a64 <RCCEx_PLLSAI1_Config+0x74>
 8005a50:	e020      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a52:	4b60      	ldr	r3, [pc, #384]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d11d      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a62:	e01a      	b.n	8005a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a64:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d116      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a74:	e013      	b.n	8005a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a76:	4b57      	ldr	r3, [pc, #348]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10f      	bne.n	8005aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a82:	4b54      	ldr	r3, [pc, #336]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a92:	e006      	b.n	8005aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e004      	b.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	4944      	ldr	r1, [pc, #272]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d17d      	bne.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005acc:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a40      	ldr	r2, [pc, #256]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad8:	f7fd fe28 	bl	800372c <HAL_GetTick>
 8005adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ade:	e009      	b.n	8005af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ae0:	f7fd fe24 	bl	800372c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d902      	bls.n	8005af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	73fb      	strb	r3, [r7, #15]
        break;
 8005af2:	e005      	b.n	8005b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af4:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ef      	bne.n	8005ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d160      	bne.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b0c:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6892      	ldr	r2, [r2, #8]
 8005b1c:	0211      	lsls	r1, r2, #8
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68d2      	ldr	r2, [r2, #12]
 8005b22:	0912      	lsrs	r2, r2, #4
 8005b24:	0452      	lsls	r2, r2, #17
 8005b26:	430a      	orrs	r2, r1
 8005b28:	492a      	ldr	r1, [pc, #168]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	610b      	str	r3, [r1, #16]
 8005b2e:	e027      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d112      	bne.n	8005b5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b36:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	0211      	lsls	r1, r2, #8
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6912      	ldr	r2, [r2, #16]
 8005b4c:	0852      	lsrs	r2, r2, #1
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	0552      	lsls	r2, r2, #21
 8005b52:	430a      	orrs	r2, r1
 8005b54:	491f      	ldr	r1, [pc, #124]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
 8005b5a:	e011      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6892      	ldr	r2, [r2, #8]
 8005b6c:	0211      	lsls	r1, r2, #8
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6952      	ldr	r2, [r2, #20]
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0652      	lsls	r2, r2, #25
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	4916      	ldr	r1, [pc, #88]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b80:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a13      	ldr	r2, [pc, #76]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fd fdce 	bl	800372c <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b92:	e009      	b.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b94:	f7fd fdca 	bl	800372c <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d902      	bls.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ba6:	e005      	b.n	8005bb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ef      	beq.n	8005b94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000

08005bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005be6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bf2:	4b67      	ldr	r3, [pc, #412]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0203 	and.w	r2, r3, #3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d10d      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
       ||
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c0a:	4b61      	ldr	r3, [pc, #388]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
       ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d047      	beq.n	8005cae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
 8005c22:	e044      	b.n	8005cae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d018      	beq.n	8005c5e <RCCEx_PLLSAI2_Config+0x86>
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d825      	bhi.n	8005c7c <RCCEx_PLLSAI2_Config+0xa4>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d002      	beq.n	8005c3a <RCCEx_PLLSAI2_Config+0x62>
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d009      	beq.n	8005c4c <RCCEx_PLLSAI2_Config+0x74>
 8005c38:	e020      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c3a:	4b55      	ldr	r3, [pc, #340]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d11d      	bne.n	8005c82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4a:	e01a      	b.n	8005c82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c4c:	4b50      	ldr	r3, [pc, #320]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d116      	bne.n	8005c86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c5c:	e013      	b.n	8005c86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c6a:	4b49      	ldr	r3, [pc, #292]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c7a:	e006      	b.n	8005c8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c80:	e004      	b.n	8005c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c92:	4b3f      	ldr	r3, [pc, #252]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6819      	ldr	r1, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	4939      	ldr	r1, [pc, #228]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d167      	bne.n	8005d84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cb4:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc0:	f7fd fd34 	bl	800372c <HAL_GetTick>
 8005cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cc6:	e009      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cc8:	f7fd fd30 	bl	800372c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d902      	bls.n	8005cdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cda:	e005      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1ef      	bne.n	8005cc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d14a      	bne.n	8005d84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d111      	bne.n	8005d18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cf4:	4b26      	ldr	r3, [pc, #152]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68d2      	ldr	r2, [r2, #12]
 8005d0a:	0912      	lsrs	r2, r2, #4
 8005d0c:	0452      	lsls	r2, r2, #17
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	491f      	ldr	r1, [pc, #124]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	614b      	str	r3, [r1, #20]
 8005d16:	e011      	b.n	8005d3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d18:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	0211      	lsls	r1, r2, #8
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6912      	ldr	r2, [r2, #16]
 8005d2e:	0852      	lsrs	r2, r2, #1
 8005d30:	3a01      	subs	r2, #1
 8005d32:	0652      	lsls	r2, r2, #25
 8005d34:	430a      	orrs	r2, r1
 8005d36:	4916      	ldr	r1, [pc, #88]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d3c:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a13      	ldr	r2, [pc, #76]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fd fcf0 	bl	800372c <HAL_GetTick>
 8005d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d4e:	e009      	b.n	8005d64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d50:	f7fd fcec 	bl	800372c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d902      	bls.n	8005d64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	73fb      	strb	r3, [r7, #15]
          break;
 8005d62:	e005      	b.n	8005d70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d64:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0ef      	beq.n	8005d50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d76:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	4904      	ldr	r1, [pc, #16]	@ (8005d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40021000 	.word	0x40021000

08005d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e049      	b.n	8005e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fd fade 	bl	800337c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f000 fc0c 	bl	80065f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e047      	b.n	8005eec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a23      	ldr	r2, [pc, #140]	@ (8005ef8 <HAL_TIM_Base_Start+0xb4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01d      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e76:	d018      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005efc <HAL_TIM_Base_Start+0xb8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1e      	ldr	r2, [pc, #120]	@ (8005f00 <HAL_TIM_Base_Start+0xbc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <HAL_TIM_Base_Start+0xc0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f08 <HAL_TIM_Base_Start+0xc4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <HAL_TIM_Base_Start+0x66>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a19      	ldr	r2, [pc, #100]	@ (8005f0c <HAL_TIM_Base_Start+0xc8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d115      	bne.n	8005ed6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	4b17      	ldr	r3, [pc, #92]	@ (8005f10 <HAL_TIM_Base_Start+0xcc>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b06      	cmp	r3, #6
 8005eba:	d015      	beq.n	8005ee8 <HAL_TIM_Base_Start+0xa4>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec2:	d011      	beq.n	8005ee8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	e008      	b.n	8005ee8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e000      	b.n	8005eea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	00010007 	.word	0x00010007

08005f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e049      	b.n	8005fba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f841 	bl	8005fc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fb4c 	bl	80065f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d020      	beq.n	800603a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01b      	beq.n	800603a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0202 	mvn.w	r2, #2
 800600a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fac6 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 8006026:	e005      	b.n	8006034 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fab8 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fac9 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01b      	beq.n	8006086 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0204 	mvn.w	r2, #4
 8006056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 faa0 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 8006072:	e005      	b.n	8006080 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa92 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 faa3 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01b      	beq.n	80060d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0208 	mvn.w	r2, #8
 80060a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2204      	movs	r2, #4
 80060a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fa7a 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 80060be:	e005      	b.n	80060cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa6c 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa7d 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d020      	beq.n	800611e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01b      	beq.n	800611e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0210 	mvn.w	r2, #16
 80060ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2208      	movs	r2, #8
 80060f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa54 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 800610a:	e005      	b.n	8006118 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa46 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa57 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0201 	mvn.w	r2, #1
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fc fdc3 	bl	8002cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fee8 	bl	8006f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00c      	beq.n	8006194 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fee0 	bl	8006f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa11 	bl	80065da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00c      	beq.n	80061dc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0220 	mvn.w	r2, #32
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fea8 	bl	8006f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061fe:	2302      	movs	r3, #2
 8006200:	e0ff      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b14      	cmp	r3, #20
 800620e:	f200 80f0 	bhi.w	80063f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	0800626d 	.word	0x0800626d
 800621c:	080063f3 	.word	0x080063f3
 8006220:	080063f3 	.word	0x080063f3
 8006224:	080063f3 	.word	0x080063f3
 8006228:	080062ad 	.word	0x080062ad
 800622c:	080063f3 	.word	0x080063f3
 8006230:	080063f3 	.word	0x080063f3
 8006234:	080063f3 	.word	0x080063f3
 8006238:	080062ef 	.word	0x080062ef
 800623c:	080063f3 	.word	0x080063f3
 8006240:	080063f3 	.word	0x080063f3
 8006244:	080063f3 	.word	0x080063f3
 8006248:	0800632f 	.word	0x0800632f
 800624c:	080063f3 	.word	0x080063f3
 8006250:	080063f3 	.word	0x080063f3
 8006254:	080063f3 	.word	0x080063f3
 8006258:	08006371 	.word	0x08006371
 800625c:	080063f3 	.word	0x080063f3
 8006260:	080063f3 	.word	0x080063f3
 8006264:	080063f3 	.word	0x080063f3
 8006268:	080063b1 	.word	0x080063b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa62 	bl	800673c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0208 	orr.w	r2, r2, #8
 8006286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0204 	bic.w	r2, r2, #4
 8006296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	619a      	str	r2, [r3, #24]
      break;
 80062aa:	e0a5      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fad2 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6999      	ldr	r1, [r3, #24]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	619a      	str	r2, [r3, #24]
      break;
 80062ec:	e084      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fb3b 	bl	8006970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0208 	orr.w	r2, r2, #8
 8006308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0204 	bic.w	r2, r2, #4
 8006318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69d9      	ldr	r1, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	61da      	str	r2, [r3, #28]
      break;
 800632c:	e064      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fba3 	bl	8006a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69d9      	ldr	r1, [r3, #28]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	021a      	lsls	r2, r3, #8
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	61da      	str	r2, [r3, #28]
      break;
 800636e:	e043      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fbec 	bl	8006b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063ae:	e023      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fc30 	bl	8006c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063f0:	e002      	b.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
      break;
 80063f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop

0800640c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIM_ConfigClockSource+0x1c>
 8006424:	2302      	movs	r3, #2
 8006426:	e0b6      	b.n	8006596 <HAL_TIM_ConfigClockSource+0x18a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006446:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800644a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006464:	d03e      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0xd8>
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646a:	f200 8087 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x170>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006472:	f000 8086 	beq.w	8006582 <HAL_TIM_ConfigClockSource+0x176>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647a:	d87f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 800647c:	2b70      	cmp	r3, #112	@ 0x70
 800647e:	d01a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xaa>
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d87b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 8006484:	2b60      	cmp	r3, #96	@ 0x60
 8006486:	d050      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x11e>
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d877      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 800648c:	2b50      	cmp	r3, #80	@ 0x50
 800648e:	d03c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xfe>
 8006490:	2b50      	cmp	r3, #80	@ 0x50
 8006492:	d873      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 8006494:	2b40      	cmp	r3, #64	@ 0x40
 8006496:	d058      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x13e>
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d86f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 800649c:	2b30      	cmp	r3, #48	@ 0x30
 800649e:	d064      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15e>
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d86b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d060      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15e>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d867      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x170>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15e>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d05a      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15e>
 80064b4:	e062      	b.n	800657c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064c6:	f000 fc89 	bl	8006ddc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
      break;
 80064e2:	e04f      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f4:	f000 fc72 	bl	8006ddc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e03c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fbe6 	bl	8006ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2150      	movs	r1, #80	@ 0x50
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc3f 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006528:	e02c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fc05 	bl	8006d46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2160      	movs	r1, #96	@ 0x60
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc2f 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006548:	e01c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fbc6 	bl	8006ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2140      	movs	r1, #64	@ 0x40
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fc1f 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006568:	e00c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fc16 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 800657a:	e003      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e000      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a46      	ldr	r2, [pc, #280]	@ (800671c <TIM_Base_SetConfig+0x12c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660e:	d00f      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a43      	ldr	r2, [pc, #268]	@ (8006720 <TIM_Base_SetConfig+0x130>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00b      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a42      	ldr	r2, [pc, #264]	@ (8006724 <TIM_Base_SetConfig+0x134>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a41      	ldr	r2, [pc, #260]	@ (8006728 <TIM_Base_SetConfig+0x138>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a40      	ldr	r2, [pc, #256]	@ (800672c <TIM_Base_SetConfig+0x13c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d108      	bne.n	8006642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a35      	ldr	r2, [pc, #212]	@ (800671c <TIM_Base_SetConfig+0x12c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01f      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006650:	d01b      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a32      	ldr	r2, [pc, #200]	@ (8006720 <TIM_Base_SetConfig+0x130>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d017      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a31      	ldr	r2, [pc, #196]	@ (8006724 <TIM_Base_SetConfig+0x134>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a30      	ldr	r2, [pc, #192]	@ (8006728 <TIM_Base_SetConfig+0x138>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2f      	ldr	r2, [pc, #188]	@ (800672c <TIM_Base_SetConfig+0x13c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2e      	ldr	r2, [pc, #184]	@ (8006730 <TIM_Base_SetConfig+0x140>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2d      	ldr	r2, [pc, #180]	@ (8006734 <TIM_Base_SetConfig+0x144>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0x9a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2c      	ldr	r2, [pc, #176]	@ (8006738 <TIM_Base_SetConfig+0x148>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a16      	ldr	r2, [pc, #88]	@ (800671c <TIM_Base_SetConfig+0x12c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00f      	beq.n	80066e8 <TIM_Base_SetConfig+0xf8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a18      	ldr	r2, [pc, #96]	@ (800672c <TIM_Base_SetConfig+0x13c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_Base_SetConfig+0xf8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <TIM_Base_SetConfig+0x140>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0xf8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <TIM_Base_SetConfig+0x144>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0xf8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a15      	ldr	r2, [pc, #84]	@ (8006738 <TIM_Base_SetConfig+0x148>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]
  }
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40013400 	.word	0x40013400
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800

0800673c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f023 0201 	bic.w	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0302 	bic.w	r3, r3, #2
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <TIM_OC1_SetConfig+0x10c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00f      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2b      	ldr	r2, [pc, #172]	@ (800684c <TIM_OC1_SetConfig+0x110>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00b      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006850 <TIM_OC1_SetConfig+0x114>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a29      	ldr	r2, [pc, #164]	@ (8006854 <TIM_OC1_SetConfig+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a28      	ldr	r2, [pc, #160]	@ (8006858 <TIM_OC1_SetConfig+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10c      	bne.n	80067d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0308 	bic.w	r3, r3, #8
 80067c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 0304 	bic.w	r3, r3, #4
 80067d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <TIM_OC1_SetConfig+0x10c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <TIM_OC1_SetConfig+0x110>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <TIM_OC1_SetConfig+0x114>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <TIM_OC1_SetConfig+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a17      	ldr	r2, [pc, #92]	@ (8006858 <TIM_OC1_SetConfig+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d111      	bne.n	8006822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 0210 	bic.w	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a28      	ldr	r2, [pc, #160]	@ (800695c <TIM_OC2_SetConfig+0x100>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC2_SetConfig+0x6c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a27      	ldr	r2, [pc, #156]	@ (8006960 <TIM_OC2_SetConfig+0x104>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10d      	bne.n	80068e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1d      	ldr	r2, [pc, #116]	@ (800695c <TIM_OC2_SetConfig+0x100>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006960 <TIM_OC2_SetConfig+0x104>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006964 <TIM_OC2_SetConfig+0x108>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006968 <TIM_OC2_SetConfig+0x10c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a19      	ldr	r2, [pc, #100]	@ (800696c <TIM_OC2_SetConfig+0x110>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d113      	bne.n	8006934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800699e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a27      	ldr	r2, [pc, #156]	@ (8006a6c <TIM_OC3_SetConfig+0xfc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC3_SetConfig+0x6a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a26      	ldr	r2, [pc, #152]	@ (8006a70 <TIM_OC3_SetConfig+0x100>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10d      	bne.n	80069f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <TIM_OC3_SetConfig+0xfc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <TIM_OC3_SetConfig+0x100>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1a      	ldr	r2, [pc, #104]	@ (8006a74 <TIM_OC3_SetConfig+0x104>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a19      	ldr	r2, [pc, #100]	@ (8006a78 <TIM_OC3_SetConfig+0x108>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <TIM_OC3_SetConfig+0x10c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d113      	bne.n	8006a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a18      	ldr	r2, [pc, #96]	@ (8006b40 <TIM_OC4_SetConfig+0xc0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	@ (8006b44 <TIM_OC4_SetConfig+0xc4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a16      	ldr	r2, [pc, #88]	@ (8006b48 <TIM_OC4_SetConfig+0xc8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a15      	ldr	r2, [pc, #84]	@ (8006b4c <TIM_OC4_SetConfig+0xcc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a14      	ldr	r2, [pc, #80]	@ (8006b50 <TIM_OC4_SetConfig+0xd0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d109      	bne.n	8006b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	019b      	lsls	r3, r3, #6
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800

08006b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	@ (8006c08 <TIM_OC5_SetConfig+0xb4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	@ (8006c0c <TIM_OC5_SetConfig+0xb8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	@ (8006c10 <TIM_OC5_SetConfig+0xbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <TIM_OC5_SetConfig+0xc0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a13      	ldr	r2, [pc, #76]	@ (8006c18 <TIM_OC5_SetConfig+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d109      	bne.n	8006be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	40013400 	.word	0x40013400
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800

08006c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	051b      	lsls	r3, r3, #20
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a18      	ldr	r2, [pc, #96]	@ (8006cd4 <TIM_OC6_SetConfig+0xb8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a17      	ldr	r2, [pc, #92]	@ (8006cd8 <TIM_OC6_SetConfig+0xbc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <TIM_OC6_SetConfig+0xc0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <TIM_OC6_SetConfig+0xc4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a14      	ldr	r2, [pc, #80]	@ (8006ce4 <TIM_OC6_SetConfig+0xc8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d109      	bne.n	8006cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800

08006ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0201 	bic.w	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 030a 	bic.w	r3, r3, #10
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	f023 0210 	bic.w	r2, r3, #16
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f043 0307 	orr.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e068      	b.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2e      	ldr	r2, [pc, #184]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2d      	ldr	r2, [pc, #180]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1b      	ldr	r2, [pc, #108]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a13      	ldr	r2, [pc, #76]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000

08006f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e040      	b.n	8006ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc fa78 	bl	8003480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	@ 0x24
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0201 	bic.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fae0 	bl	8007574 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f825 	bl	8007004 <UART_SetConfig>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e01b      	b.n	8006ffc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb5f 	bl	80076b8 <UART_CheckIdleState>
 8006ffa:	4603      	mov	r3, r0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007008:	b08a      	sub	sp, #40	@ 0x28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	431a      	orrs	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	4313      	orrs	r3, r2
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4ba4      	ldr	r3, [pc, #656]	@ (80072c4 <UART_SetConfig+0x2c0>)
 8007034:	4013      	ands	r3, r2
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800703c:	430b      	orrs	r3, r1
 800703e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a99      	ldr	r2, [pc, #612]	@ (80072c8 <UART_SetConfig+0x2c4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706c:	4313      	orrs	r3, r2
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007080:	430a      	orrs	r2, r1
 8007082:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a90      	ldr	r2, [pc, #576]	@ (80072cc <UART_SetConfig+0x2c8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d126      	bne.n	80070dc <UART_SetConfig+0xd8>
 800708e:	4b90      	ldr	r3, [pc, #576]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d81b      	bhi.n	80070d4 <UART_SetConfig+0xd0>
 800709c:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <UART_SetConfig+0xa0>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e116      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e112      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e10e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e10a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e106      	b.n	80072ea <UART_SetConfig+0x2e6>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a7c      	ldr	r2, [pc, #496]	@ (80072d4 <UART_SetConfig+0x2d0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d138      	bne.n	8007158 <UART_SetConfig+0x154>
 80070e6:	4b7a      	ldr	r3, [pc, #488]	@ (80072d0 <UART_SetConfig+0x2cc>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	f003 030c 	and.w	r3, r3, #12
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d82d      	bhi.n	8007150 <UART_SetConfig+0x14c>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0xf8>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007141 	.word	0x08007141
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007139 	.word	0x08007139
 8007120:	08007151 	.word	0x08007151
 8007124:	08007151 	.word	0x08007151
 8007128:	08007151 	.word	0x08007151
 800712c:	08007149 	.word	0x08007149
 8007130:	2300      	movs	r3, #0
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007136:	e0d8      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713e:	e0d4      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007146:	e0d0      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714e:	e0cc      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007156:	e0c8      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <UART_SetConfig+0x2d4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d125      	bne.n	80071ae <UART_SetConfig+0x1aa>
 8007162:	4b5b      	ldr	r3, [pc, #364]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800716c:	2b30      	cmp	r3, #48	@ 0x30
 800716e:	d016      	beq.n	800719e <UART_SetConfig+0x19a>
 8007170:	2b30      	cmp	r3, #48	@ 0x30
 8007172:	d818      	bhi.n	80071a6 <UART_SetConfig+0x1a2>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d00a      	beq.n	800718e <UART_SetConfig+0x18a>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d814      	bhi.n	80071a6 <UART_SetConfig+0x1a2>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <UART_SetConfig+0x182>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d008      	beq.n	8007196 <UART_SetConfig+0x192>
 8007184:	e00f      	b.n	80071a6 <UART_SetConfig+0x1a2>
 8007186:	2300      	movs	r3, #0
 8007188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718c:	e0ad      	b.n	80072ea <UART_SetConfig+0x2e6>
 800718e:	2302      	movs	r3, #2
 8007190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007194:	e0a9      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007196:	2304      	movs	r3, #4
 8007198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719c:	e0a5      	b.n	80072ea <UART_SetConfig+0x2e6>
 800719e:	2308      	movs	r3, #8
 80071a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a4:	e0a1      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071a6:	2310      	movs	r3, #16
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ac:	e09d      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a4a      	ldr	r2, [pc, #296]	@ (80072dc <UART_SetConfig+0x2d8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d125      	bne.n	8007204 <UART_SetConfig+0x200>
 80071b8:	4b45      	ldr	r3, [pc, #276]	@ (80072d0 <UART_SetConfig+0x2cc>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c4:	d016      	beq.n	80071f4 <UART_SetConfig+0x1f0>
 80071c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c8:	d818      	bhi.n	80071fc <UART_SetConfig+0x1f8>
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d00a      	beq.n	80071e4 <UART_SetConfig+0x1e0>
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d814      	bhi.n	80071fc <UART_SetConfig+0x1f8>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <UART_SetConfig+0x1d8>
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d008      	beq.n	80071ec <UART_SetConfig+0x1e8>
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x1f8>
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e082      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e07e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f2:	e07a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e076      	b.n	80072ea <UART_SetConfig+0x2e6>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e072      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a35      	ldr	r2, [pc, #212]	@ (80072e0 <UART_SetConfig+0x2dc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d12a      	bne.n	8007264 <UART_SetConfig+0x260>
 800720e:	4b30      	ldr	r3, [pc, #192]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800721c:	d01a      	beq.n	8007254 <UART_SetConfig+0x250>
 800721e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007222:	d81b      	bhi.n	800725c <UART_SetConfig+0x258>
 8007224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007228:	d00c      	beq.n	8007244 <UART_SetConfig+0x240>
 800722a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800722e:	d815      	bhi.n	800725c <UART_SetConfig+0x258>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <UART_SetConfig+0x238>
 8007234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007238:	d008      	beq.n	800724c <UART_SetConfig+0x248>
 800723a:	e00f      	b.n	800725c <UART_SetConfig+0x258>
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007242:	e052      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724a:	e04e      	b.n	80072ea <UART_SetConfig+0x2e6>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007252:	e04a      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e046      	b.n	80072ea <UART_SetConfig+0x2e6>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e042      	b.n	80072ea <UART_SetConfig+0x2e6>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <UART_SetConfig+0x2c4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d13a      	bne.n	80072e4 <UART_SetConfig+0x2e0>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <UART_SetConfig+0x2cc>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727c:	d01a      	beq.n	80072b4 <UART_SetConfig+0x2b0>
 800727e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007282:	d81b      	bhi.n	80072bc <UART_SetConfig+0x2b8>
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007288:	d00c      	beq.n	80072a4 <UART_SetConfig+0x2a0>
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d815      	bhi.n	80072bc <UART_SetConfig+0x2b8>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <UART_SetConfig+0x298>
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x2a8>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x2b8>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e022      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e01e      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b2:	e01a      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ba:	e016      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x2e6>
 80072c4:	efff69f3 	.word	0xefff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40004400 	.word	0x40004400
 80072d8:	40004800 	.word	0x40004800
 80072dc:	40004c00 	.word	0x40004c00
 80072e0:	40005000 	.word	0x40005000
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a9f      	ldr	r2, [pc, #636]	@ (800756c <UART_SetConfig+0x568>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d17a      	bne.n	80073ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d824      	bhi.n	8007346 <UART_SetConfig+0x342>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <UART_SetConfig+0x300>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007329 	.word	0x08007329
 8007308:	08007347 	.word	0x08007347
 800730c:	08007331 	.word	0x08007331
 8007310:	08007347 	.word	0x08007347
 8007314:	08007337 	.word	0x08007337
 8007318:	08007347 	.word	0x08007347
 800731c:	08007347 	.word	0x08007347
 8007320:	08007347 	.word	0x08007347
 8007324:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007328:	f7fd ffec 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 800732c:	61f8      	str	r0, [r7, #28]
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b8f      	ldr	r3, [pc, #572]	@ (8007570 <UART_SetConfig+0x56c>)
 8007332:	61fb      	str	r3, [r7, #28]
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fd ff4d 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800733a:	61f8      	str	r0, [r7, #28]
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	61fb      	str	r3, [r7, #28]
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80fb 	beq.w	8007550 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	429a      	cmp	r2, r3
 8007368:	d305      	bcc.n	8007376 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d903      	bls.n	800737e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800737c:	e0e8      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	461c      	mov	r4, r3
 8007384:	4615      	mov	r5, r2
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	022b      	lsls	r3, r5, #8
 8007390:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007394:	0222      	lsls	r2, r4, #8
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	0849      	lsrs	r1, r1, #1
 800739c:	2000      	movs	r0, #0
 800739e:	4688      	mov	r8, r1
 80073a0:	4681      	mov	r9, r0
 80073a2:	eb12 0a08 	adds.w	sl, r2, r8
 80073a6:	eb43 0b09 	adc.w	fp, r3, r9
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f8 ff04 	bl	80001c8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ce:	d308      	bcc.n	80073e2 <UART_SetConfig+0x3de>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d6:	d204      	bcs.n	80073e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	60da      	str	r2, [r3, #12]
 80073e0:	e0b6      	b.n	8007550 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073e8:	e0b2      	b.n	8007550 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f2:	d15e      	bne.n	80074b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80073f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x44a>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x400>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd ff6c 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fd ff7e 	bl	8005330 <HAL_RCC_GetPCLK2Freq>
 8007434:	61f8      	str	r0, [r7, #28]
        break;
 8007436:	e010      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b4d      	ldr	r3, [pc, #308]	@ (8007570 <UART_SetConfig+0x56c>)
 800743a:	61fb      	str	r3, [r7, #28]
        break;
 800743c:	e00d      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fd fec9 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8007442:	61f8      	str	r0, [r7, #28]
        break;
 8007444:	e009      	b.n	800745a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744a:	61fb      	str	r3, [r7, #28]
        break;
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d077      	beq.n	8007550 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	005a      	lsls	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	441a      	add	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b0f      	cmp	r3, #15
 800747a:	d916      	bls.n	80074aa <UART_SetConfig+0x4a6>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007482:	d212      	bcs.n	80074aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f023 030f 	bic.w	r3, r3, #15
 800748c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	b29b      	uxth	r3, r3
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	b29a      	uxth	r2, r3
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	4313      	orrs	r3, r2
 800749e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	8afa      	ldrh	r2, [r7, #22]
 80074a6:	60da      	str	r2, [r3, #12]
 80074a8:	e052      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074b0:	e04e      	b.n	8007550 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d827      	bhi.n	800750a <UART_SetConfig+0x506>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <UART_SetConfig+0x4bc>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074e5 	.word	0x080074e5
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	0800750b 	.word	0x0800750b
 80074d0:	080074fb 	.word	0x080074fb
 80074d4:	0800750b 	.word	0x0800750b
 80074d8:	0800750b 	.word	0x0800750b
 80074dc:	0800750b 	.word	0x0800750b
 80074e0:	08007503 	.word	0x08007503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e4:	f7fd ff0e 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 80074e8:	61f8      	str	r0, [r7, #28]
        break;
 80074ea:	e014      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ec:	f7fd ff20 	bl	8005330 <HAL_RCC_GetPCLK2Freq>
 80074f0:	61f8      	str	r0, [r7, #28]
        break;
 80074f2:	e010      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007570 <UART_SetConfig+0x56c>)
 80074f6:	61fb      	str	r3, [r7, #28]
        break;
 80074f8:	e00d      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fa:	f7fd fe6b 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 80074fe:	61f8      	str	r0, [r7, #28]
        break;
 8007500:	e009      	b.n	8007516 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007506:	61fb      	str	r3, [r7, #28]
        break;
 8007508:	e005      	b.n	8007516 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007514:	bf00      	nop
    }

    if (pclk != 0U)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d019      	beq.n	8007550 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	085a      	lsrs	r2, r3, #1
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d909      	bls.n	800754a <UART_SetConfig+0x546>
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800753c:	d205      	bcs.n	800754a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e002      	b.n	8007550 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800755c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007560:	4618      	mov	r0, r3
 8007562:	3728      	adds	r7, #40	@ 0x28
 8007564:	46bd      	mov	sp, r7
 8007566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756a:	bf00      	nop
 800756c:	40008000 	.word	0x40008000
 8007570:	00f42400 	.word	0x00f42400

08007574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01a      	beq.n	800768a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007672:	d10a      	bne.n	800768a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	605a      	str	r2, [r3, #4]
  }
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b098      	sub	sp, #96	@ 0x60
 80076bc:	af02      	add	r7, sp, #8
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076c8:	f7fc f830 	bl	800372c <HAL_GetTick>
 80076cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d12e      	bne.n	800773a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e4:	2200      	movs	r2, #0
 80076e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f88c 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d021      	beq.n	800773a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800770a:	653b      	str	r3, [r7, #80]	@ 0x50
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007714:	647b      	str	r3, [r7, #68]	@ 0x44
 8007716:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800771a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e6      	bne.n	80076f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e062      	b.n	8007800 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b04      	cmp	r3, #4
 8007746:	d149      	bne.n	80077dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f856 	bl	8007808 <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03c      	beq.n	80077dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	623b      	str	r3, [r7, #32]
   return(result);
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007780:	633b      	str	r3, [r7, #48]	@ 0x30
 8007782:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b4:	61fa      	str	r2, [r7, #28]
 80077b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	69b9      	ldr	r1, [r7, #24]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	617b      	str	r3, [r7, #20]
   return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e011      	b.n	8007800 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3758      	adds	r7, #88	@ 0x58
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007818:	e04f      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d04b      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007822:	f7fb ff83 	bl	800372c <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	429a      	cmp	r2, r3
 8007830:	d302      	bcc.n	8007838 <UART_WaitOnFlagUntilTimeout+0x30>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e04e      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d037      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b80      	cmp	r3, #128	@ 0x80
 800784e:	d034      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d031      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d110      	bne.n	8007886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2208      	movs	r2, #8
 800786a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f838 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2208      	movs	r2, #8
 8007876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e029      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007894:	d111      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800789e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f81e 	bl	80078e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e00f      	b.n	80078da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4013      	ands	r3, r2
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d0a0      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b095      	sub	sp, #84	@ 0x54
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007908:	643b      	str	r3, [r7, #64]	@ 0x40
 800790a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800790e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	61fb      	str	r3, [r7, #28]
   return(result);
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800793c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007954:	2b01      	cmp	r3, #1
 8007956:	d118      	bne.n	800798a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	60bb      	str	r3, [r7, #8]
   return(result);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	647b      	str	r3, [r7, #68]	@ 0x44
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6979      	ldr	r1, [r7, #20]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	613b      	str	r3, [r7, #16]
   return(result);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e6      	bne.n	8007958 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800799e:	bf00      	nop
 80079a0:	3754      	adds	r7, #84	@ 0x54
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <memset>:
 80079aa:	4402      	add	r2, r0
 80079ac:	4603      	mov	r3, r0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d100      	bne.n	80079b4 <memset+0xa>
 80079b2:	4770      	bx	lr
 80079b4:	f803 1b01 	strb.w	r1, [r3], #1
 80079b8:	e7f9      	b.n	80079ae <memset+0x4>
	...

080079bc <__libc_init_array>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4d0d      	ldr	r5, [pc, #52]	@ (80079f4 <__libc_init_array+0x38>)
 80079c0:	4c0d      	ldr	r4, [pc, #52]	@ (80079f8 <__libc_init_array+0x3c>)
 80079c2:	1b64      	subs	r4, r4, r5
 80079c4:	10a4      	asrs	r4, r4, #2
 80079c6:	2600      	movs	r6, #0
 80079c8:	42a6      	cmp	r6, r4
 80079ca:	d109      	bne.n	80079e0 <__libc_init_array+0x24>
 80079cc:	4d0b      	ldr	r5, [pc, #44]	@ (80079fc <__libc_init_array+0x40>)
 80079ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007a00 <__libc_init_array+0x44>)
 80079d0:	f000 f826 	bl	8007a20 <_init>
 80079d4:	1b64      	subs	r4, r4, r5
 80079d6:	10a4      	asrs	r4, r4, #2
 80079d8:	2600      	movs	r6, #0
 80079da:	42a6      	cmp	r6, r4
 80079dc:	d105      	bne.n	80079ea <__libc_init_array+0x2e>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e4:	4798      	blx	r3
 80079e6:	3601      	adds	r6, #1
 80079e8:	e7ee      	b.n	80079c8 <__libc_init_array+0xc>
 80079ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ee:	4798      	blx	r3
 80079f0:	3601      	adds	r6, #1
 80079f2:	e7f2      	b.n	80079da <__libc_init_array+0x1e>
 80079f4:	0800ca88 	.word	0x0800ca88
 80079f8:	0800ca88 	.word	0x0800ca88
 80079fc:	0800ca88 	.word	0x0800ca88
 8007a00:	0800ca8c 	.word	0x0800ca8c

08007a04 <memcpy>:
 8007a04:	440a      	add	r2, r1
 8007a06:	4291      	cmp	r1, r2
 8007a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a0c:	d100      	bne.n	8007a10 <memcpy+0xc>
 8007a0e:	4770      	bx	lr
 8007a10:	b510      	push	{r4, lr}
 8007a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a1a:	4291      	cmp	r1, r2
 8007a1c:	d1f9      	bne.n	8007a12 <memcpy+0xe>
 8007a1e:	bd10      	pop	{r4, pc}

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

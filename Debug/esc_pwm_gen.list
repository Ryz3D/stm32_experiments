
esc_pwm_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000811c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005048  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2ec  0800d2ec  00010100  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f4  0800d2f4  00010100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f4  0800d2f4  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2f8  0800d2f8  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001100  20000000  0800d2fc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b70  20001100  0800e3fc  00010100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015c70  0800e3fc  00010c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001429f  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f98  00000000  00000000  000243cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027e08  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017504  00000000  00000000  00050430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f4f1a  00000000  00000000  00067934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0015c84e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e50  00000000  00000000  0015c891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd0  00000000  00000000  0015d6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001623b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001100 	.word	0x20001100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800828c 	.word	0x0800828c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001104 	.word	0x20001104
 80001c4:	0800828c 	.word	0x0800828c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <cia_read>:
void gpio_write(uint8_t pin, uint8_t state)
{
}

int8_t cia_read(uint8_t addr_off)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	if (addr_off == 0x00)
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d103      	bne.n	80004d0 <cia_read+0x18>
		return port_a;
 80004c8:	4b39      	ldr	r3, [pc, #228]	@ (80005b0 <cia_read+0xf8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	e06a      	b.n	80005a6 <cia_read+0xee>
	else if (addr_off == 0x01)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d15b      	bne.n	800058e <cia_read+0xd6>
	{
		uint8_t port_b = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

		port_b |= gpio_read_row(3) << 3;
 80004da:	2003      	movs	r0, #3
 80004dc:	f002 fd7e 	bl	8002fdc <gpio_read_row>
 80004e0:	4603      	mov	r3, r0
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(6) << 6;
 80004f0:	2006      	movs	r0, #6
 80004f2:	f002 fd73 	bl	8002fdc <gpio_read_row>
 80004f6:	4603      	mov	r3, r0
 80004f8:	019b      	lsls	r3, r3, #6
 80004fa:	b25a      	sxtb	r2, r3
 80004fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000500:	4313      	orrs	r3, r2
 8000502:	b25b      	sxtb	r3, r3
 8000504:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(5) << 5;
 8000506:	2005      	movs	r0, #5
 8000508:	f002 fd68 	bl	8002fdc <gpio_read_row>
 800050c:	4603      	mov	r3, r0
 800050e:	015b      	lsls	r3, r3, #5
 8000510:	b25a      	sxtb	r2, r3
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4313      	orrs	r3, r2
 8000518:	b25b      	sxtb	r3, r3
 800051a:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(4) << 4;
 800051c:	2004      	movs	r0, #4
 800051e:	f002 fd5d 	bl	8002fdc <gpio_read_row>
 8000522:	4603      	mov	r3, r0
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	b25a      	sxtb	r2, r3
 8000528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800052c:	4313      	orrs	r3, r2
 800052e:	b25b      	sxtb	r3, r3
 8000530:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(7) << 7;
 8000532:	2007      	movs	r0, #7
 8000534:	f002 fd52 	bl	8002fdc <gpio_read_row>
 8000538:	4603      	mov	r3, r0
 800053a:	01db      	lsls	r3, r3, #7
 800053c:	b25a      	sxtb	r2, r3
 800053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000542:	4313      	orrs	r3, r2
 8000544:	b25b      	sxtb	r3, r3
 8000546:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(2) << 2;
 8000548:	2002      	movs	r0, #2
 800054a:	f002 fd47 	bl	8002fdc <gpio_read_row>
 800054e:	4603      	mov	r3, r0
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000558:	4313      	orrs	r3, r2
 800055a:	b25b      	sxtb	r3, r3
 800055c:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(1) << 1;
 800055e:	2001      	movs	r0, #1
 8000560:	f002 fd3c 	bl	8002fdc <gpio_read_row>
 8000564:	4603      	mov	r3, r0
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	b25a      	sxtb	r2, r3
 800056a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800056e:	4313      	orrs	r3, r2
 8000570:	b25b      	sxtb	r3, r3
 8000572:	73fb      	strb	r3, [r7, #15]
		port_b |= gpio_read_row(0) << 0;
 8000574:	2000      	movs	r0, #0
 8000576:	f002 fd31 	bl	8002fdc <gpio_read_row>
 800057a:	4603      	mov	r3, r0
 800057c:	b25a      	sxtb	r2, r3
 800057e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000582:	4313      	orrs	r3, r2
 8000584:	b25b      	sxtb	r3, r3
 8000586:	73fb      	strb	r3, [r7, #15]

		return port_b;
 8000588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058c:	e00b      	b.n	80005a6 <cia_read+0xee>
	}
	else if (addr_off == 0x02)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d102      	bne.n	800059a <cia_read+0xe2>
		return 0xff;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	e005      	b.n	80005a6 <cia_read+0xee>
	else if (addr_off == 0x03)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d101      	bne.n	80005a4 <cia_read+0xec>
		return 0x00;
 80005a0:	2300      	movs	r3, #0
 80005a2:	e000      	b.n	80005a6 <cia_read+0xee>
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000111c 	.word	0x2000111c

080005b4 <cia_write>:

void cia_write(uint8_t addr_off, int8_t d)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	if (addr_off == 0x00)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d155      	bne.n	8000676 <cia_write+0xc2>
	{
		port_a = d;
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <cia_write+0xcc>)
 80005ce:	701a      	strb	r2, [r3, #0]

		gpio_write_col(0, (port_a >> 0) & 1);
 80005d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <cia_write+0xcc>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fd1d 	bl	800301c <gpio_write_col>
		gpio_write_col(6, (port_a >> 6) & 1);
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <cia_write+0xcc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	099b      	lsrs	r3, r3, #6
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	2006      	movs	r0, #6
 80005f4:	f002 fd12 	bl	800301c <gpio_write_col>
		gpio_write_col(5, (port_a >> 5) & 1);
 80005f8:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <cia_write+0xcc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	2005      	movs	r0, #5
 800060a:	f002 fd07 	bl	800301c <gpio_write_col>
		gpio_write_col(4, (port_a >> 4) & 1);
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <cia_write+0xcc>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	091b      	lsrs	r3, r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	2004      	movs	r0, #4
 8000620:	f002 fcfc 	bl	800301c <gpio_write_col>
		gpio_write_col(3, (port_a >> 3) & 1);
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <cia_write+0xcc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	2003      	movs	r0, #3
 8000636:	f002 fcf1 	bl	800301c <gpio_write_col>
		gpio_write_col(2, (port_a >> 2) & 1);
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <cia_write+0xcc>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	2002      	movs	r0, #2
 800064c:	f002 fce6 	bl	800301c <gpio_write_col>
		gpio_write_col(1, (port_a >> 1) & 1);
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <cia_write+0xcc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	085b      	lsrs	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2001      	movs	r0, #1
 8000662:	f002 fcdb 	bl	800301c <gpio_write_col>
		gpio_write_col(7, (port_a >> 7) & 1);
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <cia_write+0xcc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	09db      	lsrs	r3, r3, #7
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	2007      	movs	r0, #7
 8000672:	f002 fcd3 	bl	800301c <gpio_write_col>
	}
	else if (addr_off == 0x02)
		; // pin_mode(d, 9);
	else if (addr_off == 0x03)
		; // pin_mode(d, 1);
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000111c 	.word	0x2000111c

08000684 <reset>:
bool fN, fV, fB, fD, fI, fZ, fC;
uint8_t stack_pointer;
int8_t ins_buf[3];

void reset()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	a = x = y = 0;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <reset+0x6c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <reset+0x6c>)
 8000690:	f993 2000 	ldrsb.w	r2, [r3]
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <reset+0x70>)
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <reset+0x70>)
 800069a:	f993 2000 	ldrsb.w	r2, [r3]
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <reset+0x74>)
 80006a0:	701a      	strb	r2, [r3, #0]
	fN = fV = fB = fD = fZ = fC = 0;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <reset+0x78>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <reset+0x78>)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <reset+0x7c>)
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <reset+0x7c>)
 80006b2:	781a      	ldrb	r2, [r3, #0]
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <reset+0x80>)
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <reset+0x80>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <reset+0x84>)
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <reset+0x84>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <reset+0x88>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <reset+0x88>)
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <reset+0x8c>)
 80006ce:	701a      	strb	r2, [r3, #0]
	fI = 1;
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <reset+0x90>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
	stack_pointer = 0xff;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <reset+0x94>)
 80006d8:	22ff      	movs	r2, #255	@ 0xff
 80006da:	701a      	strb	r2, [r3, #0]
	pc = mem_read16(0xfffc);
 80006dc:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 80006e0:	f001 fde8 	bl	80022b4 <mem_read16>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <reset+0x98>)
 80006ea:	801a      	strh	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20001122 	.word	0x20001122
 80006f4:	20001121 	.word	0x20001121
 80006f8:	20001120 	.word	0x20001120
 80006fc:	20001129 	.word	0x20001129
 8000700:	20001128 	.word	0x20001128
 8000704:	20001126 	.word	0x20001126
 8000708:	20001125 	.word	0x20001125
 800070c:	20001124 	.word	0x20001124
 8000710:	20001123 	.word	0x20001123
 8000714:	20001127 	.word	0x20001127
 8000718:	2000112a 	.word	0x2000112a
 800071c:	2000111e 	.word	0x2000111e

08000720 <irq>:

void irq()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	if (!fI)
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <irq+0x98>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d03f      	beq.n	80007b2 <irq+0x92>
	{
		s_push16(pc);
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <irq+0x9c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f8e9 	bl	800090e <s_push16>
		fB = 0;
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <irq+0xa0>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <irq+0xa4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	b25a      	sxtb	r2, r3
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <irq+0xa8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	019b      	lsls	r3, r3, #6
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	b25a      	sxtb	r2, r3
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <irq+0xa0>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25a      	sxtb	r2, r3
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <irq+0xac>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25a      	sxtb	r2, r3
 8000774:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <irq+0x98>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b25a      	sxtb	r2, r3
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <irq+0xb0>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b25b      	sxtb	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b25a      	sxtb	r2, r3
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <irq+0xb4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b25b      	sxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f888 	bl	80008ac <s_push>
		fI = 1;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <irq+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		pc = mem_read16(0xfffe);
 80007a2:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 80007a6:	f001 fd85 	bl	80022b4 <mem_read16>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <irq+0x9c>)
 80007b0:	801a      	strh	r2, [r3, #0]
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20001127 	.word	0x20001127
 80007bc:	2000111e 	.word	0x2000111e
 80007c0:	20001125 	.word	0x20001125
 80007c4:	20001123 	.word	0x20001123
 80007c8:	20001124 	.word	0x20001124
 80007cc:	20001126 	.word	0x20001126
 80007d0:	20001128 	.word	0x20001128
 80007d4:	20001129 	.word	0x20001129

080007d8 <nmi>:

void nmi()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	s_push16(pc);
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <nmi+0x84>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f894 	bl	800090e <s_push16>
	fB = 0;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <nmi+0x88>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <nmi+0x8c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	01db      	lsls	r3, r3, #7
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <nmi+0x90>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	b25a      	sxtb	r2, r3
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <nmi+0x88>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	b25b      	sxtb	r3, r3
 800080e:	4313      	orrs	r3, r2
 8000810:	b25a      	sxtb	r2, r3
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <nmi+0x94>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25a      	sxtb	r2, r3
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <nmi+0x98>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b25a      	sxtb	r2, r3
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <nmi+0x9c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	b25b      	sxtb	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b25a      	sxtb	r2, r3
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <nmi+0xa0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b25b      	sxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f833 	bl	80008ac <s_push>
	pc = mem_read16(0xfffa);
 8000846:	f64f 70fa 	movw	r0, #65530	@ 0xfffa
 800084a:	f001 fd33 	bl	80022b4 <mem_read16>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b02      	ldr	r3, [pc, #8]	@ (800085c <nmi+0x84>)
 8000854:	801a      	strh	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000111e 	.word	0x2000111e
 8000860:	20001125 	.word	0x20001125
 8000864:	20001123 	.word	0x20001123
 8000868:	20001124 	.word	0x20001124
 800086c:	20001126 	.word	0x20001126
 8000870:	20001127 	.word	0x20001127
 8000874:	20001128 	.word	0x20001128
 8000878:	20001129 	.word	0x20001129

0800087c <s_pop>:

uint8_t s_pop()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	return stack[++stack_pointer];
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <s_pop+0x28>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <s_pop+0x28>)
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <s_pop+0x28>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <s_pop+0x2c>)
 8000894:	569b      	ldrsb	r3, [r3, r2]
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2000112a 	.word	0x2000112a
 80008a8:	20001234 	.word	0x20001234

080008ac <s_push>:

void s_push(int8_t d)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	stack[stack_pointer--] = d;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <s_push+0x2c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	b2d1      	uxtb	r1, r2
 80008be:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <s_push+0x2c>)
 80008c0:	7011      	strb	r1, [r2, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <s_push+0x30>)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	5453      	strb	r3, [r2, r1]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	2000112a 	.word	0x2000112a
 80008dc:	20001234 	.word	0x20001234

080008e0 <s_pop16>:

uint16_t s_pop16()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	uint8_t a = s_pop();
 80008e6:	f7ff ffc9 	bl	800087c <s_pop>
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	uint8_t b = s_pop();
 80008ee:	f7ff ffc5 	bl	800087c <s_pop>
 80008f2:	4603      	mov	r3, r0
 80008f4:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t)b << 8) | (uint16_t)a;
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21b      	sxth	r3, r3
 8000904:	b29b      	uxth	r3, r3
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <s_push16>:

void s_push16(uint16_t d)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	80fb      	strh	r3, [r7, #6]
	s_push(d >> 8);
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffc3 	bl	80008ac <s_push>
	s_push(d & 0xff);
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffbe 	bl	80008ac <s_push>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <load_ins_buf>:

void load_ins_buf(uint8_t len)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e010      	b.n	800096a <load_ins_buf+0x32>
		ins_buf[i] = mem_read(pc + i);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <load_ins_buf+0x54>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	7bfc      	ldrb	r4, [r7, #15]
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fbea 	bl	8002130 <mem_read>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <load_ins_buf+0x58>)
 8000962:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < len; i++)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	429a      	cmp	r2, r3
 8000970:	d3ea      	bcc.n	8000948 <load_ins_buf+0x10>
	pc += len;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <load_ins_buf+0x54>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b03      	ldr	r3, [pc, #12]	@ (800098c <load_ins_buf+0x54>)
 8000980:	801a      	strh	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bd90      	pop	{r4, r7, pc}
 800098a:	bf00      	nop
 800098c:	2000111e 	.word	0x2000111e
 8000990:	2000112c 	.word	0x2000112c

08000994 <get_operand>:

bool get_operand(int8_t *op, uint16_t *op_addr, uint8_t ins, uint8_t *variants)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71fb      	strb	r3, [r7, #7]
	if (ins == 0x00)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <get_operand+0x1a>
		return 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e120      	b.n	8000bf0 <get_operand+0x25c>

	if (ins == variants[0])
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d108      	bne.n	80009ca <get_operand+0x36>
	{
		// immediate
		load_ins_buf(2);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f7ff ffbd 	bl	8000938 <load_ins_buf>
		*op = ins_buf[1];
 80009be:	4b8e      	ldr	r3, [pc, #568]	@ (8000bf8 <get_operand+0x264>)
 80009c0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e111      	b.n	8000bee <get_operand+0x25a>
	}
	else
	{
		if (ins == variants[1])
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d10a      	bne.n	80009ec <get_operand+0x58>
		{
			// zeropage
			load_ins_buf(2);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff ffae 	bl	8000938 <load_ins_buf>
			*op_addr = (uint8_t)ins_buf[1];
 80009dc:	4b86      	ldr	r3, [pc, #536]	@ (8000bf8 <get_operand+0x264>)
 80009de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	e0f7      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[2])
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3302      	adds	r3, #2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d110      	bne.n	8000a1a <get_operand+0x86>
		{
			// x-indexed zeropage
			load_ins_buf(2);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff ff9d 	bl	8000938 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)x);
 80009fe:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf8 <get_operand+0x264>)
 8000a00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b7d      	ldr	r3, [pc, #500]	@ (8000bfc <get_operand+0x268>)
 8000a08:	f993 3000 	ldrsb.w	r3, [r3]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	801a      	strh	r2, [r3, #0]
 8000a18:	e0e0      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[3])
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	3303      	adds	r3, #3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d110      	bne.n	8000a48 <get_operand+0xb4>
		{
			// y-indexed zeropage
			load_ins_buf(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ff86 	bl	8000938 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)y);
 8000a2c:	4b72      	ldr	r3, [pc, #456]	@ (8000bf8 <get_operand+0x264>)
 8000a2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b72      	ldr	r3, [pc, #456]	@ (8000c00 <get_operand+0x26c>)
 8000a36:	f993 3000 	ldrsb.w	r3, [r3]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	801a      	strh	r2, [r3, #0]
 8000a46:	e0c9      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[4])
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d116      	bne.n	8000a82 <get_operand+0xee>
		{
			// x-indexed zeropage indirect
			load_ins_buf(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff ff6f 	bl	8000938 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1] + (uint8_t)x;
 8000a5a:	4b67      	ldr	r3, [pc, #412]	@ (8000bf8 <get_operand+0x264>)
 8000a5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b66      	ldr	r3, [pc, #408]	@ (8000bfc <get_operand+0x268>)
 8000a64:	f993 3000 	ldrsb.w	r3, [r3]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	753b      	strb	r3, [r7, #20]
			*op_addr = mem_read16(op_addr_addr);
 8000a6e:	7d3b      	ldrb	r3, [r7, #20]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fc1e 	bl	80022b4 <mem_read16>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	801a      	strh	r2, [r3, #0]
 8000a80:	e0ac      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[5])
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	3305      	adds	r3, #5
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d116      	bne.n	8000abc <get_operand+0x128>
		{
			// y-indexed zeropage indirect
			load_ins_buf(2);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff ff52 	bl	8000938 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1];
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <get_operand+0x264>)
 8000a96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a9a:	757b      	strb	r3, [r7, #21]
			*op_addr = mem_read16(op_addr_addr) + (uint8_t)y;
 8000a9c:	7d7b      	ldrb	r3, [r7, #21]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fc07 	bl	80022b4 <mem_read16>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b55      	ldr	r3, [pc, #340]	@ (8000c00 <get_operand+0x26c>)
 8000aac:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	801a      	strh	r2, [r3, #0]
 8000aba:	e08f      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[6])
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3306      	adds	r3, #6
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d113      	bne.n	8000af0 <get_operand+0x15c>
		{
			// absolute
			load_ins_buf(3);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f7ff ff35 	bl	8000938 <load_ins_buf>
			*op_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 8000ace:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <get_operand+0x264>)
 8000ad0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b47      	ldr	r3, [pc, #284]	@ (8000bf8 <get_operand+0x264>)
 8000adc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	801a      	strh	r2, [r3, #0]
 8000aee:	e075      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[7])
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3307      	adds	r3, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d119      	bne.n	8000b30 <get_operand+0x19c>
		{
			// x-indexed absolute
			load_ins_buf(3);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f7ff ff1b 	bl	8000938 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)x;
 8000b02:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <get_operand+0x264>)
 8000b04:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <get_operand+0x264>)
 8000b10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4a37      	ldr	r2, [pc, #220]	@ (8000bfc <get_operand+0x268>)
 8000b20:	f992 2000 	ldrsb.w	r2, [r2]
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	4413      	add	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	e055      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[8])
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	3308      	adds	r3, #8
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d119      	bne.n	8000b70 <get_operand+0x1dc>
		{
			// y-indexed absolute
			load_ins_buf(3);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f7ff fefb 	bl	8000938 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)y;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <get_operand+0x264>)
 8000b44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <get_operand+0x264>)
 8000b50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4a28      	ldr	r2, [pc, #160]	@ (8000c00 <get_operand+0x26c>)
 8000b60:	f992 2000 	ldrsb.w	r2, [r2]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	4413      	add	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	801a      	strh	r2, [r3, #0]
 8000b6e:	e035      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[9])
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3309      	adds	r3, #9
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d119      	bne.n	8000bb0 <get_operand+0x21c>
		{
			// absolute indirect
			load_ins_buf(3);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f7ff fedb 	bl	8000938 <load_ins_buf>
			uint16_t op_addr_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <get_operand+0x264>)
 8000b84:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <get_operand+0x264>)
 8000b90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	82fb      	strh	r3, [r7, #22]
			*op_addr = mem_read16(op_addr_addr);
 8000b9e:	8afb      	ldrh	r3, [r7, #22]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fb87 	bl	80022b4 <mem_read16>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	e015      	b.n	8000bdc <get_operand+0x248>
		}
		else if (ins == variants[10])
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	330a      	adds	r3, #10
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d10d      	bne.n	8000bd8 <get_operand+0x244>
		{
			// relative
			load_ins_buf(2);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff febb 	bl	8000938 <load_ins_buf>
			*op_addr = pc + ins_buf[1];
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <get_operand+0x264>)
 8000bc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <get_operand+0x270>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	801a      	strh	r2, [r3, #0]
 8000bd6:	e001      	b.n	8000bdc <get_operand+0x248>
		}
		else
			return 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e009      	b.n	8000bf0 <get_operand+0x25c>

		*op = mem_read(*op_addr);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 faa5 	bl	8002130 <mem_read>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000112c 	.word	0x2000112c
 8000bfc:	20001121 	.word	0x20001121
 8000c00:	20001122 	.word	0x20001122
 8000c04:	2000111e 	.word	0x2000111e

08000c08 <exec_ora>:
	0xa0, 0xa4, 0xb4, 0x00, 0x00, 0x00, 0xac, 0xbc, 0x00, 0x00, 0x00 };
uint8_t v_sty[] = {
	0x00, 0x84, 0x94, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00 };

bool exec_ora(uint8_t ins, int8_t *res)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ora))
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	f107 000f 	add.w	r0, r7, #15
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <exec_ora+0x50>)
 8000c20:	490e      	ldr	r1, [pc, #56]	@ (8000c5c <exec_ora+0x54>)
 8000c22:	f7ff feb7 	bl	8000994 <get_operand>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00f      	beq.n	8000c4c <exec_ora+0x44>
	{
		*res = a |= op;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <exec_ora+0x58>)
 8000c2e:	f993 2000 	ldrsb.w	r2, [r3]
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <exec_ora+0x58>)
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <exec_ora+0x58>)
 8000c40:	f993 2000 	ldrsb.w	r2, [r3]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <exec_ora+0x46>
	}
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20001130 	.word	0x20001130
 8000c60:	20001120 	.word	0x20001120

08000c64 <exec_and>:

bool exec_and(uint8_t ins, int8_t *res)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_and))
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	f107 000f 	add.w	r0, r7, #15
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <exec_and+0x50>)
 8000c7c:	490e      	ldr	r1, [pc, #56]	@ (8000cb8 <exec_and+0x54>)
 8000c7e:	f7ff fe89 	bl	8000994 <get_operand>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00f      	beq.n	8000ca8 <exec_and+0x44>
	{
		*res = a &= op;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <exec_and+0x58>)
 8000c8a:	f993 2000 	ldrsb.w	r2, [r3]
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4013      	ands	r3, r2
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <exec_and+0x58>)
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <exec_and+0x58>)
 8000c9c:	f993 2000 	ldrsb.w	r2, [r3]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <exec_and+0x46>
	}
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20001130 	.word	0x20001130
 8000cbc:	20001120 	.word	0x20001120

08000cc0 <exec_eor>:

bool exec_eor(uint8_t ins, int8_t *res)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_eor))
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	f107 000f 	add.w	r0, r7, #15
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <exec_eor+0x50>)
 8000cd8:	490e      	ldr	r1, [pc, #56]	@ (8000d14 <exec_eor+0x54>)
 8000cda:	f7ff fe5b 	bl	8000994 <get_operand>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00f      	beq.n	8000d04 <exec_eor+0x44>
	{
		*res = a ^= op;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <exec_eor+0x58>)
 8000ce6:	f993 2000 	ldrsb.w	r2, [r3]
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4053      	eors	r3, r2
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <exec_eor+0x58>)
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <exec_eor+0x58>)
 8000cf8:	f993 2000 	ldrsb.w	r2, [r3]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	701a      	strb	r2, [r3, #0]
		return 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <exec_eor+0x46>
	}
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000018 	.word	0x20000018
 8000d14:	20001130 	.word	0x20001130
 8000d18:	20001120 	.word	0x20001120

08000d1c <setCV>:

int8_t setCV(int8_t a, int8_t b, bool sub)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
	int8_t res = a + (sub ? ~b : b) + fC;
 8000d2e:	797b      	ldrb	r3, [r7, #5]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <setCV+0x20>
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	e000      	b.n	8000d3e <setCV+0x22>
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	79fa      	ldrb	r2, [r7, #7]
 8000d40:	4413      	add	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4a20      	ldr	r2, [pc, #128]	@ (8000dc8 <setCV+0xac>)
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if (sub)
 8000d4e:	797b      	ldrb	r3, [r7, #5]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <setCV+0x40>
		b = -b;
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	425b      	negs	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	71bb      	strb	r3, [r7, #6]
	uint8_t ua = a, ub = b, ur = res;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	73bb      	strb	r3, [r7, #14]
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	737b      	strb	r3, [r7, #13]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	733b      	strb	r3, [r7, #12]
	fC = fC ? (ur <= ua) : (ur < ua);
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <setCV+0xac>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d007      	beq.n	8000d80 <setCV+0x64>
 8000d70:	7b3a      	ldrb	r2, [r7, #12]
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	bf94      	ite	ls
 8000d78:	2301      	movls	r3, #1
 8000d7a:	2300      	movhi	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	e006      	b.n	8000d8e <setCV+0x72>
 8000d80:	7b3a      	ldrb	r2, [r7, #12]
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	bf34      	ite	cc
 8000d88:	2301      	movcc	r3, #1
 8000d8a:	2300      	movcs	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <setCV+0xac>)
 8000d90:	7013      	strb	r3, [r2, #0]
	fV = (ua ^ ur) & (ub ^ ur) & (1 << 7);
 8000d92:	7bba      	ldrb	r2, [r7, #14]
 8000d94:	7b3b      	ldrb	r3, [r7, #12]
 8000d96:	4053      	eors	r3, r2
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7b79      	ldrb	r1, [r7, #13]
 8000d9c:	7b3b      	ldrb	r3, [r7, #12]
 8000d9e:	404b      	eors	r3, r1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4013      	ands	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <setCV+0xb0>)
 8000db6:	701a      	strb	r2, [r3, #0]
	return res;
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20001129 	.word	0x20001129
 8000dcc:	20001124 	.word	0x20001124

08000dd0 <exec_adc>:

bool exec_adc(uint8_t ins, int8_t *res)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_adc))
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	f107 000f 	add.w	r0, r7, #15
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <exec_adc+0x58>)
 8000de8:	4910      	ldr	r1, [pc, #64]	@ (8000e2c <exec_adc+0x5c>)
 8000dea:	f7ff fdd3 	bl	8000994 <get_operand>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <exec_adc+0x4c>
	{
		*res = a = setCV(a, op, 0);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <exec_adc+0x60>)
 8000df6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfa:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff8b 	bl	8000d1c <setCV>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <exec_adc+0x60>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <exec_adc+0x60>)
 8000e10:	f993 2000 	ldrsb.w	r2, [r3]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <exec_adc+0x4e>
	}
	return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000024 	.word	0x20000024
 8000e2c:	20001130 	.word	0x20001130
 8000e30:	20001120 	.word	0x20001120

08000e34 <exec_sbc>:

bool exec_sbc(uint8_t ins, int8_t *res)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_sbc))
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	f107 000f 	add.w	r0, r7, #15
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <exec_sbc+0x58>)
 8000e4c:	4910      	ldr	r1, [pc, #64]	@ (8000e90 <exec_sbc+0x5c>)
 8000e4e:	f7ff fda1 	bl	8000994 <get_operand>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <exec_sbc+0x4c>
	{
		*res = a = setCV(a, op, 1);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <exec_sbc+0x60>)
 8000e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5e:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff59 	bl	8000d1c <setCV>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <exec_sbc+0x60>)
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <exec_sbc+0x60>)
 8000e74:	f993 2000 	ldrsb.w	r2, [r3]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <exec_sbc+0x4e>
	}
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000030 	.word	0x20000030
 8000e90:	20001130 	.word	0x20001130
 8000e94:	20001120 	.word	0x20001120

08000e98 <exec_cmp>:

bool exec_cmp(uint8_t ins, int8_t *res)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cmp))
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	f107 000f 	add.w	r0, r7, #15
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <exec_cmp+0x68>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	@ (8000f04 <exec_cmp+0x6c>)
 8000eb2:	f7ff fd6f 	bl	8000994 <get_operand>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01b      	beq.n	8000ef4 <exec_cmp+0x5c>
	{
		*res = a - op;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <exec_cmp+0x70>)
 8000ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)a >= (uint8_t)op;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <exec_cmp+0x70>)
 8000ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	bf2c      	ite	cs
 8000ee6:	2301      	movcs	r3, #1
 8000ee8:	2300      	movcc	r3, #0
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <exec_cmp+0x74>)
 8000eee:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <exec_cmp+0x5e>
	}
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000003c 	.word	0x2000003c
 8000f04:	20001130 	.word	0x20001130
 8000f08:	20001120 	.word	0x20001120
 8000f0c:	20001129 	.word	0x20001129

08000f10 <exec_cpx>:

bool exec_cpx(uint8_t ins, int8_t *res)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpx))
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	f107 000f 	add.w	r0, r7, #15
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <exec_cpx+0x68>)
 8000f28:	4914      	ldr	r1, [pc, #80]	@ (8000f7c <exec_cpx+0x6c>)
 8000f2a:	f7ff fd33 	bl	8000994 <get_operand>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01b      	beq.n	8000f6c <exec_cpx+0x5c>
	{
		*res = x - op;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <exec_cpx+0x70>)
 8000f36:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)x >= (uint8_t)op;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <exec_cpx+0x70>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	bf2c      	ite	cs
 8000f5e:	2301      	movcs	r3, #1
 8000f60:	2300      	movcc	r3, #0
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <exec_cpx+0x74>)
 8000f66:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <exec_cpx+0x5e>
	}
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000048 	.word	0x20000048
 8000f7c:	20001130 	.word	0x20001130
 8000f80:	20001121 	.word	0x20001121
 8000f84:	20001129 	.word	0x20001129

08000f88 <exec_cpy>:

bool exec_cpy(uint8_t ins, int8_t *res)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpy))
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	f107 000f 	add.w	r0, r7, #15
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <exec_cpy+0x68>)
 8000fa0:	4914      	ldr	r1, [pc, #80]	@ (8000ff4 <exec_cpy+0x6c>)
 8000fa2:	f7ff fcf7 	bl	8000994 <get_operand>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <exec_cpy+0x5c>
	{
		*res = y - op;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <exec_cpy+0x70>)
 8000fae:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)y >= (uint8_t)op;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <exec_cpy+0x70>)
 8000fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	bf2c      	ite	cs
 8000fd6:	2301      	movcs	r3, #1
 8000fd8:	2300      	movcc	r3, #0
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <exec_cpy+0x74>)
 8000fde:	701a      	strb	r2, [r3, #0]
		return 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <exec_cpy+0x5e>
	}
	return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000054 	.word	0x20000054
 8000ff4:	20001130 	.word	0x20001130
 8000ff8:	20001122 	.word	0x20001122
 8000ffc:	20001129 	.word	0x20001129

08001000 <exec_dec>:

bool exec_dec(uint8_t ins, int8_t *res)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_dec))
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	f107 010c 	add.w	r1, r7, #12
 800101a:	f107 000f 	add.w	r0, r7, #15
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <exec_dec+0x58>)
 8001020:	f7ff fcb8 	bl	8000994 <get_operand>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d011      	beq.n	800104e <exec_dec+0x4e>
	{
		mem_write(op_addr, *res = op - 1);
 800102a:	89ba      	ldrh	r2, [r7, #12]
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b259      	sxtb	r1, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	7019      	strb	r1, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f993 3000 	ldrsb.w	r3, [r3]
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f001 f953 	bl	80022f0 <mem_write>
		return 1;
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <exec_dec+0x50>
	}
	return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000060 	.word	0x20000060

0800105c <exec_inc>:

bool exec_inc(uint8_t ins, int8_t *res)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_inc))
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	f107 000f 	add.w	r0, r7, #15
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <exec_inc+0x58>)
 800107c:	f7ff fc8a 	bl	8000994 <get_operand>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d011      	beq.n	80010aa <exec_inc+0x4e>
	{
		mem_write(op_addr, *res = op + 1);
 8001086:	89ba      	ldrh	r2, [r7, #12]
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3301      	adds	r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	b259      	sxtb	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	7019      	strb	r1, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f993 3000 	ldrsb.w	r3, [r3]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f001 f925 	bl	80022f0 <mem_write>
		return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <exec_inc+0x50>
	}
	return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000006c 	.word	0x2000006c

080010b8 <exec_asl>:

bool exec_asl(uint8_t ins, int8_t *res)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_asl))
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	f107 010c 	add.w	r1, r7, #12
 80010d2:	f107 000f 	add.w	r0, r7, #15
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <exec_asl+0x6c>)
 80010d8:	f7ff fc5c 	bl	8000994 <get_operand>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d01b      	beq.n	800111a <exec_asl+0x62>
	{
		fC = op >> 7;
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	11db      	asrs	r3, r3, #7
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <exec_asl+0x70>)
 80010f6:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op << 1);
 80010f8:	89ba      	ldrh	r2, [r7, #12]
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b259      	sxtb	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	7019      	strb	r1, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f993 3000 	ldrsb.w	r3, [r3]
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f001 f8ed 	bl	80022f0 <mem_write>
		return 1;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <exec_asl+0x64>
	}
	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000078 	.word	0x20000078
 8001128:	20001129 	.word	0x20001129

0800112c <exec_rol>:

bool exec_rol(uint8_t ins, int8_t *res)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_rol))
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	f107 010c 	add.w	r1, r7, #12
 8001146:	f107 000e 	add.w	r0, r7, #14
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <exec_rol+0x78>)
 800114c:	f7ff fc22 	bl	8000994 <get_operand>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d021      	beq.n	800119a <exec_rol+0x6e>
	{
		bool c_in = fC;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <exec_rol+0x7c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	73fb      	strb	r3, [r7, #15]
		fC = op >> 7;
 800115c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001160:	11db      	asrs	r3, r3, #7
 8001162:	b25b      	sxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <exec_rol+0x7c>)
 8001170:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op << 1) | (uint8_t)c_in);
 8001172:	89b8      	ldrh	r0, [r7, #12]
 8001174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b25a      	sxtb	r2, r3
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4313      	orrs	r3, r2
 8001184:	b25a      	sxtb	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f993 3000 	ldrsb.w	r3, [r3]
 8001190:	4619      	mov	r1, r3
 8001192:	f001 f8ad 	bl	80022f0 <mem_write>
		return 1;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <exec_rol+0x70>
	}
	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000084 	.word	0x20000084
 80011a8:	20001129 	.word	0x20001129

080011ac <exec_lsr>:

bool exec_lsr(uint8_t ins, int8_t *res)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_lsr))
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	f107 010c 	add.w	r1, r7, #12
 80011c6:	f107 000f 	add.w	r0, r7, #15
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <exec_lsr+0x70>)
 80011cc:	f7ff fbe2 	bl	8000994 <get_operand>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01d      	beq.n	8001212 <exec_lsr+0x66>
	{
		fC = op & 1;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <exec_lsr+0x74>)
 80011ec:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op >> 1);
 80011ee:	89ba      	ldrh	r2, [r7, #12]
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b259      	sxtb	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	7019      	strb	r1, [r3, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f993 3000 	ldrsb.w	r3, [r3]
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f001 f871 	bl	80022f0 <mem_write>
		return 1;
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <exec_lsr+0x68>
	}
	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000090 	.word	0x20000090
 8001220:	20001129 	.word	0x20001129

08001224 <exec_ror>:

bool exec_ror(uint8_t ins, int8_t *res)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_ror))
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f107 000e 	add.w	r0, r7, #14
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <exec_ror+0x80>)
 8001244:	f7ff fba6 	bl	8000994 <get_operand>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d024      	beq.n	8001298 <exec_ror+0x74>
	{
		bool c_in = fC;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <exec_ror+0x84>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
		fC = op & 1;
 8001254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <exec_ror+0x84>)
 800126a:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op >> 1) | ((uint8_t)c_in << 7));
 800126c:	89b8      	ldrh	r0, [r7, #12]
 800126e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	b25a      	sxtb	r2, r3
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	b25b      	sxtb	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b25a      	sxtb	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f993 3000 	ldrsb.w	r3, [r3]
 800128e:	4619      	mov	r1, r3
 8001290:	f001 f82e 	bl	80022f0 <mem_write>
		return 1;
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <exec_ror+0x76>
	}
	return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000009c 	.word	0x2000009c
 80012a8:	20001129 	.word	0x20001129

080012ac <exec_lda>:

bool exec_lda(uint8_t ins, int8_t *res)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_lda))
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	f107 000f 	add.w	r0, r7, #15
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <exec_lda+0x44>)
 80012c4:	490b      	ldr	r1, [pc, #44]	@ (80012f4 <exec_lda+0x48>)
 80012c6:	f7ff fb65 	bl	8000994 <get_operand>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <exec_lda+0x3a>
	{
		*res = a = op;
 80012d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <exec_lda+0x4c>)
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <exec_lda+0x4c>)
 80012da:	f993 2000 	ldrsb.w	r2, [r3]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	701a      	strb	r2, [r3, #0]
		return 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <exec_lda+0x3c>
	}
	return 0;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	20001130 	.word	0x20001130
 80012f8:	20001120 	.word	0x20001120

080012fc <exec_sta>:

bool exec_sta(uint8_t ins, int8_t *res)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sta))
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	f107 010c 	add.w	r1, r7, #12
 8001316:	f107 000f 	add.w	r0, r7, #15
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <exec_sta+0x48>)
 800131c:	f7ff fb3a 	bl	8000994 <get_operand>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <exec_sta+0x3e>
	{
		mem_write(op_addr, a);
 8001326:	89bb      	ldrh	r3, [r7, #12]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <exec_sta+0x4c>)
 800132a:	f992 2000 	ldrsb.w	r2, [r2]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f000 ffdd 	bl	80022f0 <mem_write>
		return 1;
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <exec_sta+0x40>
	}
	return 0;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000b4 	.word	0x200000b4
 8001348:	20001120 	.word	0x20001120

0800134c <exec_ldx>:

bool exec_ldx(uint8_t ins, int8_t *res)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldx))
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	f107 000f 	add.w	r0, r7, #15
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <exec_ldx+0x44>)
 8001364:	490b      	ldr	r1, [pc, #44]	@ (8001394 <exec_ldx+0x48>)
 8001366:	f7ff fb15 	bl	8000994 <get_operand>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <exec_ldx+0x3a>
	{
		*res = x = op;
 8001370:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <exec_ldx+0x4c>)
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <exec_ldx+0x4c>)
 800137a:	f993 2000 	ldrsb.w	r2, [r3]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	701a      	strb	r2, [r3, #0]
		return 1;
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <exec_ldx+0x3c>
	}
	return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000c0 	.word	0x200000c0
 8001394:	20001130 	.word	0x20001130
 8001398:	20001121 	.word	0x20001121

0800139c <exec_stx>:

bool exec_stx(uint8_t ins, int8_t *res)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_stx))
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	f107 010c 	add.w	r1, r7, #12
 80013b6:	f107 000f 	add.w	r0, r7, #15
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <exec_stx+0x48>)
 80013bc:	f7ff faea 	bl	8000994 <get_operand>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <exec_stx+0x3e>
	{
		mem_write(op_addr, x);
 80013c6:	89bb      	ldrh	r3, [r7, #12]
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <exec_stx+0x4c>)
 80013ca:	f992 2000 	ldrsb.w	r2, [r2]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 ff8d 	bl	80022f0 <mem_write>
		return 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <exec_stx+0x40>
	}
	return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000cc 	.word	0x200000cc
 80013e8:	20001121 	.word	0x20001121

080013ec <exec_ldy>:

bool exec_ldy(uint8_t ins, int8_t *res)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldy))
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	f107 000f 	add.w	r0, r7, #15
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <exec_ldy+0x44>)
 8001404:	490b      	ldr	r1, [pc, #44]	@ (8001434 <exec_ldy+0x48>)
 8001406:	f7ff fac5 	bl	8000994 <get_operand>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00a      	beq.n	8001426 <exec_ldy+0x3a>
	{
		*res = y = op;
 8001410:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <exec_ldy+0x4c>)
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <exec_ldy+0x4c>)
 800141a:	f993 2000 	ldrsb.w	r2, [r3]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	701a      	strb	r2, [r3, #0]
		return 1;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <exec_ldy+0x3c>
	}
	return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000d8 	.word	0x200000d8
 8001434:	20001130 	.word	0x20001130
 8001438:	20001122 	.word	0x20001122

0800143c <exec_sty>:

bool exec_sty(uint8_t ins, int8_t *res)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sty))
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	f107 010c 	add.w	r1, r7, #12
 8001456:	f107 000f 	add.w	r0, r7, #15
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <exec_sty+0x48>)
 800145c:	f7ff fa9a 	bl	8000994 <get_operand>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <exec_sty+0x3e>
	{
		mem_write(op_addr, y);
 8001466:	89bb      	ldrh	r3, [r7, #12]
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <exec_sty+0x4c>)
 800146a:	f992 2000 	ldrsb.w	r2, [r2]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 ff3d 	bl	80022f0 <mem_write>
		return 1;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <exec_sty+0x40>
	}
	return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000e4 	.word	0x200000e4
 8001488:	20001122 	.word	0x20001122

0800148c <exec_ins>:

void exec_ins()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
	uint8_t ins = (uint8_t)mem_read(pc);
 8001492:	4bab      	ldr	r3, [pc, #684]	@ (8001740 <exec_ins+0x2b4>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fe4a 	bl	8002130 <mem_read>
 800149c:	4603      	mov	r3, r0
 800149e:	73bb      	strb	r3, [r7, #14]
	int8_t res = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
	bool skipZN = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

	if (exec_ora(ins, &res))
 80014a8:	1dfa      	adds	r2, r7, #7
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fbaa 	bl	8000c08 <exec_ora>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 85e7 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_and(ins, &res))
 80014bc:	1dfa      	adds	r2, r7, #7
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fbce 	bl	8000c64 <exec_and>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 85dd 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_eor(ins, &res))
 80014d0:	1dfa      	adds	r2, r7, #7
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fbf2 	bl	8000cc0 <exec_eor>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 85d3 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_adc(ins, &res))
 80014e4:	1dfa      	adds	r2, r7, #7
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc70 	bl	8000dd0 <exec_adc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 85c9 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_sbc(ins, &res))
 80014f8:	1dfa      	adds	r2, r7, #7
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc98 	bl	8000e34 <exec_sbc>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 85bf 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_cmp(ins, &res))
 800150c:	1dfa      	adds	r2, r7, #7
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fcc0 	bl	8000e98 <exec_cmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 85b5 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_cpx(ins, &res))
 8001520:	1dfa      	adds	r2, r7, #7
 8001522:	7bbb      	ldrb	r3, [r7, #14]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fcf2 	bl	8000f10 <exec_cpx>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 85ab 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_cpy(ins, &res))
 8001534:	1dfa      	adds	r2, r7, #7
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd24 	bl	8000f88 <exec_cpy>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 85a1 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_dec(ins, &res))
 8001548:	1dfa      	adds	r2, r7, #7
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd56 	bl	8001000 <exec_dec>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8597 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (ins == 0xca)
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	2bca      	cmp	r3, #202	@ 0xca
 8001560:	d114      	bne.n	800158c <exec_ins+0x100>
	{
		res = --x;
 8001562:	4b78      	ldr	r3, [pc, #480]	@ (8001744 <exec_ins+0x2b8>)
 8001564:	f993 3000 	ldrsb.w	r3, [r3]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3b01      	subs	r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	b25a      	sxtb	r2, r3
 8001570:	4b74      	ldr	r3, [pc, #464]	@ (8001744 <exec_ins+0x2b8>)
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	4b73      	ldr	r3, [pc, #460]	@ (8001744 <exec_ins+0x2b8>)
 8001576:	f993 3000 	ldrsb.w	r3, [r3]
 800157a:	71fb      	strb	r3, [r7, #7]
		pc++;
 800157c:	4b70      	ldr	r3, [pc, #448]	@ (8001740 <exec_ins+0x2b4>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b6e      	ldr	r3, [pc, #440]	@ (8001740 <exec_ins+0x2b4>)
 8001586:	801a      	strh	r2, [r3, #0]
 8001588:	f000 bd7f 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x88)
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2b88      	cmp	r3, #136	@ 0x88
 8001590:	d114      	bne.n	80015bc <exec_ins+0x130>
	{
		res = --y;
 8001592:	4b6d      	ldr	r3, [pc, #436]	@ (8001748 <exec_ins+0x2bc>)
 8001594:	f993 3000 	ldrsb.w	r3, [r3]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	4b69      	ldr	r3, [pc, #420]	@ (8001748 <exec_ins+0x2bc>)
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	4b68      	ldr	r3, [pc, #416]	@ (8001748 <exec_ins+0x2bc>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	71fb      	strb	r3, [r7, #7]
		pc++;
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <exec_ins+0x2b4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b62      	ldr	r3, [pc, #392]	@ (8001740 <exec_ins+0x2b4>)
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	f000 bd67 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (exec_inc(ins, &res))
 80015bc:	1dfa      	adds	r2, r7, #7
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fd4a 	bl	800105c <exec_inc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 855d 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (ins == 0xe8)
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2be8      	cmp	r3, #232	@ 0xe8
 80015d4:	d114      	bne.n	8001600 <exec_ins+0x174>
	{
		res = ++x;
 80015d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001744 <exec_ins+0x2b8>)
 80015d8:	f993 3000 	ldrsb.w	r3, [r3]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	4b57      	ldr	r3, [pc, #348]	@ (8001744 <exec_ins+0x2b8>)
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	4b56      	ldr	r3, [pc, #344]	@ (8001744 <exec_ins+0x2b8>)
 80015ea:	f993 3000 	ldrsb.w	r3, [r3]
 80015ee:	71fb      	strb	r3, [r7, #7]
		pc++;
 80015f0:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <exec_ins+0x2b4>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <exec_ins+0x2b4>)
 80015fa:	801a      	strh	r2, [r3, #0]
 80015fc:	f000 bd45 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xc8)
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	2bc8      	cmp	r3, #200	@ 0xc8
 8001604:	d114      	bne.n	8001630 <exec_ins+0x1a4>
	{
		res = ++y;
 8001606:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <exec_ins+0x2bc>)
 8001608:	f993 3000 	ldrsb.w	r3, [r3]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3301      	adds	r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b25a      	sxtb	r2, r3
 8001614:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <exec_ins+0x2bc>)
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	4b4b      	ldr	r3, [pc, #300]	@ (8001748 <exec_ins+0x2bc>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001620:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <exec_ins+0x2b4>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b45      	ldr	r3, [pc, #276]	@ (8001740 <exec_ins+0x2b4>)
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	f000 bd2d 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x0a)
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d120      	bne.n	8001678 <exec_ins+0x1ec>
	{
		fC = (uint8_t)a >> 7;
 8001636:	4b45      	ldr	r3, [pc, #276]	@ (800174c <exec_ins+0x2c0>)
 8001638:	f993 3000 	ldrsb.w	r3, [r3]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	09db      	lsrs	r3, r3, #7
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <exec_ins+0x2c4>)
 800164e:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a << 1;
 8001650:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <exec_ins+0x2c0>)
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b25a      	sxtb	r2, r3
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <exec_ins+0x2c0>)
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <exec_ins+0x2c0>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <exec_ins+0x2b4>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <exec_ins+0x2b4>)
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	f000 bd09 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (exec_asl(ins, &res))
 8001678:	1dfa      	adds	r2, r7, #7
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd1a 	bl	80010b8 <exec_asl>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 84ff 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (ins == 0x2a)
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001690:	d127      	bne.n	80016e2 <exec_ins+0x256>
	{
		bool c_in = fC;
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <exec_ins+0x2c4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	723b      	strb	r3, [r7, #8]
		fC = (uint8_t)a >> 7;
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <exec_ins+0x2c0>)
 800169a:	f993 3000 	ldrsb.w	r3, [r3]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	09db      	lsrs	r3, r3, #7
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <exec_ins+0x2c4>)
 80016b0:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a << 1) | (uint8_t)c_in;
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <exec_ins+0x2c0>)
 80016b4:	f993 3000 	ldrsb.w	r3, [r3]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <exec_ins+0x2c0>)
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <exec_ins+0x2c0>)
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	71fb      	strb	r3, [r7, #7]
		pc++;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <exec_ins+0x2b4>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <exec_ins+0x2b4>)
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	f000 bcd4 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (exec_rol(ins, &res))
 80016e2:	1dfa      	adds	r2, r7, #7
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd1f 	bl	800112c <exec_rol>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 84ca 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (ins == 0x4a)
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	2b4a      	cmp	r3, #74	@ 0x4a
 80016fa:	d12b      	bne.n	8001754 <exec_ins+0x2c8>
	{
		fC = (uint8_t)a & 1;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <exec_ins+0x2c0>)
 80016fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <exec_ins+0x2c4>)
 8001714:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a >> 1;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <exec_ins+0x2c0>)
 8001718:	f993 3000 	ldrsb.w	r3, [r3]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b25a      	sxtb	r2, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <exec_ins+0x2c0>)
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <exec_ins+0x2c0>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <exec_ins+0x2b4>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b01      	ldr	r3, [pc, #4]	@ (8001740 <exec_ins+0x2b4>)
 800173a:	801a      	strh	r2, [r3, #0]
 800173c:	f000 bca5 	b.w	800208a <exec_ins+0xbfe>
 8001740:	2000111e 	.word	0x2000111e
 8001744:	20001121 	.word	0x20001121
 8001748:	20001122 	.word	0x20001122
 800174c:	20001120 	.word	0x20001120
 8001750:	20001129 	.word	0x20001129
	}
	else if (exec_lsr(ins, &res))
 8001754:	1dfa      	adds	r2, r7, #7
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fd26 	bl	80011ac <exec_lsr>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8491 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (ins == 0x6a)
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	2b6a      	cmp	r3, #106	@ 0x6a
 800176c:	d129      	bne.n	80017c2 <exec_ins+0x336>
	{
		bool c_in = fC;
 800176e:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <exec_ins+0x504>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	727b      	strb	r3, [r7, #9]
		fC = (uint8_t)a & 1;
 8001774:	4b87      	ldr	r3, [pc, #540]	@ (8001994 <exec_ins+0x508>)
 8001776:	f993 3000 	ldrsb.w	r3, [r3]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b81      	ldr	r3, [pc, #516]	@ (8001990 <exec_ins+0x504>)
 800178c:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a >> 1) | ((uint8_t)c_in << 7);
 800178e:	4b81      	ldr	r3, [pc, #516]	@ (8001994 <exec_ins+0x508>)
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	b25a      	sxtb	r2, r3
 800179c:	7a7b      	ldrb	r3, [r7, #9]
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001994 <exec_ins+0x508>)
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001994 <exec_ins+0x508>)
 80017ac:	f993 3000 	ldrsb.w	r3, [r3]
 80017b0:	71fb      	strb	r3, [r7, #7]
		pc++;
 80017b2:	4b79      	ldr	r3, [pc, #484]	@ (8001998 <exec_ins+0x50c>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b77      	ldr	r3, [pc, #476]	@ (8001998 <exec_ins+0x50c>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	f000 bc64 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (exec_ror(ins, &res))
 80017c2:	1dfa      	adds	r2, r7, #7
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fd2b 	bl	8001224 <exec_ror>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 845a 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_lda(ins, &res))
 80017d6:	1dfa      	adds	r2, r7, #7
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fd65 	bl	80012ac <exec_lda>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8450 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_sta(ins, &res))
 80017ea:	1dfa      	adds	r2, r7, #7
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd83 	bl	80012fc <exec_sta>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <exec_ins+0x378>
		skipZN = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	f000 bc43 	b.w	800208a <exec_ins+0xbfe>
	else if (exec_ldx(ins, &res))
 8001804:	1dfa      	adds	r2, r7, #7
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd9e 	bl	800134c <exec_ldx>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 8439 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_stx(ins, &res))
 8001818:	1dfa      	adds	r2, r7, #7
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fdbc 	bl	800139c <exec_stx>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <exec_ins+0x3a6>
		skipZN = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	f000 bc2c 	b.w	800208a <exec_ins+0xbfe>
	else if (exec_ldy(ins, &res))
 8001832:	1dfa      	adds	r2, r7, #7
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fdd7 	bl	80013ec <exec_ldy>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 8422 	bne.w	800208a <exec_ins+0xbfe>
		;
	else if (exec_sty(ins, &res))
 8001846:	1dfa      	adds	r2, r7, #7
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fdf5 	bl	800143c <exec_sty>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <exec_ins+0x3d4>
		skipZN = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	f000 bc15 	b.w	800208a <exec_ins+0xbfe>
	else if (ins == 0xaa)
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	2baa      	cmp	r3, #170	@ 0xaa
 8001864:	d110      	bne.n	8001888 <exec_ins+0x3fc>
	{
		res = x = a;
 8001866:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <exec_ins+0x508>)
 8001868:	f993 2000 	ldrsb.w	r2, [r3]
 800186c:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <exec_ins+0x510>)
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <exec_ins+0x510>)
 8001872:	f993 3000 	ldrsb.w	r3, [r3]
 8001876:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001878:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <exec_ins+0x50c>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b45      	ldr	r3, [pc, #276]	@ (8001998 <exec_ins+0x50c>)
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	f000 bc01 	b.w	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x8a)
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	2b8a      	cmp	r3, #138	@ 0x8a
 800188c:	d10f      	bne.n	80018ae <exec_ins+0x422>
	{
		res = a = x;
 800188e:	4b43      	ldr	r3, [pc, #268]	@ (800199c <exec_ins+0x510>)
 8001890:	f993 2000 	ldrsb.w	r2, [r3]
 8001894:	4b3f      	ldr	r3, [pc, #252]	@ (8001994 <exec_ins+0x508>)
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <exec_ins+0x508>)
 800189a:	f993 3000 	ldrsb.w	r3, [r3]
 800189e:	71fb      	strb	r3, [r7, #7]
		pc++;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <exec_ins+0x50c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <exec_ins+0x50c>)
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	e3ed      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xa8)
 80018ae:	7bbb      	ldrb	r3, [r7, #14]
 80018b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80018b2:	d10f      	bne.n	80018d4 <exec_ins+0x448>
	{
		res = y = a;
 80018b4:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <exec_ins+0x508>)
 80018b6:	f993 2000 	ldrsb.w	r2, [r3]
 80018ba:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <exec_ins+0x514>)
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <exec_ins+0x514>)
 80018c0:	f993 3000 	ldrsb.w	r3, [r3]
 80018c4:	71fb      	strb	r3, [r7, #7]
		pc++;
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <exec_ins+0x50c>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <exec_ins+0x50c>)
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	e3da      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x98)
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	2b98      	cmp	r3, #152	@ 0x98
 80018d8:	d10f      	bne.n	80018fa <exec_ins+0x46e>
	{
		res = a = y;
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <exec_ins+0x514>)
 80018dc:	f993 2000 	ldrsb.w	r2, [r3]
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <exec_ins+0x508>)
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <exec_ins+0x508>)
 80018e6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ea:	71fb      	strb	r3, [r7, #7]
		pc++;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <exec_ins+0x50c>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <exec_ins+0x50c>)
 80018f6:	801a      	strh	r2, [r3, #0]
 80018f8:	e3c7      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xba)
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	2bba      	cmp	r3, #186	@ 0xba
 80018fe:	d10f      	bne.n	8001920 <exec_ins+0x494>
	{
		res = x = stack_pointer;
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <exec_ins+0x518>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25a      	sxtb	r2, r3
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <exec_ins+0x510>)
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <exec_ins+0x510>)
 800190c:	f993 3000 	ldrsb.w	r3, [r3]
 8001910:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <exec_ins+0x50c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <exec_ins+0x50c>)
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	e3b4      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x9a)
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	2b9a      	cmp	r3, #154	@ 0x9a
 8001924:	d10e      	bne.n	8001944 <exec_ins+0x4b8>
	{
		stack_pointer = x;
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <exec_ins+0x510>)
 8001928:	f993 3000 	ldrsb.w	r3, [r3]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <exec_ins+0x518>)
 8001930:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <exec_ins+0x50c>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <exec_ins+0x50c>)
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e3a2      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x68)
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	2b68      	cmp	r3, #104	@ 0x68
 8001948:	d110      	bne.n	800196c <exec_ins+0x4e0>
	{
		res = a = s_pop();
 800194a:	f7fe ff97 	bl	800087c <s_pop>
 800194e:	4603      	mov	r3, r0
 8001950:	b25a      	sxtb	r2, r3
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <exec_ins+0x508>)
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <exec_ins+0x508>)
 8001958:	f993 3000 	ldrsb.w	r3, [r3]
 800195c:	71fb      	strb	r3, [r7, #7]
		pc++;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <exec_ins+0x50c>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <exec_ins+0x50c>)
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e38e      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x48)
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	2b48      	cmp	r3, #72	@ 0x48
 8001970:	d11a      	bne.n	80019a8 <exec_ins+0x51c>
	{
		s_push(a);
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <exec_ins+0x508>)
 8001974:	f993 3000 	ldrsb.w	r3, [r3]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe ff97 	bl	80008ac <s_push>
		skipZN = 1;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <exec_ins+0x50c>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b03      	ldr	r3, [pc, #12]	@ (8001998 <exec_ins+0x50c>)
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	e37c      	b.n	800208a <exec_ins+0xbfe>
 8001990:	20001129 	.word	0x20001129
 8001994:	20001120 	.word	0x20001120
 8001998:	2000111e 	.word	0x2000111e
 800199c:	20001121 	.word	0x20001121
 80019a0:	20001122 	.word	0x20001122
 80019a4:	2000112a 	.word	0x2000112a
	}
	else if (ins == 0x28)
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	2b28      	cmp	r3, #40	@ 0x28
 80019ac:	d148      	bne.n	8001a40 <exec_ins+0x5b4>
	{
		uint8_t status = s_pop();
 80019ae:	f7fe ff65 	bl	800087c <s_pop>
 80019b2:	4603      	mov	r3, r0
 80019b4:	72bb      	strb	r3, [r7, #10]
		fN = status & (1 << 7);
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b8d      	ldr	r3, [pc, #564]	@ (8001bfc <exec_ins+0x770>)
 80019c8:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b89      	ldr	r3, [pc, #548]	@ (8001c00 <exec_ins+0x774>)
 80019dc:	701a      	strb	r2, [r3, #0]
		fD = status & (1 << 3);
 80019de:	7abb      	ldrb	r3, [r7, #10]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b85      	ldr	r3, [pc, #532]	@ (8001c04 <exec_ins+0x778>)
 80019f0:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 80019f2:	7abb      	ldrb	r3, [r7, #10]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b81      	ldr	r3, [pc, #516]	@ (8001c08 <exec_ins+0x77c>)
 8001a04:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 8001a06:	7abb      	ldrb	r3, [r7, #10]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b7d      	ldr	r3, [pc, #500]	@ (8001c0c <exec_ins+0x780>)
 8001a18:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 8001a1a:	7abb      	ldrb	r3, [r7, #10]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b79      	ldr	r3, [pc, #484]	@ (8001c10 <exec_ins+0x784>)
 8001a2c:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001a32:	4b78      	ldr	r3, [pc, #480]	@ (8001c14 <exec_ins+0x788>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <exec_ins+0x788>)
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	e324      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x08)
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d135      	bne.n	8001ab2 <exec_ins+0x626>
	{
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8001a46:	4b6d      	ldr	r3, [pc, #436]	@ (8001bfc <exec_ins+0x770>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c00 <exec_ins+0x774>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	4b6d      	ldr	r3, [pc, #436]	@ (8001c18 <exec_ins+0x78c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	4b65      	ldr	r3, [pc, #404]	@ (8001c04 <exec_ins+0x778>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b25a      	sxtb	r2, r3
 8001a78:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <exec_ins+0x77c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	4b61      	ldr	r3, [pc, #388]	@ (8001c0c <exec_ins+0x780>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b25a      	sxtb	r2, r3
 8001a90:	4b5f      	ldr	r3, [pc, #380]	@ (8001c10 <exec_ins+0x784>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe ff06 	bl	80008ac <s_push>
		skipZN = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <exec_ins+0x788>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <exec_ins+0x788>)
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	e2eb      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x10)
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d11e      	bne.n	8001af6 <exec_ins+0x66a>
	{
		if (!fN)
 8001ab8:	4b50      	ldr	r3, [pc, #320]	@ (8001bfc <exec_ins+0x770>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00e      	beq.n	8001ae4 <exec_ins+0x658>
			pc += mem_read(pc + 1);
 8001ac6:	4b53      	ldr	r3, [pc, #332]	@ (8001c14 <exec_ins+0x788>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fb2e 	bl	8002130 <mem_read>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c14 <exec_ins+0x788>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c14 <exec_ins+0x788>)
 8001ae2:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c14 <exec_ins+0x788>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b49      	ldr	r3, [pc, #292]	@ (8001c14 <exec_ins+0x788>)
 8001aee:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e2c9      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x30)
 8001af6:	7bbb      	ldrb	r3, [r7, #14]
 8001af8:	2b30      	cmp	r3, #48	@ 0x30
 8001afa:	d11b      	bne.n	8001b34 <exec_ins+0x6a8>
	{
		if (fN)
 8001afc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bfc <exec_ins+0x770>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00e      	beq.n	8001b22 <exec_ins+0x696>
			pc += mem_read(pc + 1);
 8001b04:	4b43      	ldr	r3, [pc, #268]	@ (8001c14 <exec_ins+0x788>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fb0f 	bl	8002130 <mem_read>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b3f      	ldr	r3, [pc, #252]	@ (8001c14 <exec_ins+0x788>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <exec_ins+0x788>)
 8001b20:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001b22:	4b3c      	ldr	r3, [pc, #240]	@ (8001c14 <exec_ins+0x788>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	3302      	adds	r3, #2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c14 <exec_ins+0x788>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e2aa      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x50)
 8001b34:	7bbb      	ldrb	r3, [r7, #14]
 8001b36:	2b50      	cmp	r3, #80	@ 0x50
 8001b38:	d11e      	bne.n	8001b78 <exec_ins+0x6ec>
	{
		if (!fV)
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <exec_ins+0x774>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <exec_ins+0x6da>
			pc += mem_read(pc + 1);
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <exec_ins+0x788>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 faed 	bl	8002130 <mem_read>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <exec_ins+0x788>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <exec_ins+0x788>)
 8001b64:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <exec_ins+0x788>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <exec_ins+0x788>)
 8001b70:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e288      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x70)
 8001b78:	7bbb      	ldrb	r3, [r7, #14]
 8001b7a:	2b70      	cmp	r3, #112	@ 0x70
 8001b7c:	d11b      	bne.n	8001bb6 <exec_ins+0x72a>
	{
		if (fV)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <exec_ins+0x774>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00e      	beq.n	8001ba4 <exec_ins+0x718>
			pc += mem_read(pc + 1);
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <exec_ins+0x788>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 face 	bl	8002130 <mem_read>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <exec_ins+0x788>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <exec_ins+0x788>)
 8001ba2:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <exec_ins+0x788>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <exec_ins+0x788>)
 8001bae:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e269      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x90)
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	2b90      	cmp	r3, #144	@ 0x90
 8001bba:	d12f      	bne.n	8001c1c <exec_ins+0x790>
	{
		if (!fC)
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <exec_ins+0x784>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f083 0301 	eor.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00e      	beq.n	8001be8 <exec_ins+0x75c>
			pc += mem_read(pc + 1);
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <exec_ins+0x788>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 faac 	bl	8002130 <mem_read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <exec_ins+0x788>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <exec_ins+0x788>)
 8001be6:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <exec_ins+0x788>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	3302      	adds	r3, #2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <exec_ins+0x788>)
 8001bf2:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e247      	b.n	800208a <exec_ins+0xbfe>
 8001bfa:	bf00      	nop
 8001bfc:	20001123 	.word	0x20001123
 8001c00:	20001124 	.word	0x20001124
 8001c04:	20001126 	.word	0x20001126
 8001c08:	20001127 	.word	0x20001127
 8001c0c:	20001128 	.word	0x20001128
 8001c10:	20001129 	.word	0x20001129
 8001c14:	2000111e 	.word	0x2000111e
 8001c18:	20001125 	.word	0x20001125
	}
	else if (ins == 0xb0)
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c20:	d11b      	bne.n	8001c5a <exec_ins+0x7ce>
	{
		if (fC)
 8001c22:	4b9e      	ldr	r3, [pc, #632]	@ (8001e9c <exec_ins+0xa10>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00e      	beq.n	8001c48 <exec_ins+0x7bc>
			pc += mem_read(pc + 1);
 8001c2a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea0 <exec_ins+0xa14>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa7c 	bl	8002130 <mem_read>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b98      	ldr	r3, [pc, #608]	@ (8001ea0 <exec_ins+0xa14>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b96      	ldr	r3, [pc, #600]	@ (8001ea0 <exec_ins+0xa14>)
 8001c46:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001c48:	4b95      	ldr	r3, [pc, #596]	@ (8001ea0 <exec_ins+0xa14>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b93      	ldr	r3, [pc, #588]	@ (8001ea0 <exec_ins+0xa14>)
 8001c52:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e217      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xd0)
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c5e:	d11e      	bne.n	8001c9e <exec_ins+0x812>
	{
		if (!fZ)
 8001c60:	4b90      	ldr	r3, [pc, #576]	@ (8001ea4 <exec_ins+0xa18>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00e      	beq.n	8001c8c <exec_ins+0x800>
			pc += mem_read(pc + 1);
 8001c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea0 <exec_ins+0xa14>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa5a 	bl	8002130 <mem_read>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b87      	ldr	r3, [pc, #540]	@ (8001ea0 <exec_ins+0xa14>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b85      	ldr	r3, [pc, #532]	@ (8001ea0 <exec_ins+0xa14>)
 8001c8a:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001c8c:	4b84      	ldr	r3, [pc, #528]	@ (8001ea0 <exec_ins+0xa14>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	3302      	adds	r3, #2
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b82      	ldr	r3, [pc, #520]	@ (8001ea0 <exec_ins+0xa14>)
 8001c96:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e1f5      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xf0)
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ca2:	d11b      	bne.n	8001cdc <exec_ins+0x850>
	{
		if (fZ)
 8001ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea4 <exec_ins+0xa18>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <exec_ins+0x83e>
			pc += mem_read(pc + 1);
 8001cac:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea0 <exec_ins+0xa14>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fa3b 	bl	8002130 <mem_read>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b78      	ldr	r3, [pc, #480]	@ (8001ea0 <exec_ins+0xa14>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <exec_ins+0xa14>)
 8001cc8:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8001cca:	4b75      	ldr	r3, [pc, #468]	@ (8001ea0 <exec_ins+0xa14>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b73      	ldr	r3, [pc, #460]	@ (8001ea0 <exec_ins+0xa14>)
 8001cd4:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	e1d6      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x00)
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d144      	bne.n	8001d6c <exec_ins+0x8e0>
	{
		s_push16(pc + 1);
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea0 <exec_ins+0xa14>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fe0f 	bl	800090e <s_push16>
		fB = 1;
 8001cf0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <exec_ins+0xa1c>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <exec_ins+0xa20>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	b25a      	sxtb	r2, r3
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb0 <exec_ins+0xa24>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	b25a      	sxtb	r2, r3
 8001d10:	4b65      	ldr	r3, [pc, #404]	@ (8001ea8 <exec_ins+0xa1c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25a      	sxtb	r2, r3
 8001d1c:	4b65      	ldr	r3, [pc, #404]	@ (8001eb4 <exec_ins+0xa28>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <exec_ins+0xa2c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea4 <exec_ins+0xa18>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	4b56      	ldr	r3, [pc, #344]	@ (8001e9c <exec_ins+0xa10>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fdae 	bl	80008ac <s_push>
		fI = 1;
 8001d50:	4b59      	ldr	r3, [pc, #356]	@ (8001eb8 <exec_ins+0xa2c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
		pc = mem_read16(0xfffe);
 8001d56:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8001d5a:	f000 faab 	bl	80022b4 <mem_read16>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea0 <exec_ins+0xa14>)
 8001d64:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e18e      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x40)
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	2b40      	cmp	r3, #64	@ 0x40
 8001d70:	d148      	bne.n	8001e04 <exec_ins+0x978>
	{
		uint8_t status = s_pop();
 8001d72:	f7fe fd83 	bl	800087c <s_pop>
 8001d76:	4603      	mov	r3, r0
 8001d78:	72fb      	strb	r3, [r7, #11]
		fN = status & (1 << 7);
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <exec_ins+0xa20>)
 8001d8c:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <exec_ins+0xa24>)
 8001da0:	701a      	strb	r2, [r3, #0]
		// fB = status & (1 << 4);
		fD = status & (1 << 3);
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <exec_ins+0xa28>)
 8001db4:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb8 <exec_ins+0xa2c>)
 8001dc8:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <exec_ins+0xa18>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <exec_ins+0xa10>)
 8001df0:	701a      	strb	r2, [r3, #0]
		pc = s_pop16();
 8001df2:	f7fe fd75 	bl	80008e0 <s_pop16>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <exec_ins+0xa14>)
 8001dfc:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e142      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x20)
 8001e04:	7bbb      	ldrb	r3, [r7, #14]
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d114      	bne.n	8001e34 <exec_ins+0x9a8>
	{
		s_push16(pc + 2);
 8001e0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <exec_ins+0xa14>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fd7b 	bl	800090e <s_push16>
		pc = mem_read16(pc + 1);
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <exec_ins+0xa14>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa47 	bl	80022b4 <mem_read16>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <exec_ins+0xa14>)
 8001e2c:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e12a      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x60)
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	2b60      	cmp	r3, #96	@ 0x60
 8001e38:	d109      	bne.n	8001e4e <exec_ins+0x9c2>
	{
		pc = s_pop16() + 1;
 8001e3a:	f7fe fd51 	bl	80008e0 <s_pop16>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <exec_ins+0xa14>)
 8001e46:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e11d      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x4c)
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	2b4c      	cmp	r3, #76	@ 0x4c
 8001e52:	d10d      	bne.n	8001e70 <exec_ins+0x9e4>
	{
		pc = mem_read16(pc + 1);
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <exec_ins+0xa14>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fa29 	bl	80022b4 <mem_read16>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <exec_ins+0xa14>)
 8001e68:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e10c      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x6c)
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b6c      	cmp	r3, #108	@ 0x6c
 8001e74:	d122      	bne.n	8001ebc <exec_ins+0xa30>
	{
		pc = mem_read16(mem_read16(pc + 1));
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <exec_ins+0xa14>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fa18 	bl	80022b4 <mem_read16>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fa14 	bl	80022b4 <mem_read16>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <exec_ins+0xa14>)
 8001e92:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e0f7      	b.n	800208a <exec_ins+0xbfe>
 8001e9a:	bf00      	nop
 8001e9c:	20001129 	.word	0x20001129
 8001ea0:	2000111e 	.word	0x2000111e
 8001ea4:	20001128 	.word	0x20001128
 8001ea8:	20001125 	.word	0x20001125
 8001eac:	20001123 	.word	0x20001123
 8001eb0:	20001124 	.word	0x20001124
 8001eb4:	20001126 	.word	0x20001126
 8001eb8:	20001127 	.word	0x20001127
	}
	else if (ins == 0x24)
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	2b24      	cmp	r3, #36	@ 0x24
 8001ec0:	d12f      	bne.n	8001f22 <exec_ins+0xa96>
	{
		load_ins_buf(2);
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7fe fd38 	bl	8000938 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read((uint8_t)ins_buf[1]);
 8001ec8:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <exec_ins+0xc3c>)
 8001eca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f92d 	bl	8002130 <mem_read>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	733b      	strb	r3, [r7, #12]
		fZ = (a & op) == 0;
 8001eda:	4b7c      	ldr	r3, [pc, #496]	@ (80020cc <exec_ins+0xc40>)
 8001edc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b77      	ldr	r3, [pc, #476]	@ (80020d0 <exec_ins+0xc44>)
 8001ef2:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 8001ef4:	7b3b      	ldrb	r3, [r7, #12]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <exec_ins+0xc48>)
 8001f06:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 8001f08:	7b3b      	ldrb	r3, [r7, #12]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf14      	ite	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	2300      	moveq	r3, #0
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b6f      	ldr	r3, [pc, #444]	@ (80020d8 <exec_ins+0xc4c>)
 8001f1a:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e0b3      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x2c)
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f26:	d139      	bne.n	8001f9c <exec_ins+0xb10>
	{
		load_ins_buf(3);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f7fe fd05 	bl	8000938 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read(((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]);
 8001f2e:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <exec_ins+0xc3c>)
 8001f30:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	4b63      	ldr	r3, [pc, #396]	@ (80020c8 <exec_ins+0xc3c>)
 8001f3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f8f0 	bl	8002130 <mem_read>
 8001f50:	4603      	mov	r3, r0
 8001f52:	737b      	strb	r3, [r7, #13]
		fZ = (a & op) == 0;
 8001f54:	4b5d      	ldr	r3, [pc, #372]	@ (80020cc <exec_ins+0xc40>)
 8001f56:	f993 3000 	ldrsb.w	r3, [r3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	7b7b      	ldrb	r3, [r7, #13]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <exec_ins+0xc44>)
 8001f6c:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b55      	ldr	r3, [pc, #340]	@ (80020d4 <exec_ins+0xc48>)
 8001f80:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <exec_ins+0xc4c>)
 8001f94:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e076      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x18)
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	2b18      	cmp	r3, #24
 8001fa0:	d10b      	bne.n	8001fba <exec_ins+0xb2e>
	{
		fC = 0;
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80020dc <exec_ins+0xc50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001fac:	4b4c      	ldr	r3, [pc, #304]	@ (80020e0 <exec_ins+0xc54>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <exec_ins+0xc54>)
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	e067      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x38)
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	2b38      	cmp	r3, #56	@ 0x38
 8001fbe:	d10b      	bne.n	8001fd8 <exec_ins+0xb4c>
	{
		fC = 1;
 8001fc0:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <exec_ins+0xc50>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001fca:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <exec_ins+0xc54>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <exec_ins+0xc54>)
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e058      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xd8)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2bd8      	cmp	r3, #216	@ 0xd8
 8001fdc:	d10b      	bne.n	8001ff6 <exec_ins+0xb6a>
	{
		fD = 0;
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <exec_ins+0xc58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
		pc++;
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <exec_ins+0xc54>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <exec_ins+0xc54>)
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e049      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xf8)
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	2bf8      	cmp	r3, #248	@ 0xf8
 8001ffa:	d10b      	bne.n	8002014 <exec_ins+0xb88>
	{
		fD = 1;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	@ (80020e4 <exec_ins+0xc58>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002006:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <exec_ins+0xc54>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <exec_ins+0xc54>)
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	e03a      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x58)
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	2b58      	cmp	r3, #88	@ 0x58
 8002018:	d10b      	bne.n	8002032 <exec_ins+0xba6>
	{
		fI = 0;
 800201a:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <exec_ins+0xc5c>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002024:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <exec_ins+0xc54>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <exec_ins+0xc54>)
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e02b      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0x78)
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	2b78      	cmp	r3, #120	@ 0x78
 8002036:	d10b      	bne.n	8002050 <exec_ins+0xbc4>
	{
		fI = 1;
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <exec_ins+0xc5c>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002042:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <exec_ins+0xc54>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <exec_ins+0xc54>)
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	e01c      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xb8)
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2bb8      	cmp	r3, #184	@ 0xb8
 8002054:	d10b      	bne.n	800206e <exec_ins+0xbe2>
	{
		fV = 0;
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <exec_ins+0xc4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <exec_ins+0xc54>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <exec_ins+0xc54>)
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	e00d      	b.n	800208a <exec_ins+0xbfe>
	}
	else if (ins == 0xea)
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	2bea      	cmp	r3, #234	@ 0xea
 8002072:	d108      	bne.n	8002086 <exec_ins+0xbfa>
	{
		skipZN = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <exec_ins+0xc54>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <exec_ins+0xc54>)
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e001      	b.n	800208a <exec_ins+0xbfe>
	}
	else
	{
		reset();
 8002086:	f7fe fafd 	bl	8000684 <reset>
	}

	if (!skipZN)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <exec_ins+0xc32>
	{
		fZ = res == 0;
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <exec_ins+0xc44>)
 80020a6:	701a      	strb	r2, [r3, #0]
		fN = res & (1 << 7);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <exec_ins+0xc48>)
 80020bc:	701a      	strb	r2, [r3, #0]
	}
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000112c 	.word	0x2000112c
 80020cc:	20001120 	.word	0x20001120
 80020d0:	20001128 	.word	0x20001128
 80020d4:	20001123 	.word	0x20001123
 80020d8:	20001124 	.word	0x20001124
 80020dc:	20001129 	.word	0x20001129
 80020e0:	2000111e 	.word	0x2000111e
 80020e4:	20001126 	.word	0x20001126
 80020e8:	20001127 	.word	0x20001127

080020ec <display_clear>:
uint16_t color_bright = (0b01110 << 11) | (0b011011 << 5) | 0b11101;
uint16_t color_dark = (0b00101 << 11) | (0b001000 << 5) | 0b11010;
uint8_t display_zoom = 0;

void display_clear()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	for (uint16_t x = 0; x < 500; x++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	80fb      	strh	r3, [r7, #6]
 80020f6:	e012      	b.n	800211e <display_clear+0x32>
	{
		for (uint16_t y = 0; y < 500; y++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	80bb      	strh	r3, [r7, #4]
 80020fc:	e008      	b.n	8002110 <display_clear+0x24>
		{
			display_set_pixel(x, y, 0);
 80020fe:	88b9      	ldrh	r1, [r7, #4]
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2200      	movs	r2, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f000 ffab 	bl	8003060 <display_set_pixel>
		for (uint16_t y = 0; y < 500; y++)
 800210a:	88bb      	ldrh	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	80bb      	strh	r3, [r7, #4]
 8002110:	88bb      	ldrh	r3, [r7, #4]
 8002112:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002116:	d3f2      	bcc.n	80020fe <display_clear+0x12>
	for (uint16_t x = 0; x < 500; x++)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	3301      	adds	r3, #1
 800211c:	80fb      	strh	r3, [r7, #6]
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002124:	d3e8      	bcc.n	80020f8 <display_clear+0xc>
		}
	}
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <mem_read>:
int8_t basicram[24827]; // 38912
uint8_t ram[4096] = {
	120, 162, 0, 160, 0, 200, 208, 253, 232, 208, 250, 108, 252, 255 };

int8_t mem_read(uint16_t addr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
	uint16_t addr_off = addr;
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2bff      	cmp	r3, #255	@ 0xff
 8002142:	d803      	bhi.n	800214c <mem_read+0x1c>
	{
		// zeropage
		return zeropage[addr];
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	4a52      	ldr	r2, [pc, #328]	@ (8002290 <mem_read+0x160>)
 8002148:	56d3      	ldrsb	r3, [r2, r3]
 800214a:	e09c      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0x0200)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002152:	d207      	bcs.n	8002164 <mem_read+0x34>
	{
		addr_off -= 0x0100;
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800215a:	81fb      	strh	r3, [r7, #14]
		// stack
		return stack[addr_off];
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	4a4d      	ldr	r2, [pc, #308]	@ (8002294 <mem_read+0x164>)
 8002160:	56d3      	ldrsb	r3, [r2, r3]
 8002162:	e090      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0x0400)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d207      	bcs.n	800217c <mem_read+0x4c>
	{
		addr_off -= 0x0200;
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002172:	81fb      	strh	r3, [r7, #14]
		// sysvar
		return sysvar[addr_off];
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	4a48      	ldr	r2, [pc, #288]	@ (8002298 <mem_read+0x168>)
 8002178:	56d3      	ldrsb	r3, [r2, r3]
 800217a:	e084      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0x0800)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002182:	d207      	bcs.n	8002194 <mem_read+0x64>
	{
		addr_off -= 0x0400;
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800218a:	81fb      	strh	r3, [r7, #14]
		// screen
		return screen[addr_off];
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	4a43      	ldr	r2, [pc, #268]	@ (800229c <mem_read+0x16c>)
 8002190:	56d3      	ldrsb	r3, [r2, r3]
 8002192:	e078      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0xa000)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800219a:	d207      	bcs.n	80021ac <mem_read+0x7c>
	{
		addr_off -= 0x0800;
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80021a2:	81fb      	strh	r3, [r7, #14]
		// basic ram
		return basicram[addr_off];
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	4a3e      	ldr	r2, [pc, #248]	@ (80022a0 <mem_read+0x170>)
 80021a8:	56d3      	ldrsb	r3, [r2, r3]
 80021aa:	e06c      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0xc000)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80021b2:	d208      	bcs.n	80021c6 <mem_read+0x96>
	{
		addr_off -= 0xa000;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80021ba:	81fb      	strh	r3, [r7, #14]
		// basic rom
		return basic[addr_off];
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	4a39      	ldr	r2, [pc, #228]	@ (80022a4 <mem_read+0x174>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	e05f      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0xd000)
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 80021cc:	d208      	bcs.n	80021e0 <mem_read+0xb0>
	{
		addr_off -= 0xc000;
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80021d4:	81fb      	strh	r3, [r7, #14]
		// free ram
		return ram[addr_off];
 80021d6:	89fb      	ldrh	r3, [r7, #14]
 80021d8:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <mem_read+0x178>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	e052      	b.n	8002286 <mem_read+0x156>
	}
	else if (addr < 0xe000)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80021e6:	d244      	bcs.n	8002272 <mem_read+0x142>
	{
		if (addr < 0xd400)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 80021ee:	d209      	bcs.n	8002204 <mem_read+0xd4>
		{
			addr_off -= 0xd000;
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80021f6:	81fb      	strh	r3, [r7, #14]
			// vic registers
			return vic_read(addr_off);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f99e 	bl	800253c <vic_read>
 8002200:	4603      	mov	r3, r0
 8002202:	e040      	b.n	8002286 <mem_read+0x156>
		}
		else if (addr < 0xd800)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800220a:	d204      	bcs.n	8002216 <mem_read+0xe6>
		{
			addr_off -= 0xd400;
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	e036      	b.n	8002284 <mem_read+0x154>
			// sid registers
		}
		else if (addr < 0xdc00)
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800221c:	d204      	bcs.n	8002228 <mem_read+0xf8>
		{
			addr_off -= 0xd800;
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002224:	81fb      	strh	r3, [r7, #14]
 8002226:	e02d      	b.n	8002284 <mem_read+0x154>
			// color ram
		}
		else if (addr < 0xdd00)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 800222e:	d20d      	bcs.n	800224c <mem_read+0x11c>
		{
			addr_off -= 0xdc00;
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002236:	81fb      	strh	r3, [r7, #14]
			return cia_read(addr_off % 16);
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f938 	bl	80004b8 <cia_read>
 8002248:	4603      	mov	r3, r0
 800224a:	e01c      	b.n	8002286 <mem_read+0x156>
		}
		else if (addr < 0xde00)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 8002252:	d209      	bcs.n	8002268 <mem_read+0x138>
		{
			addr_off -= 0xdd00;
 8002254:	89fb      	ldrh	r3, [r7, #14]
 8002256:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800225a:	81fb      	strh	r3, [r7, #14]
			// cia 2
			return cia2_reg[addr_off % 16];
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <mem_read+0x17c>)
 8002264:	56d3      	ldrsb	r3, [r2, r3]
 8002266:	e00e      	b.n	8002286 <mem_read+0x156>
		}
		else
		{
			addr_off -= 0xde00;
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 800226e:	81fb      	strh	r3, [r7, #14]
 8002270:	e008      	b.n	8002284 <mem_read+0x154>
			// interface expansions
		}
	}
	else
	{
		addr_off -= 0xe000;
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002278:	81fb      	strh	r3, [r7, #14]
		// kernal rom
		return kernal[addr_off];
 800227a:	89fb      	ldrh	r3, [r7, #14]
 800227c:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <mem_read+0x180>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	b25b      	sxtb	r3, r3
 8002282:	e000      	b.n	8002286 <mem_read+0x156>
	}
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20001134 	.word	0x20001134
 8002294:	20001234 	.word	0x20001234
 8002298:	20001334 	.word	0x20001334
 800229c:	20001534 	.word	0x20001534
 80022a0:	20001944 	.word	0x20001944
 80022a4:	080082a4 	.word	0x080082a4
 80022a8:	200000f4 	.word	0x200000f4
 80022ac:	20001934 	.word	0x20001934
 80022b0:	0800b2a4 	.word	0x0800b2a4

080022b4 <mem_read16>:

uint16_t mem_read16(uint16_t addr0)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)(uint8_t)mem_read(addr0 + 1) << 8) | (uint16_t)(uint8_t)mem_read(addr0);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff33 	bl	8002130 <mem_read>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21c      	sxth	r4, r3
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff2b 	bl	8002130 <mem_read>
 80022da:	4603      	mov	r3, r0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4323      	orrs	r3, r4
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	b29b      	uxth	r3, r3
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
	...

080022f0 <mem_write>:

void mem_write(uint16_t addr, int8_t d)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	80fb      	strh	r3, [r7, #6]
 80022fc:	4613      	mov	r3, r2
 80022fe:	717b      	strb	r3, [r7, #5]
	uint16_t addr_off = addr;
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2bff      	cmp	r3, #255	@ 0xff
 8002308:	d804      	bhi.n	8002314 <mem_write+0x24>
	{
		// zeropage
		zeropage[addr] = d;
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4981      	ldr	r1, [pc, #516]	@ (8002514 <mem_write+0x224>)
 800230e:	797a      	ldrb	r2, [r7, #5]
 8002310:	54ca      	strb	r2, [r1, r3]
	else
	{
		addr_off -= 0xe000;
		// kernal rom
	}
}
 8002312:	e0fb      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0x0200)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800231a:	d208      	bcs.n	800232e <mem_write+0x3e>
		addr_off -= 0x0100;
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002322:	81fb      	strh	r3, [r7, #14]
		stack[addr_off] = d;
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	497c      	ldr	r1, [pc, #496]	@ (8002518 <mem_write+0x228>)
 8002328:	797a      	ldrb	r2, [r7, #5]
 800232a:	54ca      	strb	r2, [r1, r3]
}
 800232c:	e0ee      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0x0400)
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002334:	d208      	bcs.n	8002348 <mem_write+0x58>
		addr_off -= 0x0200;
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800233c:	81fb      	strh	r3, [r7, #14]
		sysvar[addr_off] = d;
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	4976      	ldr	r1, [pc, #472]	@ (800251c <mem_write+0x22c>)
 8002342:	797a      	ldrb	r2, [r7, #5]
 8002344:	54ca      	strb	r2, [r1, r3]
}
 8002346:	e0e1      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0x0800)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800234e:	d20f      	bcs.n	8002370 <mem_write+0x80>
		addr_off -= 0x0400;
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002356:	81fb      	strh	r3, [r7, #14]
		screen[addr_off] = d;
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	4971      	ldr	r1, [pc, #452]	@ (8002520 <mem_write+0x230>)
 800235c:	797a      	ldrb	r2, [r7, #5]
 800235e:	54ca      	strb	r2, [r1, r3]
		vic_write_screen(addr_off, d);
 8002360:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f949 	bl	8002600 <vic_write_screen>
}
 800236e:	e0cd      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xa000)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002376:	d208      	bcs.n	800238a <mem_write+0x9a>
		addr_off -= 0x0800;
 8002378:	89fb      	ldrh	r3, [r7, #14]
 800237a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800237e:	81fb      	strh	r3, [r7, #14]
		basicram[addr_off] = d;
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	4968      	ldr	r1, [pc, #416]	@ (8002524 <mem_write+0x234>)
 8002384:	797a      	ldrb	r2, [r7, #5]
 8002386:	54ca      	strb	r2, [r1, r3]
}
 8002388:	e0c0      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xc000)
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002390:	d204      	bcs.n	800239c <mem_write+0xac>
		addr_off -= 0xa000;
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8002398:	81fb      	strh	r3, [r7, #14]
}
 800239a:	e0b7      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xd000)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 80023a2:	d261      	bcs.n	8002468 <mem_write+0x178>
		addr_off -= 0xc000;
 80023a4:	89fb      	ldrh	r3, [r7, #14]
 80023a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80023aa:	81fb      	strh	r3, [r7, #14]
		ram[addr_off] = d;
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	7979      	ldrb	r1, [r7, #5]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <mem_write+0x238>)
 80023b2:	54d1      	strb	r1, [r2, r3]
		if (addr == 0xcff1)
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f64c 72f1 	movw	r2, #53233	@ 0xcff1
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d102      	bne.n	80023c4 <mem_write+0xd4>
			display_zoom = d;
 80023be:	797a      	ldrb	r2, [r7, #5]
 80023c0:	4b5a      	ldr	r3, [pc, #360]	@ (800252c <mem_write+0x23c>)
 80023c2:	701a      	strb	r2, [r3, #0]
		if (addr == 0xcff2)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f64c 72f2 	movw	r2, #53234	@ 0xcff2
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 809e 	bne.w	800250c <mem_write+0x21c>
			if (d == 0)
 80023d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <mem_write+0xfa>
				color_bright = (0b11001 << 11) | (0b111000 << 5) | 0b11111;
 80023d8:	4b55      	ldr	r3, [pc, #340]	@ (8002530 <mem_write+0x240>)
 80023da:	f64c 721f 	movw	r2, #53023	@ 0xcf1f
 80023de:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00101 << 11) | (0b001000 << 5) | 0b11010;
 80023e0:	4b54      	ldr	r3, [pc, #336]	@ (8002534 <mem_write+0x244>)
 80023e2:	f642 121a 	movw	r2, #10522	@ 0x291a
 80023e6:	801a      	strh	r2, [r3, #0]
}
 80023e8:	e090      	b.n	800250c <mem_write+0x21c>
			else if (d == 1)
 80023ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <mem_write+0x114>
				color_bright = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 80023f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002530 <mem_write+0x240>)
 80023f4:	f645 4268 	movw	r2, #23656	@ 0x5c68
 80023f8:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 80023fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <mem_write+0x244>)
 80023fc:	f640 1244 	movw	r2, #2372	@ 0x944
 8002400:	801a      	strh	r2, [r3, #0]
}
 8002402:	e083      	b.n	800250c <mem_write+0x21c>
			else if (d == 2)
 8002404:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d108      	bne.n	800241e <mem_write+0x12e>
				color_bright = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 800240c:	4b48      	ldr	r3, [pc, #288]	@ (8002530 <mem_write+0x240>)
 800240e:	f640 1244 	movw	r2, #2372	@ 0x944
 8002412:	801a      	strh	r2, [r3, #0]
				color_dark = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 8002414:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <mem_write+0x244>)
 8002416:	f645 4268 	movw	r2, #23656	@ 0x5c68
 800241a:	801a      	strh	r2, [r3, #0]
}
 800241c:	e076      	b.n	800250c <mem_write+0x21c>
			else if (d == 3)
 800241e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <mem_write+0x146>
				color_bright = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 8002426:	4b42      	ldr	r3, [pc, #264]	@ (8002530 <mem_write+0x240>)
 8002428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242c:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <mem_write+0x244>)
 8002430:	2200      	movs	r2, #0
 8002432:	801a      	strh	r2, [r3, #0]
}
 8002434:	e06a      	b.n	800250c <mem_write+0x21c>
			else if (d == 4)
 8002436:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d107      	bne.n	800244e <mem_write+0x15e>
				color_bright = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 800243e:	4b3c      	ldr	r3, [pc, #240]	@ (8002530 <mem_write+0x240>)
 8002440:	2200      	movs	r2, #0
 8002442:	801a      	strh	r2, [r3, #0]
				color_dark = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <mem_write+0x244>)
 8002446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800244a:	801a      	strh	r2, [r3, #0]
}
 800244c:	e05e      	b.n	800250c <mem_write+0x21c>
			else if (d == 5)
 800244e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d15a      	bne.n	800250c <mem_write+0x21c>
				color_bright = (0b01010 << 11) | (0b110000 << 5) | 0b11111;
 8002456:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <mem_write+0x240>)
 8002458:	f245 621f 	movw	r2, #22047	@ 0x561f
 800245c:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00100 << 11) | (0b001000 << 5) | 0b00100;
 800245e:	4b35      	ldr	r3, [pc, #212]	@ (8002534 <mem_write+0x244>)
 8002460:	f242 1204 	movw	r2, #8452	@ 0x2104
 8002464:	801a      	strh	r2, [r3, #0]
}
 8002466:	e051      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xd400)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 800246e:	d20b      	bcs.n	8002488 <mem_write+0x198>
		addr_off -= 0xd000;
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002476:	81fb      	strh	r3, [r7, #14]
		vic_write(addr_off, d);
 8002478:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f89b 	bl	80025bc <vic_write>
}
 8002486:	e041      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xd800)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800248e:	d204      	bcs.n	800249a <mem_write+0x1aa>
		addr_off -= 0xd400;
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002496:	81fb      	strh	r3, [r7, #14]
}
 8002498:	e038      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xdc00)
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80024a0:	d204      	bcs.n	80024ac <mem_write+0x1bc>
		addr_off -= 0xd800;
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80024a8:	81fb      	strh	r3, [r7, #14]
}
 80024aa:	e02f      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xdd00)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 80024b2:	d20f      	bcs.n	80024d4 <mem_write+0x1e4>
		addr_off -= 0xdc00;
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80024ba:	81fb      	strh	r3, [r7, #14]
		cia_write(addr_off % 16, d);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f871 	bl	80005b4 <cia_write>
}
 80024d2:	e01b      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xde00)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 80024da:	d20a      	bcs.n	80024f2 <mem_write+0x202>
		addr_off -= 0xdd00;
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 80024e2:	81fb      	strh	r3, [r7, #14]
		cia2_reg[addr_off % 16] = d;
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	4913      	ldr	r1, [pc, #76]	@ (8002538 <mem_write+0x248>)
 80024ec:	797a      	ldrb	r2, [r7, #5]
 80024ee:	54ca      	strb	r2, [r1, r3]
}
 80024f0:	e00c      	b.n	800250c <mem_write+0x21c>
	else if (addr < 0xe000)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80024f8:	d204      	bcs.n	8002504 <mem_write+0x214>
		addr_off -= 0xde00;
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8002500:	81fb      	strh	r3, [r7, #14]
}
 8002502:	e003      	b.n	800250c <mem_write+0x21c>
		addr_off -= 0xe000;
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800250a:	81fb      	strh	r3, [r7, #14]
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20001134 	.word	0x20001134
 8002518:	20001234 	.word	0x20001234
 800251c:	20001334 	.word	0x20001334
 8002520:	20001534 	.word	0x20001534
 8002524:	20001944 	.word	0x20001944
 8002528:	200000f4 	.word	0x200000f4
 800252c:	20001132 	.word	0x20001132
 8002530:	200000f0 	.word	0x200000f0
 8002534:	200000f2 	.word	0x200000f2
 8002538:	20001934 	.word	0x20001934

0800253c <vic_read>:

uint8_t vic_reg[48];
uint8_t vic_line = 0;

int8_t vic_read(uint16_t addr_off)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
	if (addr_off == 0x12)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d114      	bne.n	8002576 <vic_read+0x3a>
		return vic_line = (vic_line + 1) % 24;
 800254c:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <vic_read+0x70>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <vic_read+0x74>)
 8002554:	fb83 1302 	smull	r1, r3, r3, r2
 8002558:	1099      	asrs	r1, r3, #2
 800255a:	17d3      	asrs	r3, r2, #31
 800255c:	1ac9      	subs	r1, r1, r3
 800255e:	460b      	mov	r3, r1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	440b      	add	r3, r1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1ad1      	subs	r1, r2, r3
 8002568:	b2ca      	uxtb	r2, r1
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <vic_read+0x70>)
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <vic_read+0x70>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b25b      	sxtb	r3, r3
 8002574:	e013      	b.n	800259e <vic_read+0x62>
	else if (addr_off == 0x19)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b19      	cmp	r3, #25
 800257a:	d101      	bne.n	8002580 <vic_read+0x44>
		return 0; // NTSC
 800257c:	2300      	movs	r3, #0
 800257e:	e00e      	b.n	800259e <vic_read+0x62>
	else
		return vic_reg[addr_off % 0x30];
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <vic_read+0x78>)
 8002584:	fba3 1302 	umull	r1, r3, r3, r2
 8002588:	0959      	lsrs	r1, r3, #5
 800258a:	460b      	mov	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <vic_read+0x7c>)
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b25b      	sxtb	r3, r3
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20007a70 	.word	0x20007a70
 80025b0:	2aaaaaab 	.word	0x2aaaaaab
 80025b4:	aaaaaaab 	.word	0xaaaaaaab
 80025b8:	20007a40 	.word	0x20007a40

080025bc <vic_write>:

void vic_write(uint16_t addr_off, int8_t d)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	80fb      	strh	r3, [r7, #6]
 80025c8:	4613      	mov	r3, r2
 80025ca:	717b      	strb	r3, [r7, #5]
	vic_reg[addr_off % 0x30] = d;
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <vic_write+0x3c>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	0959      	lsrs	r1, r3, #5
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	7979      	ldrb	r1, [r7, #5]
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <vic_write+0x40>)
 80025e8:	5499      	strb	r1, [r3, r2]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	aaaaaaab 	.word	0xaaaaaaab
 80025fc:	20007a40 	.word	0x20007a40

08002600 <vic_write_screen>:

void vic_write_screen(uint16_t addr_off, int8_t d)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	460a      	mov	r2, r1
 800260a:	80fb      	strh	r3, [r7, #6]
 800260c:	4613      	mov	r3, r2
 800260e:	717b      	strb	r3, [r7, #5]
	if (addr_off < 1000)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002616:	d25e      	bcs.n	80026d6 <vic_write_screen+0xd6>
	{
		uint16_t screen_x = addr_off % 40;
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <vic_write_screen+0xe0>)
 800261c:	fba3 1302 	umull	r1, r3, r3, r2
 8002620:	0959      	lsrs	r1, r3, #5
 8002622:	460b      	mov	r3, r1
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	82bb      	strh	r3, [r7, #20]
		uint16_t screen_y = addr_off / 40;
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <vic_write_screen+0xe0>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	827b      	strh	r3, [r7, #18]
		for (uint8_t char_y = 0; char_y < 8; char_y++)
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
 800263e:	e047      	b.n	80026d0 <vic_write_screen+0xd0>
		{
			uint16_t char_offset = (uint8_t)vic_reg[0x18] >> 1 ? 0x0000 : 0x0800;
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <vic_write_screen+0xe4>)
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <vic_write_screen+0x50>
 800264c:	2300      	movs	r3, #0
 800264e:	e001      	b.n	8002654 <vic_write_screen+0x54>
 8002650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002654:	823b      	strh	r3, [r7, #16]
			uint8_t char_line = characters[(uint8_t)d * 8 + char_y + char_offset];
 8002656:	797b      	ldrb	r3, [r7, #5]
 8002658:	00da      	lsls	r2, r3, #3
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	441a      	add	r2, r3
 800265e:	8a3b      	ldrh	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	4a21      	ldr	r2, [pc, #132]	@ (80026e8 <vic_write_screen+0xe8>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	73fb      	strb	r3, [r7, #15]
			for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 8002668:	2300      	movs	r3, #0
 800266a:	75bb      	strb	r3, [r7, #22]
 800266c:	e023      	b.n	80026b6 <vic_write_screen+0xb6>
			{
				uint16_t total_x = 8 * screen_x + char_x;
 800266e:	8abb      	ldrh	r3, [r7, #20]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	b29a      	uxth	r2, r3
 8002674:	7dbb      	ldrb	r3, [r7, #22]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	81bb      	strh	r3, [r7, #12]
				uint16_t total_y = 8 * screen_y + char_y;
 800267c:	8a7b      	ldrh	r3, [r7, #18]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	b29a      	uxth	r2, r3
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	817b      	strh	r3, [r7, #10]
				display_set_pixel(total_x, total_y, (char_line >> (7 - (char_x % 8))) & 1);
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	7dbb      	ldrb	r3, [r7, #22]
 800268e:	43db      	mvns	r3, r3
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	fa42 f303 	asr.w	r3, r2, r3
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fcd8 	bl	8003060 <display_set_pixel>
			for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 80026b0:	7dbb      	ldrb	r3, [r7, #22]
 80026b2:	3301      	adds	r3, #1
 80026b4:	75bb      	strb	r3, [r7, #22]
 80026b6:	7dbb      	ldrb	r3, [r7, #22]
 80026b8:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <vic_write_screen+0xec>)
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d001      	beq.n	80026c4 <vic_write_screen+0xc4>
 80026c0:	2210      	movs	r2, #16
 80026c2:	e000      	b.n	80026c6 <vic_write_screen+0xc6>
 80026c4:	2208      	movs	r2, #8
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dcd1      	bgt.n	800266e <vic_write_screen+0x6e>
		for (uint8_t char_y = 0; char_y < 8; char_y++)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	3301      	adds	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b07      	cmp	r3, #7
 80026d4:	d9b4      	bls.n	8002640 <vic_write_screen+0x40>
			}
		}
	}
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	cccccccd 	.word	0xcccccccd
 80026e4:	20007a40 	.word	0x20007a40
 80026e8:	0800a2a4 	.word	0x0800a2a4
 80026ec:	20001132 	.word	0x20001132

080026f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80026f6:	f001 f9e3 	bl	8003ac0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80026fa:	f000 f939 	bl	8002970 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80026fe:	f000 fb6d 	bl	8002ddc <MX_GPIO_Init>
	MX_DMA_Init();
 8002702:	f000 fb4d 	bl	8002da0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002706:	f000 fb1b 	bl	8002d40 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800270a:	f000 f9b5 	bl	8002a78 <MX_TIM2_Init>
	MX_DAC1_Init();
 800270e:	f000 f981 	bl	8002a14 <MX_DAC1_Init>
	MX_TIM4_Init();
 8002712:	f000 fa29 	bl	8002b68 <MX_TIM4_Init>
	MX_TIM15_Init();
 8002716:	f000 fa75 	bl	8002c04 <MX_TIM15_Init>
		 */
	}
#endif

#if PAL
	hpal1.hdac = &hdac1;
 800271a:	4b87      	ldr	r3, [pc, #540]	@ (8002938 <main+0x248>)
 800271c:	4a87      	ldr	r2, [pc, #540]	@ (800293c <main+0x24c>)
 800271e:	601a      	str	r2, [r3, #0]
	hpal1.dac_channel = DAC_CHANNEL_1;
 8002720:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <main+0x248>)
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
	hpal1.htim = &htim4;
 8002726:	4b84      	ldr	r3, [pc, #528]	@ (8002938 <main+0x248>)
 8002728:	4a85      	ldr	r2, [pc, #532]	@ (8002940 <main+0x250>)
 800272a:	609a      	str	r2, [r3, #8]
	PAL_Init(&hpal1);
 800272c:	4882      	ldr	r0, [pc, #520]	@ (8002938 <main+0x248>)
 800272e:	f000 fcdf 	bl	80030f0 <PAL_Init>
	for (uint32_t y = 0; y < PAL_FRAME_LINE_COUNT; y++)
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e018      	b.n	800276a <main+0x7a>
	{
		for (uint32_t x = 0; x < PAL_FRAME_LINE_LEN; x++)
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	e00f      	b.n	800275e <main+0x6e>
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = PAL_BLACK;
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	019b      	lsls	r3, r3, #6
 8002748:	441a      	add	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	4a7a      	ldr	r2, [pc, #488]	@ (8002938 <main+0x248>)
 8002750:	4413      	add	r3, r2
 8002752:	2217      	movs	r2, #23
 8002754:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
		for (uint32_t x = 0; x < PAL_FRAME_LINE_LEN; x++)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3301      	adds	r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2bc0      	cmp	r3, #192	@ 0xc0
 8002762:	d9ec      	bls.n	800273e <main+0x4e>
	for (uint32_t y = 0; y < PAL_FRAME_LINE_COUNT; y++)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8002770:	d9e2      	bls.n	8002738 <main+0x48>
		}
	}
	PAL_Start(&hpal1);
 8002772:	4871      	ldr	r0, [pc, #452]	@ (8002938 <main+0x248>)
 8002774:	f000 fdd2 	bl	800331c <PAL_Start>

	HAL_TIM_Base_Start_IT(&htim15);
 8002778:	4872      	ldr	r0, [pc, #456]	@ (8002944 <main+0x254>)
 800277a:	f003 fe37 	bl	80063ec <HAL_TIM_Base_Start_IT>

	cia_row_ports[0] = KB_Row0_GPIO_Port;
 800277e:	4b72      	ldr	r3, [pc, #456]	@ (8002948 <main+0x258>)
 8002780:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002784:	601a      	str	r2, [r3, #0]
	cia_row_pins[0] = KB_Row0_Pin;
 8002786:	4b71      	ldr	r3, [pc, #452]	@ (800294c <main+0x25c>)
 8002788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278c:	801a      	strh	r2, [r3, #0]
	cia_row_ports[1] = KB_Row1_GPIO_Port;
 800278e:	4b6e      	ldr	r3, [pc, #440]	@ (8002948 <main+0x258>)
 8002790:	4a6f      	ldr	r2, [pc, #444]	@ (8002950 <main+0x260>)
 8002792:	605a      	str	r2, [r3, #4]
	cia_row_pins[1] = KB_Row1_Pin;
 8002794:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <main+0x25c>)
 8002796:	2280      	movs	r2, #128	@ 0x80
 8002798:	805a      	strh	r2, [r3, #2]
	cia_row_ports[2] = KB_Row2_GPIO_Port;
 800279a:	4b6b      	ldr	r3, [pc, #428]	@ (8002948 <main+0x258>)
 800279c:	4a6d      	ldr	r2, [pc, #436]	@ (8002954 <main+0x264>)
 800279e:	609a      	str	r2, [r3, #8]
	cia_row_pins[2] = KB_Row2_Pin;
 80027a0:	4b6a      	ldr	r3, [pc, #424]	@ (800294c <main+0x25c>)
 80027a2:	2240      	movs	r2, #64	@ 0x40
 80027a4:	809a      	strh	r2, [r3, #4]
	cia_row_ports[3] = KB_Row3_GPIO_Port;
 80027a6:	4b68      	ldr	r3, [pc, #416]	@ (8002948 <main+0x258>)
 80027a8:	4a69      	ldr	r2, [pc, #420]	@ (8002950 <main+0x260>)
 80027aa:	60da      	str	r2, [r3, #12]
	cia_row_pins[3] = KB_Row3_Pin;
 80027ac:	4b67      	ldr	r3, [pc, #412]	@ (800294c <main+0x25c>)
 80027ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b2:	80da      	strh	r2, [r3, #6]
	cia_row_ports[4] = KB_Row4_GPIO_Port;
 80027b4:	4b64      	ldr	r3, [pc, #400]	@ (8002948 <main+0x258>)
 80027b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027ba:	611a      	str	r2, [r3, #16]
	cia_row_pins[4] = KB_Row4_Pin;
 80027bc:	4b63      	ldr	r3, [pc, #396]	@ (800294c <main+0x25c>)
 80027be:	2240      	movs	r2, #64	@ 0x40
 80027c0:	811a      	strh	r2, [r3, #8]
	cia_row_ports[5] = KB_Row5_GPIO_Port;
 80027c2:	4b61      	ldr	r3, [pc, #388]	@ (8002948 <main+0x258>)
 80027c4:	4a63      	ldr	r2, [pc, #396]	@ (8002954 <main+0x264>)
 80027c6:	615a      	str	r2, [r3, #20]
	cia_row_pins[5] = KB_Row5_Pin;
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <main+0x25c>)
 80027ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ce:	815a      	strh	r2, [r3, #10]
	cia_row_ports[6] = KB_Row6_GPIO_Port;
 80027d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002948 <main+0x258>)
 80027d2:	4a60      	ldr	r2, [pc, #384]	@ (8002954 <main+0x264>)
 80027d4:	619a      	str	r2, [r3, #24]
	cia_row_pins[6] = KB_Row6_Pin;
 80027d6:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <main+0x25c>)
 80027d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027dc:	819a      	strh	r2, [r3, #12]
	cia_row_ports[7] = KB_Row7_GPIO_Port;
 80027de:	4b5a      	ldr	r3, [pc, #360]	@ (8002948 <main+0x258>)
 80027e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027e4:	61da      	str	r2, [r3, #28]
	cia_row_pins[7] = KB_Row7_Pin;
 80027e6:	4b59      	ldr	r3, [pc, #356]	@ (800294c <main+0x25c>)
 80027e8:	2280      	movs	r2, #128	@ 0x80
 80027ea:	81da      	strh	r2, [r3, #14]

	cia_col_ports[0] = KB_Col0_GPIO_Port;
 80027ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002958 <main+0x268>)
 80027ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027f2:	601a      	str	r2, [r3, #0]
	cia_col_pins[0] = KB_Col0_Pin;
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <main+0x26c>)
 80027f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fa:	801a      	strh	r2, [r3, #0]
	cia_col_ports[1] = KB_Col1_GPIO_Port;
 80027fc:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <main+0x268>)
 80027fe:	4a54      	ldr	r2, [pc, #336]	@ (8002950 <main+0x260>)
 8002800:	605a      	str	r2, [r3, #4]
	cia_col_pins[1] = KB_Col1_Pin;
 8002802:	4b56      	ldr	r3, [pc, #344]	@ (800295c <main+0x26c>)
 8002804:	2210      	movs	r2, #16
 8002806:	805a      	strh	r2, [r3, #2]
	cia_col_ports[2] = KB_Col2_GPIO_Port;
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <main+0x268>)
 800280a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800280e:	609a      	str	r2, [r3, #8]
	cia_col_pins[2] = KB_Col2_Pin;
 8002810:	4b52      	ldr	r3, [pc, #328]	@ (800295c <main+0x26c>)
 8002812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002816:	809a      	strh	r2, [r3, #4]
	cia_col_ports[3] = KB_Col3_GPIO_Port;
 8002818:	4b4f      	ldr	r3, [pc, #316]	@ (8002958 <main+0x268>)
 800281a:	4a4e      	ldr	r2, [pc, #312]	@ (8002954 <main+0x264>)
 800281c:	60da      	str	r2, [r3, #12]
	cia_col_pins[3] = KB_Col3_Pin;
 800281e:	4b4f      	ldr	r3, [pc, #316]	@ (800295c <main+0x26c>)
 8002820:	2208      	movs	r2, #8
 8002822:	80da      	strh	r2, [r3, #6]
	cia_col_ports[4] = KB_Col4_GPIO_Port;
 8002824:	4b4c      	ldr	r3, [pc, #304]	@ (8002958 <main+0x268>)
 8002826:	4a4b      	ldr	r2, [pc, #300]	@ (8002954 <main+0x264>)
 8002828:	611a      	str	r2, [r3, #16]
	cia_col_pins[4] = KB_Col4_Pin;
 800282a:	4b4c      	ldr	r3, [pc, #304]	@ (800295c <main+0x26c>)
 800282c:	2220      	movs	r2, #32
 800282e:	811a      	strh	r2, [r3, #8]
	cia_col_ports[5] = KB_Col5_GPIO_Port;
 8002830:	4b49      	ldr	r3, [pc, #292]	@ (8002958 <main+0x268>)
 8002832:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <main+0x264>)
 8002834:	615a      	str	r2, [r3, #20]
	cia_col_pins[5] = KB_Col5_Pin;
 8002836:	4b49      	ldr	r3, [pc, #292]	@ (800295c <main+0x26c>)
 8002838:	2210      	movs	r2, #16
 800283a:	815a      	strh	r2, [r3, #10]
	cia_col_ports[6] = KB_Col6_GPIO_Port;
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <main+0x268>)
 800283e:	4a45      	ldr	r2, [pc, #276]	@ (8002954 <main+0x264>)
 8002840:	619a      	str	r2, [r3, #24]
	cia_col_pins[6] = KB_Col6_Pin;
 8002842:	4b46      	ldr	r3, [pc, #280]	@ (800295c <main+0x26c>)
 8002844:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002848:	819a      	strh	r2, [r3, #12]
	cia_col_ports[7] = KB_Col7_GPIO_Port;
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <main+0x268>)
 800284c:	4a41      	ldr	r2, [pc, #260]	@ (8002954 <main+0x264>)
 800284e:	61da      	str	r2, [r3, #28]
	cia_col_pins[7] = KB_Col7_Pin;
 8002850:	4b42      	ldr	r3, [pc, #264]	@ (800295c <main+0x26c>)
 8002852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002856:	81da      	strh	r2, [r3, #14]

	reset();
 8002858:	f7fd ff14 	bl	8000684 <reset>
	ram[0xff0] = ram[0xff1] = ram[0xff2] = 0;
 800285c:	4b40      	ldr	r3, [pc, #256]	@ (8002960 <main+0x270>)
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2ff2 	strb.w	r2, [r3, #4082]	@ 0xff2
 8002864:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <main+0x270>)
 8002866:	f893 2ff2 	ldrb.w	r2, [r3, #4082]	@ 0xff2
 800286a:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <main+0x270>)
 800286c:	f883 2ff1 	strb.w	r2, [r3, #4081]	@ 0xff1
 8002870:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <main+0x270>)
 8002872:	f893 2ff1 	ldrb.w	r2, [r3, #4081]	@ 0xff1
 8002876:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <main+0x270>)
 8002878:	f883 2ff0 	strb.w	r2, [r3, #4080]	@ 0xff0
	while (1)
	{
		if (c64_irq)
 800287c:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <main+0x274>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <main+0x19e>
		{
			irq();
 8002884:	f7fd ff4c 	bl	8000720 <irq>
			c64_irq = 0;
 8002888:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <main+0x274>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
		}
		if (pc == 0xe544)
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <main+0x278>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f24e 5244 	movw	r2, #58692	@ 0xe544
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <main+0x1ae>
		{
			display_clear();
 800289a:	f7ff fc27 	bl	80020ec <display_clear>
		}
		if (pc == 0xe5cd)
 800289e:	4b32      	ldr	r3, [pc, #200]	@ (8002968 <main+0x278>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f24e 52cd 	movw	r2, #58829	@ 0xe5cd
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12a      	bne.n	8002900 <main+0x210>
		{
			// siehe 0xEB35
			uint8_t kb_index = (uint8_t)mem_read(0xc6);
 80028aa:	20c6      	movs	r0, #198	@ 0xc6
 80028ac:	f7ff fc40 	bl	8002130 <mem_read>
 80028b0:	4603      	mov	r3, r0
 80028b2:	70fb      	strb	r3, [r7, #3]
			if (kb_index < (uint8_t)mem_read(0x0289))
 80028b4:	f240 2089 	movw	r0, #649	@ 0x289
 80028b8:	f7ff fc3a 	bl	8002130 <mem_read>
 80028bc:	4603      	mov	r3, r0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d21c      	bcs.n	8002900 <main+0x210>
			{
				int c = 0; // getchar();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
				if (c > 0)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dd17      	ble.n	8002900 <main+0x210>
				{
					if (c == '\n')
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b0a      	cmp	r3, #10
 80028d4:	d101      	bne.n	80028da <main+0x1ea>
						c = '\r';
 80028d6:	230d      	movs	r3, #13
 80028d8:	607b      	str	r3, [r7, #4]
					mem_write(0x0277 + kb_index, c);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f203 2377 	addw	r3, r3, #631	@ 0x277
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	b252      	sxtb	r2, r2
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fd00 	bl	80022f0 <mem_write>
					mem_write(0xc6, kb_index + 1);
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	20c6      	movs	r0, #198	@ 0xc6
 80028fc:	f7ff fcf8 	bl	80022f0 <mem_write>
				}
			}
		}
		if (pc == 0xe716)
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <main+0x278>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f24e 7216 	movw	r2, #59158	@ 0xe716
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <main+0x22e>
		{
			if (a == '\r')
 800290c:	4b17      	ldr	r3, [pc, #92]	@ (800296c <main+0x27c>)
 800290e:	f993 3000 	ldrsb.w	r3, [r3]
 8002912:	2b0d      	cmp	r3, #13
 8002914:	d003      	beq.n	800291e <main+0x22e>
				; // putchar('\n');
			else if (a == 0x1d)
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <main+0x27c>)
 8002918:	f993 3000 	ldrsb.w	r3, [r3]
 800291c:	2b1d      	cmp	r3, #29
				; // putchar(' ');
			else if ((uint8_t)a != 0x93)
				; // putchar(a);
		}
		if (HAL_GPIO_ReadPin(KB_Restore_GPIO_Port, KB_Restore_Pin) == GPIO_PIN_RESET)
 800291e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002922:	480b      	ldr	r0, [pc, #44]	@ (8002950 <main+0x260>)
 8002924:	f002 f938 	bl	8004b98 <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <main+0x242>
		{
			nmi();
 800292e:	f7fd ff53 	bl	80007d8 <nmi>
		}
		exec_ins();
 8002932:	f7fe fdab 	bl	800148c <exec_ins>
		if (c64_irq)
 8002936:	e7a1      	b.n	800287c <main+0x18c>
 8002938:	20007c3c 	.word	0x20007c3c
 800293c:	20007a74 	.word	0x20007a74
 8002940:	20007b1c 	.word	0x20007b1c
 8002944:	20007b68 	.word	0x20007b68
 8002948:	20015718 	.word	0x20015718
 800294c:	20015758 	.word	0x20015758
 8002950:	48000800 	.word	0x48000800
 8002954:	48000400 	.word	0x48000400
 8002958:	20015778 	.word	0x20015778
 800295c:	200157b8 	.word	0x200157b8
 8002960:	200000f4 	.word	0x200000f4
 8002964:	200157d8 	.word	0x200157d8
 8002968:	2000111e 	.word	0x2000111e
 800296c:	20001120 	.word	0x20001120

08002970 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b096      	sub	sp, #88	@ 0x58
 8002974:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	2244      	movs	r2, #68	@ 0x44
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f005 fc49 	bl	8008216 <memset>
		0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	611a      	str	r2, [r3, #16]
		0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002992:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002996:	f002 f957 	bl	8004c48 <HAL_PWREx_ControlVoltageScaling>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80029a0:	f000 fba0 	bl	80030e4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a4:	2302      	movs	r3, #2
 80029a6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ac:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ae:	2310      	movs	r3, #16
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b2:	2302      	movs	r3, #2
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029b6:	2302      	movs	r3, #2
 80029b8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80029be:	230a      	movs	r3, #10
 80029c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029c2:	2307      	movs	r3, #7
 80029c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 f98e 	bl	8004cf4 <HAL_RCC_OscConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80029de:	f000 fb81 	bl	80030e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80029e2:	230f      	movs	r3, #15
 80029e4:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e6:	2303      	movs	r3, #3
 80029e8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029f6:	463b      	mov	r3, r7
 80029f8:	2104      	movs	r1, #4
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fd56 	bl	80054ac <HAL_RCC_ClockConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8002a06:	f000 fb6d 	bl	80030e4 <Error_Handler>
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	3758      	adds	r7, #88	@ 0x58
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2224      	movs	r2, #36	@ 0x24
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 fbf8 	bl	8008216 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8002a26:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <MX_DAC1_Init+0x5c>)
 8002a28:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <MX_DAC1_Init+0x60>)
 8002a2a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a2c:	4810      	ldr	r0, [pc, #64]	@ (8002a70 <MX_DAC1_Init+0x5c>)
 8002a2e:	f001 f9f8 	bl	8003e22 <HAL_DAC_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8002a38:	f000 fb54 	bl	80030e4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8002a40:	232c      	movs	r3, #44	@ 0x2c
 8002a42:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002a44:	2302      	movs	r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <MX_DAC1_Init+0x5c>)
 8002a58:	f001 fb40 	bl	80040dc <HAL_DAC_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 8002a62:	f000 fb3f 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	@ 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20007a74 	.word	0x20007a74
 8002a74:	40007400 	.word	0x40007400

08002a78 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	@ 0x38
 8002a7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8002a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
		0 };
	TIM_OC_InitTypeDef sConfigOC = {
 8002a98:	463b      	mov	r3, r7
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	611a      	str	r2, [r3, #16]
 8002aa6:	615a      	str	r2, [r3, #20]
 8002aa8:	619a      	str	r2, [r3, #24]
		0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab8:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1600000;
 8002abe:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002ac0:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <MX_TIM2_Init+0xec>)
 8002ac2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aca:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ad0:	4823      	ldr	r0, [pc, #140]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002ad2:	f003 fbcb 	bl	800626c <HAL_TIM_Base_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 8002adc:	f000 fb02 	bl	80030e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aea:	4619      	mov	r1, r3
 8002aec:	481c      	ldr	r0, [pc, #112]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002aee:	f004 f845 	bl	8006b7c <HAL_TIM_ConfigClockSource>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8002af8:	f000 faf4 	bl	80030e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002afc:	4818      	ldr	r0, [pc, #96]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002afe:	f003 fd46 	bl	800658e <HAL_TIM_PWM_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8002b08:	f000 faec 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4811      	ldr	r0, [pc, #68]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002b1c:	f004 fd36 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 8002b26:	f000 fadd 	bl	80030e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002b2a:	2370      	movs	r3, #112	@ 0x70
 8002b2c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002b32:	2302      	movs	r3, #2
 8002b34:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002b42:	f003 ff07 	bl	8006954 <HAL_TIM_PWM_ConfigChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8002b4c:	f000 faca 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002b50:	4803      	ldr	r0, [pc, #12]	@ (8002b60 <MX_TIM2_Init+0xe8>)
 8002b52:	f000 fe99 	bl	8003888 <HAL_TIM_MspPostInit>

}
 8002b56:	bf00      	nop
 8002b58:	3738      	adds	r7, #56	@ 0x38
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20007ad0 	.word	0x20007ad0
 8002b64:	00186a00 	.word	0x00186a00

08002b68 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
		0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <MX_TIM4_Init+0x98>)
 8002b8a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 21;
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002b9a:	2215      	movs	r2, #21
 8002b9c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002ba6:	2280      	movs	r2, #128	@ 0x80
 8002ba8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002baa:	4814      	ldr	r0, [pc, #80]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002bac:	f003 fb5e 	bl	800626c <HAL_TIM_Base_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8002bb6:	f000 fa95 	bl	80030e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bbe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480d      	ldr	r0, [pc, #52]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002bc8:	f003 ffd8 	bl	8006b7c <HAL_TIM_ConfigClockSource>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8002bd2:	f000 fa87 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	@ (8002bfc <MX_TIM4_Init+0x94>)
 8002be4:	f004 fcd2 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8002bee:	f000 fa79 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20007b1c 	.word	0x20007b1c
 8002c00:	40000800 	.word	0x40000800

08002c04 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b09a      	sub	sp, #104	@ 0x68
 8002c08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8002c0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8002c18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
		0 };
	TIM_OC_InitTypeDef sConfigOC = {
 8002c24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	615a      	str	r2, [r3, #20]
 8002c36:	619a      	str	r2, [r3, #24]
		0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	222c      	movs	r2, #44	@ 0x2c
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f005 fae9 	bl	8008216 <memset>
		0 };

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8002c44:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c46:	4a3d      	ldr	r2, [pc, #244]	@ (8002d3c <MX_TIM15_Init+0x138>)
 8002c48:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 26666 - 1;
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c4c:	f646 0229 	movw	r2, #26665	@ 0x6829
 8002c50:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 50;
 8002c58:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c5a:	2232      	movs	r2, #50	@ 0x32
 8002c5c:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5e:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8002c64:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c70:	4831      	ldr	r0, [pc, #196]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c72:	f003 fafb 	bl	800626c <HAL_TIM_Base_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM15_Init+0x7c>
	{
		Error_Handler();
 8002c7c:	f000 fa32 	bl	80030e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c84:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	482a      	ldr	r0, [pc, #168]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c8e:	f003 ff75 	bl	8006b7c <HAL_TIM_ConfigClockSource>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM15_Init+0x98>
	{
		Error_Handler();
 8002c98:	f000 fa24 	bl	80030e4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8002c9c:	4826      	ldr	r0, [pc, #152]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002c9e:	f003 fc15 	bl	80064cc <HAL_TIM_OC_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM15_Init+0xa8>
	{
		Error_Handler();
 8002ca8:	f000 fa1c 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002cb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481f      	ldr	r0, [pc, #124]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002cbc:	f004 fc66 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM15_Init+0xc6>
	{
		Error_Handler();
 8002cc6:	f000 fa0d 	bl	80030e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cea:	2200      	movs	r2, #0
 8002cec:	4619      	mov	r1, r3
 8002cee:	4812      	ldr	r0, [pc, #72]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002cf0:	f003 fdb6 	bl	8006860 <HAL_TIM_OC_ConfigChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM15_Init+0xfa>
	{
		Error_Handler();
 8002cfa:	f000 f9f3 	bl	80030e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d16:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_TIM15_Init+0x134>)
 8002d22:	f004 fcbb 	bl	800769c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM15_Init+0x12c>
	{
		Error_Handler();
 8002d2c:	f000 f9da 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	3768      	adds	r7, #104	@ 0x68
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20007b68 	.word	0x20007b68
 8002d3c:	40014000 	.word	0x40014000

08002d40 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002d44:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d46:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <MX_USART2_UART_Init+0x5c>)
 8002d48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002d4a:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d76:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d82:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <MX_USART2_UART_Init+0x58>)
 8002d84:	f004 fd26 	bl	80077d4 <HAL_UART_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8002d8e:	f000 f9a9 	bl	80030e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20007bb4 	.word	0x20007bb4
 8002d9c:	40004400 	.word	0x40004400

08002da0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002da6:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <MX_DMA_Init+0x38>)
 8002da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002daa:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <MX_DMA_Init+0x38>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MX_DMA_Init+0x38>)
 8002db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	200d      	movs	r0, #13
 8002dc4:	f000 fff7 	bl	8003db6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002dc8:	200d      	movs	r0, #13
 8002dca:	f001 f810 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
		0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	4b54      	ldr	r3, [pc, #336]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	4a53      	ldr	r2, [pc, #332]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e16:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4b48      	ldr	r3, [pc, #288]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	4a47      	ldr	r2, [pc, #284]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2e:	4b45      	ldr	r3, [pc, #276]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	4a41      	ldr	r2, [pc, #260]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <MX_GPIO_Init+0x168>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | KB_Col0_Pin | KB_Col2_Pin, GPIO_PIN_RESET);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e5c:	f001 feb4 	bl	8004bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(KB_Col1_GPIO_Port, KB_Col1_Pin, GPIO_PIN_RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2110      	movs	r1, #16
 8002e64:	4838      	ldr	r0, [pc, #224]	@ (8002f48 <MX_GPIO_Init+0x16c>)
 8002e66:	f001 feaf 	bl	8004bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, KB_Col6_Pin | KB_Col7_Pin | KB_Col3_Pin | KB_Col5_Pin
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f242 4138 	movw	r1, #9272	@ 0x2438
 8002e70:	4836      	ldr	r0, [pc, #216]	@ (8002f4c <MX_GPIO_Init+0x170>)
 8002e72:	f001 fea9 	bl	8004bc8 <HAL_GPIO_WritePin>
		| KB_Col4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	482e      	ldr	r0, [pc, #184]	@ (8002f48 <MX_GPIO_Init+0x16c>)
 8002e8e:	f001 fcd9 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin KB_Col0_Pin KB_Col2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | KB_Col0_Pin | KB_Col2_Pin;
 8002e92:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8002e96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eae:	f001 fcc9 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : KB_Row4_Pin KB_Row7_Pin KB_Row0_Pin */
	GPIO_InitStruct.Pin = KB_Row4_Pin | KB_Row7_Pin | KB_Row0_Pin;
 8002eb2:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002eb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eca:	f001 fcbb 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pin : KB_Col1_Pin */
	GPIO_InitStruct.Pin = KB_Col1_Pin;
 8002ece:	2310      	movs	r3, #16
 8002ed0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(KB_Col1_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4818      	ldr	r0, [pc, #96]	@ (8002f48 <MX_GPIO_Init+0x16c>)
 8002ee6:	f001 fcad 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : KB_Col6_Pin KB_Col7_Pin KB_Col3_Pin KB_Col5_Pin
	 KB_Col4_Pin */
	GPIO_InitStruct.Pin = KB_Col6_Pin | KB_Col7_Pin | KB_Col3_Pin | KB_Col5_Pin
 8002eea:	f242 4338 	movw	r3, #9272	@ 0x2438
 8002eee:	617b      	str	r3, [r7, #20]
		| KB_Col4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	4812      	ldr	r0, [pc, #72]	@ (8002f4c <MX_GPIO_Init+0x170>)
 8002f04:	f001 fc9e 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : KB_Row1_Pin KB_Row3_Pin KB_Restore_Pin */
	GPIO_InitStruct.Pin = KB_Row1_Pin | KB_Row3_Pin | KB_Restore_Pin;
 8002f08:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8002f0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480a      	ldr	r0, [pc, #40]	@ (8002f48 <MX_GPIO_Init+0x16c>)
 8002f1e:	f001 fc91 	bl	8004844 <HAL_GPIO_Init>

	/*Configure GPIO pins : KB_Row2_Pin KB_Row6_Pin KB_Row5_Pin */
	GPIO_InitStruct.Pin = KB_Row2_Pin | KB_Row6_Pin | KB_Row5_Pin;
 8002f22:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002f26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <MX_GPIO_Init+0x170>)
 8002f38:	f001 fc84 	bl	8004844 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3728      	adds	r7, #40	@ 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48000800 	.word	0x48000800
 8002f4c:	48000400 	.word	0x48000400

08002f50 <HAL_DAC_ConvHalfCpltCallbackCh1>:

	return ch;
}

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f58:	2120      	movs	r1, #32
 8002f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5e:	f001 fe4b 	bl	8004bf8 <HAL_GPIO_TogglePin>
	PAL_IntHalfCplt(&hpal1);
 8002f62:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x2c>)
 8002f64:	f000 f9f4 	bl	8003350 <PAL_IntHalfCplt>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f68:	2120      	movs	r1, #32
 8002f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f6e:	f001 fe43 	bl	8004bf8 <HAL_GPIO_TogglePin>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20007c3c 	.word	0x20007c3c

08002f80 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f88:	2120      	movs	r1, #32
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f8e:	f001 fe33 	bl	8004bf8 <HAL_GPIO_TogglePin>
	PAL_IntCplt(&hpal1);
 8002f92:	4806      	ldr	r0, [pc, #24]	@ (8002fac <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8002f94:	f000 fab2 	bl	80034fc <PAL_IntCplt>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f98:	2120      	movs	r1, #32
 8002f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f9e:	f001 fe2b 	bl	8004bf8 <HAL_GPIO_TogglePin>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20007c3c 	.word	0x20007c3c

08002fb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d102      	bne.n	8002fc8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		c64_irq = 1;
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
	}
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	200157d8 	.word	0x200157d8

08002fdc <gpio_read_row>:

uint8_t gpio_read_row(uint8_t pin)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(cia_row_ports[pin], cia_row_pins[pin]) == GPIO_PIN_SET ? 1 : 0;
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <gpio_read_row+0x38>)
 8002fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4909      	ldr	r1, [pc, #36]	@ (8003018 <gpio_read_row+0x3c>)
 8002ff2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f001 fdcd 	bl	8004b98 <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20015718 	.word	0x20015718
 8003018:	20015758 	.word	0x20015758

0800301c <gpio_write_col>:

void gpio_write_col(uint8_t pin, uint8_t state)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	460a      	mov	r2, r1
 8003026:	71fb      	strb	r3, [r7, #7]
 8003028:	4613      	mov	r3, r2
 800302a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(cia_col_ports[pin], cia_col_pins[pin], state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <gpio_write_col+0x3c>)
 8003030:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <gpio_write_col+0x40>)
 8003038:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800303c:	79bb      	ldrb	r3, [r7, #6]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	f001 fdbd 	bl	8004bc8 <HAL_GPIO_WritePin>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20015778 	.word	0x20015778
 800305c:	200157b8 	.word	0x200157b8

08003060 <display_set_pixel>:

void display_set_pixel(uint16_t x, uint16_t y, bool state)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
 800306a:	460b      	mov	r3, r1
 800306c:	80bb      	strh	r3, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	70fb      	strb	r3, [r7, #3]
	// centering
	x += 27;
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	331b      	adds	r3, #27
 8003076:	80fb      	strh	r3, [r7, #6]
	y += 45;
 8003078:	88bb      	ldrh	r3, [r7, #4]
 800307a:	332d      	adds	r3, #45	@ 0x2d
 800307c:	80bb      	strh	r3, [r7, #4]
	// neccessary sacrifices
	x /= 2;
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	80fb      	strh	r3, [r7, #6]
	y += 4;
 8003084:	88bb      	ldrh	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	80bb      	strh	r3, [r7, #4]
	if (x < PAL_FRAME_LINE_LEN && y < PAL_FRAME_LINE_COUNT)
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2bc0      	cmp	r3, #192	@ 0xc0
 800308e:	d821      	bhi.n	80030d4 <display_set_pixel+0x74>
 8003090:	88bb      	ldrh	r3, [r7, #4]
 8003092:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8003096:	d81d      	bhi.n	80030d4 <display_set_pixel+0x74>
	{
		if (state)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <display_set_pixel+0x5a>
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = PAL_WHITE;
 800309e:	88ba      	ldrh	r2, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	019b      	lsls	r3, r3, #6
 80030a8:	441a      	add	r2, r3
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4413      	add	r3, r2
 80030ae:	4a0c      	ldr	r2, [pc, #48]	@ (80030e0 <display_set_pixel+0x80>)
 80030b0:	4413      	add	r3, r2
 80030b2:	224d      	movs	r2, #77	@ 0x4d
 80030b4:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
		else
		{
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = PAL_BLACK;
		}
	}
}
 80030b8:	e00c      	b.n	80030d4 <display_set_pixel+0x74>
			hpal1.frame_buffer[y * PAL_FRAME_LINE_LEN + x] = PAL_BLACK;
 80030ba:	88ba      	ldrh	r2, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	019b      	lsls	r3, r3, #6
 80030c4:	441a      	add	r2, r3
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4413      	add	r3, r2
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <display_set_pixel+0x80>)
 80030cc:	4413      	add	r3, r2
 80030ce:	2217      	movs	r2, #23
 80030d0:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20007c3c 	.word	0x20007c3c

080030e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <Error_Handler+0x8>

080030f0 <PAL_Init>:
void PAL_CopyBuffer(PAL_t *hpal, uint32_t n, uint8_t second);
void PAL_CopyLine(PAL_t *hpal, uint32_t n, uint8_t second);
void PAL_SetBuffer(PAL_t *hpal, uint8_t second);

void PAL_Init(PAL_t *hpal)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	@ 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < sizeof(hpal->dma_buffer); i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fc:	e008      	b.n	8003110 <PAL_Init+0x20>
	{
		hpal->dma_buffer[i] = PAL_ZERO;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	4413      	add	r3, r2
 8003104:	3310      	adds	r3, #16
 8003106:	2217      	movs	r2, #23
 8003108:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(hpal->dma_buffer); i++)
 800310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310c:	3301      	adds	r3, #1
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	2be8      	cmp	r3, #232	@ 0xe8
 8003114:	d9f3      	bls.n	80030fe <PAL_Init+0xe>
	}
	for (uint32_t i = 0; i < sizeof(pal_line_buffers); i++)
 8003116:	2300      	movs	r3, #0
 8003118:	633b      	str	r3, [r7, #48]	@ 0x30
 800311a:	e007      	b.n	800312c <PAL_Init+0x3c>
	{
		pal_line_buffers[i] = PAL_ZERO;
 800311c:	4a7c      	ldr	r2, [pc, #496]	@ (8003310 <PAL_Init+0x220>)
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	4413      	add	r3, r2
 8003122:	2217      	movs	r2, #23
 8003124:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(pal_line_buffers); i++)
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	3301      	adds	r3, #1
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	f240 428c 	movw	r2, #1164	@ 0x48c
 8003132:	4293      	cmp	r3, r2
 8003134:	d9f2      	bls.n	800311c <PAL_Init+0x2c>
	}

	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313a:	e01a      	b.n	8003172 <PAL_Init+0x82>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	4a75      	ldr	r2, [pc, #468]	@ (8003314 <PAL_Init+0x224>)
 8003140:	fba2 1203 	umull	r1, r2, r2, r3
 8003144:	1a99      	subs	r1, r3, r2
 8003146:	0849      	lsrs	r1, r1, #1
 8003148:	440a      	add	r2, r1
 800314a:	0992      	lsrs	r2, r2, #6
 800314c:	2175      	movs	r1, #117	@ 0x75
 800314e:	fb01 f202 	mul.w	r2, r1, r2
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
		pal_line_buffers[i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b63      	cmp	r3, #99	@ 0x63
 800315a:	d801      	bhi.n	8003160 <PAL_Init+0x70>
 800315c:	2100      	movs	r1, #0
 800315e:	e000      	b.n	8003162 <PAL_Init+0x72>
 8003160:	2117      	movs	r1, #23
 8003162:	4a6b      	ldr	r2, [pc, #428]	@ (8003310 <PAL_Init+0x220>)
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	4413      	add	r3, r2
 8003168:	460a      	mov	r2, r1
 800316a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316e:	3301      	adds	r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003174:	2be8      	cmp	r3, #232	@ 0xe8
 8003176:	d9e1      	bls.n	800313c <PAL_Init+0x4c>
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800317c:	e027      	b.n	80031ce <PAL_Init+0xde>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	4a64      	ldr	r2, [pc, #400]	@ (8003314 <PAL_Init+0x224>)
 8003182:	fba2 1203 	umull	r1, r2, r2, r3
 8003186:	1a99      	subs	r1, r3, r2
 8003188:	0849      	lsrs	r1, r1, #1
 800318a:	440a      	add	r2, r1
 800318c:	0992      	lsrs	r2, r2, #6
 800318e:	2175      	movs	r1, #117	@ 0x75
 8003190:	fb01 f202 	mul.w	r2, r1, r2
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	613b      	str	r3, [r7, #16]
		if (i < (PAL_LINE_LEN + 1) / 2)
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	2b74      	cmp	r3, #116	@ 0x74
 800319c:	d80a      	bhi.n	80031b4 <PAL_Init+0xc4>
		{
			pal_line_buffers[1 * PAL_LINE_LEN + i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b63      	cmp	r3, #99	@ 0x63
 80031a2:	d801      	bhi.n	80031a8 <PAL_Init+0xb8>
 80031a4:	2100      	movs	r1, #0
 80031a6:	e000      	b.n	80031aa <PAL_Init+0xba>
 80031a8:	2117      	movs	r1, #23
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	33e9      	adds	r3, #233	@ 0xe9
 80031ae:	4a58      	ldr	r2, [pc, #352]	@ (8003310 <PAL_Init+0x220>)
 80031b0:	54d1      	strb	r1, [r2, r3]
 80031b2:	e009      	b.n	80031c8 <PAL_Init+0xd8>
		}
		else
		{
			pal_line_buffers[1 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d801      	bhi.n	80031be <PAL_Init+0xce>
 80031ba:	2100      	movs	r1, #0
 80031bc:	e000      	b.n	80031c0 <PAL_Init+0xd0>
 80031be:	2117      	movs	r1, #23
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	33e9      	adds	r3, #233	@ 0xe9
 80031c4:	4a52      	ldr	r2, [pc, #328]	@ (8003310 <PAL_Init+0x220>)
 80031c6:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	3301      	adds	r3, #1
 80031cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	2be8      	cmp	r3, #232	@ 0xe8
 80031d2:	d9d4      	bls.n	800317e <PAL_Init+0x8e>
		}
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	e01a      	b.n	8003210 <PAL_Init+0x120>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <PAL_Init+0x224>)
 80031de:	fba2 1203 	umull	r1, r2, r2, r3
 80031e2:	1a99      	subs	r1, r3, r2
 80031e4:	0849      	lsrs	r1, r1, #1
 80031e6:	440a      	add	r2, r1
 80031e8:	0992      	lsrs	r2, r2, #6
 80031ea:	2175      	movs	r1, #117	@ 0x75
 80031ec:	fb01 f202 	mul.w	r2, r1, r2
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
		pal_line_buffers[2 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d801      	bhi.n	80031fe <PAL_Init+0x10e>
 80031fa:	2100      	movs	r1, #0
 80031fc:	e000      	b.n	8003200 <PAL_Init+0x110>
 80031fe:	2117      	movs	r1, #23
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	f503 73e9 	add.w	r3, r3, #466	@ 0x1d2
 8003206:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <PAL_Init+0x220>)
 8003208:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	3301      	adds	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	2be8      	cmp	r3, #232	@ 0xe8
 8003214:	d9e1      	bls.n	80031da <PAL_Init+0xea>
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
 800321a:	e029      	b.n	8003270 <PAL_Init+0x180>
	{
		uint32_t i1 = i % ((PAL_LINE_LEN + 1) / 2);
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	4a3d      	ldr	r2, [pc, #244]	@ (8003314 <PAL_Init+0x224>)
 8003220:	fba2 1203 	umull	r1, r2, r2, r3
 8003224:	1a99      	subs	r1, r3, r2
 8003226:	0849      	lsrs	r1, r1, #1
 8003228:	440a      	add	r2, r1
 800322a:	0992      	lsrs	r2, r2, #6
 800322c:	2175      	movs	r1, #117	@ 0x75
 800322e:	fb01 f202 	mul.w	r2, r1, r2
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
		if (i < (PAL_LINE_LEN + 1) / 2)
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	2b74      	cmp	r3, #116	@ 0x74
 800323a:	d80b      	bhi.n	8003254 <PAL_Init+0x164>
		{
			pal_line_buffers[3 * PAL_LINE_LEN + i] = i1 <= PAL_SHORT_PULSE ? PAL_OFF : PAL_ZERO;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b09      	cmp	r3, #9
 8003240:	d801      	bhi.n	8003246 <PAL_Init+0x156>
 8003242:	2100      	movs	r1, #0
 8003244:	e000      	b.n	8003248 <PAL_Init+0x158>
 8003246:	2117      	movs	r1, #23
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f203 23bb 	addw	r3, r3, #699	@ 0x2bb
 800324e:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <PAL_Init+0x220>)
 8003250:	54d1      	strb	r1, [r2, r3]
 8003252:	e00a      	b.n	800326a <PAL_Init+0x17a>
		}
		else
		{
			pal_line_buffers[3 * PAL_LINE_LEN + i] = i1 <= PAL_LONG_PULSE ? PAL_OFF : PAL_ZERO;
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b63      	cmp	r3, #99	@ 0x63
 8003258:	d801      	bhi.n	800325e <PAL_Init+0x16e>
 800325a:	2100      	movs	r1, #0
 800325c:	e000      	b.n	8003260 <PAL_Init+0x170>
 800325e:	2117      	movs	r1, #23
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f203 23bb 	addw	r3, r3, #699	@ 0x2bb
 8003266:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <PAL_Init+0x220>)
 8003268:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	3301      	adds	r3, #1
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2be8      	cmp	r3, #232	@ 0xe8
 8003274:	d9d2      	bls.n	800321c <PAL_Init+0x12c>
		}
	}
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e030      	b.n	80032de <PAL_Init+0x1ee>
	{
		if (i < PAL_LINE_SYNC)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b10      	cmp	r3, #16
 8003280:	d806      	bhi.n	8003290 <PAL_Init+0x1a0>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_OFF;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8003288:	4a21      	ldr	r2, [pc, #132]	@ (8003310 <PAL_Init+0x220>)
 800328a:	2100      	movs	r1, #0
 800328c:	54d1      	strb	r1, [r2, r3]
 800328e:	e023      	b.n	80032d8 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_SYNC + PAL_BACK_PORCH)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b28      	cmp	r3, #40	@ 0x28
 8003294:	d806      	bhi.n	80032a4 <PAL_Init+0x1b4>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <PAL_Init+0x220>)
 800329e:	2117      	movs	r1, #23
 80032a0:	54d1      	strb	r1, [r2, r3]
 80032a2:	e019      	b.n	80032d8 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_LEN - PAL_ONE_US - PAL_FRONT_PORCH)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2be2      	cmp	r3, #226	@ 0xe2
 80032a8:	d806      	bhi.n	80032b8 <PAL_Init+0x1c8>
		{
			// frame area
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80032b0:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <PAL_Init+0x220>)
 80032b2:	2117      	movs	r1, #23
 80032b4:	54d1      	strb	r1, [r2, r3]
 80032b6:	e00f      	b.n	80032d8 <PAL_Init+0x1e8>
		}
		else if (i < PAL_LINE_LEN - PAL_FRONT_PORCH)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2be2      	cmp	r3, #226	@ 0xe2
 80032bc:	d806      	bhi.n	80032cc <PAL_Init+0x1dc>
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO; // PAL_BLACK
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80032c4:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <PAL_Init+0x220>)
 80032c6:	2117      	movs	r1, #23
 80032c8:	54d1      	strb	r1, [r2, r3]
 80032ca:	e005      	b.n	80032d8 <PAL_Init+0x1e8>
		}
		else
		{
			pal_line_buffers[4 * PAL_LINE_LEN + i] = PAL_ZERO;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80032d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <PAL_Init+0x220>)
 80032d4:	2117      	movs	r1, #23
 80032d6:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < PAL_LINE_LEN; i++)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2be8      	cmp	r3, #232	@ 0xe8
 80032e2:	d9cb      	bls.n	800327c <PAL_Init+0x18c>
		}
	}

	hpal->line_counter = 0;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
	PAL_COPYBUFFER_DEF_1(hpal, 0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3310      	adds	r3, #16
 80032ee:	2274      	movs	r2, #116	@ 0x74
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <PAL_Init+0x220>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 ffbc 	bl	8008270 <memcpy>
	PAL_COPYBUFFER_DEF_2(hpal, 0);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3310      	adds	r3, #16
 80032fc:	3374      	adds	r3, #116	@ 0x74
 80032fe:	4906      	ldr	r1, [pc, #24]	@ (8003318 <PAL_Init+0x228>)
 8003300:	2275      	movs	r2, #117	@ 0x75
 8003302:	4618      	mov	r0, r3
 8003304:	f004 ffb4 	bl	8008270 <memcpy>
}
 8003308:	bf00      	nop
 800330a:	3738      	adds	r7, #56	@ 0x38
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200157dc 	.word	0x200157dc
 8003314:	18118119 	.word	0x18118119
 8003318:	20015850 	.word	0x20015850

0800331c <PAL_Start>:

void PAL_Start(PAL_t *hpal)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hpal->hdac, hpal->dac_channel, (uint32_t*)hpal->dma_buffer, PAL_LINE_LEN, DAC_ALIGN_8B_R);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f103 0210 	add.w	r2, r3, #16
 8003332:	2308      	movs	r3, #8
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	23e9      	movs	r3, #233	@ 0xe9
 8003338:	f000 fd96 	bl	8003e68 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(hpal->htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f002 ffeb 	bl	800631c <HAL_TIM_Base_Start>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <PAL_IntHalfCplt>:

void PAL_IntHalfCplt(PAL_t *hpal)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	uint32_t line = (hpal->line_counter + 1) % PAL_LINE_COUNT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	4a61      	ldr	r2, [pc, #388]	@ (80034e4 <PAL_IntHalfCplt+0x194>)
 8003360:	fba2 1203 	umull	r1, r2, r2, r3
 8003364:	0a52      	lsrs	r2, r2, #9
 8003366:	f240 2171 	movw	r1, #625	@ 0x271
 800336a:	fb01 f202 	mul.w	r2, r1, r2
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
	if (line == 0)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <PAL_IntHalfCplt+0x38>
	{
		PAL_COPYBUFFER_DEF_1(hpal, 0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3310      	adds	r3, #16
 800337c:	2274      	movs	r2, #116	@ 0x74
 800337e:	495a      	ldr	r1, [pc, #360]	@ (80034e8 <PAL_IntHalfCplt+0x198>)
 8003380:	4618      	mov	r0, r3
 8003382:	f004 ff75 	bl	8008270 <memcpy>
	}
	else if (line == 622)
	{
		PAL_COPYBUFFER_DEF_1(hpal, 2);
	}
}
 8003386:	e0a8      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 2)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <PAL_IntHalfCplt+0x4e>
		PAL_COPYBUFFER_DEF_1(hpal, 1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3310      	adds	r3, #16
 8003392:	4956      	ldr	r1, [pc, #344]	@ (80034ec <PAL_IntHalfCplt+0x19c>)
 8003394:	2274      	movs	r2, #116	@ 0x74
 8003396:	4618      	mov	r0, r3
 8003398:	f004 ff6a 	bl	8008270 <memcpy>
}
 800339c:	e09d      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 3)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d107      	bne.n	80033b4 <PAL_IntHalfCplt+0x64>
		PAL_COPYBUFFER_DEF_1(hpal, 2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3310      	adds	r3, #16
 80033a8:	4951      	ldr	r1, [pc, #324]	@ (80034f0 <PAL_IntHalfCplt+0x1a0>)
 80033aa:	2274      	movs	r2, #116	@ 0x74
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 ff5f 	bl	8008270 <memcpy>
}
 80033b2:	e092      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 5)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d107      	bne.n	80033ca <PAL_IntHalfCplt+0x7a>
		PAL_COPYBUFFER_DEF_1(hpal, 4);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3310      	adds	r3, #16
 80033be:	494d      	ldr	r1, [pc, #308]	@ (80034f4 <PAL_IntHalfCplt+0x1a4>)
 80033c0:	2274      	movs	r2, #116	@ 0x74
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 ff54 	bl	8008270 <memcpy>
}
 80033c8:	e087      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line >= 5 + PAL_BLANKING_LINES && line < 310)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b14      	cmp	r3, #20
 80033ce:	d919      	bls.n	8003404 <PAL_IntHalfCplt+0xb4>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80033d6:	d215      	bcs.n	8003404 <PAL_IntHalfCplt+0xb4>
		PAL_COPYLINE_DEF_1(hpal, line - 22);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3310      	adds	r3, #16
 80033dc:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	019b      	lsls	r3, r3, #6
 80033f0:	4413      	add	r3, r2
 80033f2:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 80033f6:	3b16      	subs	r3, #22
 80033f8:	440b      	add	r3, r1
 80033fa:	224b      	movs	r2, #75	@ 0x4b
 80033fc:	4619      	mov	r1, r3
 80033fe:	f004 ff37 	bl	8008270 <memcpy>
 8003402:	e06a      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 310)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800340a:	d107      	bne.n	800341c <PAL_IntHalfCplt+0xcc>
		PAL_COPYBUFFER_DEF_1(hpal, 2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3310      	adds	r3, #16
 8003410:	4937      	ldr	r1, [pc, #220]	@ (80034f0 <PAL_IntHalfCplt+0x1a0>)
 8003412:	2274      	movs	r2, #116	@ 0x74
 8003414:	4618      	mov	r0, r3
 8003416:	f004 ff2b 	bl	8008270 <memcpy>
}
 800341a:	e05e      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 312)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003422:	d107      	bne.n	8003434 <PAL_IntHalfCplt+0xe4>
		PAL_COPYBUFFER_DEF_1(hpal, 3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3310      	adds	r3, #16
 8003428:	4933      	ldr	r1, [pc, #204]	@ (80034f8 <PAL_IntHalfCplt+0x1a8>)
 800342a:	2274      	movs	r2, #116	@ 0x74
 800342c:	4618      	mov	r0, r3
 800342e:	f004 ff1f 	bl	8008270 <memcpy>
}
 8003432:	e052      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 313)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f240 1239 	movw	r2, #313	@ 0x139
 800343a:	4293      	cmp	r3, r2
 800343c:	d107      	bne.n	800344e <PAL_IntHalfCplt+0xfe>
		PAL_COPYBUFFER_DEF_1(hpal, 0);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3310      	adds	r3, #16
 8003442:	2274      	movs	r2, #116	@ 0x74
 8003444:	4928      	ldr	r1, [pc, #160]	@ (80034e8 <PAL_IntHalfCplt+0x198>)
 8003446:	4618      	mov	r0, r3
 8003448:	f004 ff12 	bl	8008270 <memcpy>
}
 800344c:	e045      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 315)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f240 123b 	movw	r2, #315	@ 0x13b
 8003454:	4293      	cmp	r3, r2
 8003456:	d107      	bne.n	8003468 <PAL_IntHalfCplt+0x118>
		PAL_COPYBUFFER_DEF_1(hpal, 2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3310      	adds	r3, #16
 800345c:	4924      	ldr	r1, [pc, #144]	@ (80034f0 <PAL_IntHalfCplt+0x1a0>)
 800345e:	2274      	movs	r2, #116	@ 0x74
 8003460:	4618      	mov	r0, r3
 8003462:	f004 ff05 	bl	8008270 <memcpy>
}
 8003466:	e038      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 317)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f240 123d 	movw	r2, #317	@ 0x13d
 800346e:	4293      	cmp	r3, r2
 8003470:	d107      	bne.n	8003482 <PAL_IntHalfCplt+0x132>
		PAL_COPYBUFFER_DEF_1(hpal, 4);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3310      	adds	r3, #16
 8003476:	491f      	ldr	r1, [pc, #124]	@ (80034f4 <PAL_IntHalfCplt+0x1a4>)
 8003478:	2274      	movs	r2, #116	@ 0x74
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fef8 	bl	8008270 <memcpy>
}
 8003480:	e02b      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line >= 317 + PAL_BLANKING_LINES && line < 622)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8003488:	d91a      	bls.n	80034c0 <PAL_IntHalfCplt+0x170>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f240 226d 	movw	r2, #621	@ 0x26d
 8003490:	4293      	cmp	r3, r2
 8003492:	d815      	bhi.n	80034c0 <PAL_IntHalfCplt+0x170>
		PAL_COPYLINE_DEF_1(hpal, line - 334);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3310      	adds	r3, #16
 8003498:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	019b      	lsls	r3, r3, #6
 80034ac:	4413      	add	r3, r2
 80034ae:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
 80034b2:	3bce      	subs	r3, #206	@ 0xce
 80034b4:	440b      	add	r3, r1
 80034b6:	224b      	movs	r2, #75	@ 0x4b
 80034b8:	4619      	mov	r1, r3
 80034ba:	f004 fed9 	bl	8008270 <memcpy>
 80034be:	e00c      	b.n	80034da <PAL_IntHalfCplt+0x18a>
	else if (line == 622)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f240 226e 	movw	r2, #622	@ 0x26e
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d107      	bne.n	80034da <PAL_IntHalfCplt+0x18a>
		PAL_COPYBUFFER_DEF_1(hpal, 2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3310      	adds	r3, #16
 80034ce:	4908      	ldr	r1, [pc, #32]	@ (80034f0 <PAL_IntHalfCplt+0x1a0>)
 80034d0:	2274      	movs	r2, #116	@ 0x74
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 fecc 	bl	8008270 <memcpy>
}
 80034d8:	e7ff      	b.n	80034da <PAL_IntHalfCplt+0x18a>
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	d1b71759 	.word	0xd1b71759
 80034e8:	200157dc 	.word	0x200157dc
 80034ec:	200158c5 	.word	0x200158c5
 80034f0:	200159ae 	.word	0x200159ae
 80034f4:	20015b80 	.word	0x20015b80
 80034f8:	20015a97 	.word	0x20015a97

080034fc <PAL_IntCplt>:

void PAL_IntCplt(PAL_t *hpal)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	uint32_t line = (hpal->line_counter + 1) % PAL_LINE_COUNT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	3301      	adds	r3, #1
 800350a:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <PAL_IntCplt+0x1ac>)
 800350c:	fba2 1203 	umull	r1, r2, r2, r3
 8003510:	0a52      	lsrs	r2, r2, #9
 8003512:	f240 2171 	movw	r1, #625	@ 0x271
 8003516:	fb01 f202 	mul.w	r2, r1, r2
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
	hpal->line_counter = line;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
	if (line == 0)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <PAL_IntCplt+0x40>
	{
		PAL_COPYBUFFER_DEF_2(hpal, 0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3310      	adds	r3, #16
 800352e:	3374      	adds	r3, #116	@ 0x74
 8003530:	495e      	ldr	r1, [pc, #376]	@ (80036ac <PAL_IntCplt+0x1b0>)
 8003532:	2275      	movs	r2, #117	@ 0x75
 8003534:	4618      	mov	r0, r3
 8003536:	f004 fe9b 	bl	8008270 <memcpy>
	}
	else if (line == 622)
	{
		PAL_COPYBUFFER_DEF_2(hpal, 2);
	}
}
 800353a:	e0b1      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 2)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d108      	bne.n	8003554 <PAL_IntCplt+0x58>
		PAL_COPYBUFFER_DEF_2(hpal, 1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3310      	adds	r3, #16
 8003546:	3374      	adds	r3, #116	@ 0x74
 8003548:	4959      	ldr	r1, [pc, #356]	@ (80036b0 <PAL_IntCplt+0x1b4>)
 800354a:	2275      	movs	r2, #117	@ 0x75
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fe8f 	bl	8008270 <memcpy>
}
 8003552:	e0a5      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 3)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d108      	bne.n	800356c <PAL_IntCplt+0x70>
		PAL_COPYBUFFER_DEF_2(hpal, 2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3310      	adds	r3, #16
 800355e:	3374      	adds	r3, #116	@ 0x74
 8003560:	4954      	ldr	r1, [pc, #336]	@ (80036b4 <PAL_IntCplt+0x1b8>)
 8003562:	2275      	movs	r2, #117	@ 0x75
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fe83 	bl	8008270 <memcpy>
}
 800356a:	e099      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 5)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d108      	bne.n	8003584 <PAL_IntCplt+0x88>
		PAL_COPYBUFFER_DEF_2(hpal, 4);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3310      	adds	r3, #16
 8003576:	3374      	adds	r3, #116	@ 0x74
 8003578:	494f      	ldr	r1, [pc, #316]	@ (80036b8 <PAL_IntCplt+0x1bc>)
 800357a:	2275      	movs	r2, #117	@ 0x75
 800357c:	4618      	mov	r0, r3
 800357e:	f004 fe77 	bl	8008270 <memcpy>
}
 8003582:	e08d      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line >= 5 + PAL_BLANKING_LINES && line < 310)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b14      	cmp	r3, #20
 8003588:	d919      	bls.n	80035be <PAL_IntCplt+0xc2>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003590:	d215      	bcs.n	80035be <PAL_IntCplt+0xc2>
		PAL_COPYLINE_DEF_2(hpal, line - 22);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3310      	adds	r3, #16
 8003596:	f103 0074 	add.w	r0, r3, #116	@ 0x74
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	4413      	add	r3, r2
 80035ac:	f5a3 5382 	sub.w	r3, r3, #4160	@ 0x1040
 80035b0:	3b0b      	subs	r3, #11
 80035b2:	440b      	add	r3, r1
 80035b4:	226f      	movs	r2, #111	@ 0x6f
 80035b6:	4619      	mov	r1, r3
 80035b8:	f004 fe5a 	bl	8008270 <memcpy>
 80035bc:	e070      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 310)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80035c4:	d108      	bne.n	80035d8 <PAL_IntCplt+0xdc>
		PAL_COPYBUFFER_DEF_2(hpal, 2);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3310      	adds	r3, #16
 80035ca:	3374      	adds	r3, #116	@ 0x74
 80035cc:	4939      	ldr	r1, [pc, #228]	@ (80036b4 <PAL_IntCplt+0x1b8>)
 80035ce:	2275      	movs	r2, #117	@ 0x75
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fe4d 	bl	8008270 <memcpy>
}
 80035d6:	e063      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 312)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80035de:	d108      	bne.n	80035f2 <PAL_IntCplt+0xf6>
		PAL_COPYBUFFER_DEF_2(hpal, 3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3310      	adds	r3, #16
 80035e4:	3374      	adds	r3, #116	@ 0x74
 80035e6:	4935      	ldr	r1, [pc, #212]	@ (80036bc <PAL_IntCplt+0x1c0>)
 80035e8:	2275      	movs	r2, #117	@ 0x75
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fe40 	bl	8008270 <memcpy>
}
 80035f0:	e056      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 313)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f240 1239 	movw	r2, #313	@ 0x139
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <PAL_IntCplt+0x112>
		PAL_COPYBUFFER_DEF_2(hpal, 0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3310      	adds	r3, #16
 8003600:	3374      	adds	r3, #116	@ 0x74
 8003602:	492a      	ldr	r1, [pc, #168]	@ (80036ac <PAL_IntCplt+0x1b0>)
 8003604:	2275      	movs	r2, #117	@ 0x75
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fe32 	bl	8008270 <memcpy>
}
 800360c:	e048      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 315)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f240 123b 	movw	r2, #315	@ 0x13b
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <PAL_IntCplt+0x12e>
		PAL_COPYBUFFER_DEF_2(hpal, 2);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3310      	adds	r3, #16
 800361c:	3374      	adds	r3, #116	@ 0x74
 800361e:	4925      	ldr	r1, [pc, #148]	@ (80036b4 <PAL_IntCplt+0x1b8>)
 8003620:	2275      	movs	r2, #117	@ 0x75
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fe24 	bl	8008270 <memcpy>
}
 8003628:	e03a      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 317)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f240 123d 	movw	r2, #317	@ 0x13d
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <PAL_IntCplt+0x14a>
		PAL_COPYBUFFER_DEF_2(hpal, 4);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3310      	adds	r3, #16
 8003638:	3374      	adds	r3, #116	@ 0x74
 800363a:	491f      	ldr	r1, [pc, #124]	@ (80036b8 <PAL_IntCplt+0x1bc>)
 800363c:	2275      	movs	r2, #117	@ 0x75
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fe16 	bl	8008270 <memcpy>
}
 8003644:	e02c      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line >= 317 + PAL_BLANKING_LINES && line < 622)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 800364c:	d91a      	bls.n	8003684 <PAL_IntCplt+0x188>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f240 226d 	movw	r2, #621	@ 0x26d
 8003654:	4293      	cmp	r3, r2
 8003656:	d815      	bhi.n	8003684 <PAL_IntCplt+0x188>
		PAL_COPYLINE_DEF_2(hpal, line - 334);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3310      	adds	r3, #16
 800365c:	f103 0074 	add.w	r0, r3, #116	@ 0x74
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	019b      	lsls	r3, r3, #6
 8003670:	4413      	add	r3, r2
 8003672:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
 8003676:	3b83      	subs	r3, #131	@ 0x83
 8003678:	440b      	add	r3, r1
 800367a:	226f      	movs	r2, #111	@ 0x6f
 800367c:	4619      	mov	r1, r3
 800367e:	f004 fdf7 	bl	8008270 <memcpy>
 8003682:	e00d      	b.n	80036a0 <PAL_IntCplt+0x1a4>
	else if (line == 622)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f240 226e 	movw	r2, #622	@ 0x26e
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <PAL_IntCplt+0x1a4>
		PAL_COPYBUFFER_DEF_2(hpal, 2);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3310      	adds	r3, #16
 8003692:	3374      	adds	r3, #116	@ 0x74
 8003694:	4907      	ldr	r1, [pc, #28]	@ (80036b4 <PAL_IntCplt+0x1b8>)
 8003696:	2275      	movs	r2, #117	@ 0x75
 8003698:	4618      	mov	r0, r3
 800369a:	f004 fde9 	bl	8008270 <memcpy>
}
 800369e:	e7ff      	b.n	80036a0 <PAL_IntCplt+0x1a4>
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	d1b71759 	.word	0xd1b71759
 80036ac:	20015850 	.word	0x20015850
 80036b0:	20015939 	.word	0x20015939
 80036b4:	20015a22 	.word	0x20015a22
 80036b8:	20015bf4 	.word	0x20015bf4
 80036bc:	20015b0b 	.word	0x20015b0b

080036c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <HAL_MspInit+0x44>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <HAL_MspInit+0x44>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_MspInit+0x44>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <HAL_MspInit+0x44>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <HAL_MspInit+0x44>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_MspInit+0x44>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000

08003708 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2e      	ldr	r2, [pc, #184]	@ (80037e0 <HAL_DAC_MspInit+0xd8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d155      	bne.n	80037d6 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800372a:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	4a2d      	ldr	r2, [pc, #180]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 8003730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b28      	ldr	r3, [pc, #160]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_DAC_MspInit+0xdc>)
 8003750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800375a:	2310      	movs	r3, #16
 800375c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4619      	mov	r1, r3
 800376c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003770:	f001 f868 	bl	8004844 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003774:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 8003776:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <HAL_DAC_MspInit+0xe4>)
 8003778:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 800377c:	2206      	movs	r2, #6
 800377e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 8003782:	2210      	movs	r2, #16
 8003784:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003786:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 8003788:	2200      	movs	r2, #0
 800378a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800378c:	4b16      	ldr	r3, [pc, #88]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 800378e:	2280      	movs	r2, #128	@ 0x80
 8003790:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003798:	4b13      	ldr	r3, [pc, #76]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037a4:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80037aa:	480f      	ldr	r0, [pc, #60]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 80037ac:	f000 fe52 	bl	8004454 <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80037b6:	f7ff fc95 	bl	80030e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	4a09      	ldr	r2, [pc, #36]	@ (80037e8 <HAL_DAC_MspInit+0xe0>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2036      	movs	r0, #54	@ 0x36
 80037cc:	f000 faf3 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037d0:	2036      	movs	r0, #54	@ 0x36
 80037d2:	f000 fb0c 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	@ 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40007400 	.word	0x40007400
 80037e4:	40021000 	.word	0x40021000
 80037e8:	20007a88 	.word	0x20007a88
 80037ec:	40020030 	.word	0x40020030

080037f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003800:	d10c      	bne.n	800381c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003802:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6593      	str	r3, [r2, #88]	@ 0x58
 800380e:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800381a:	e02a      	b.n	8003872 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <HAL_TIM_Base_MspInit+0x90>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003826:	4b15      	ldr	r3, [pc, #84]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	4a14      	ldr	r2, [pc, #80]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6593      	str	r3, [r2, #88]	@ 0x58
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]
}
 800383e:	e018      	b.n	8003872 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0f      	ldr	r2, [pc, #60]	@ (8003884 <HAL_TIM_Base_MspInit+0x94>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d113      	bne.n	8003872 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800384a:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	4a0b      	ldr	r2, [pc, #44]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	6613      	str	r3, [r2, #96]	@ 0x60
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_TIM_Base_MspInit+0x8c>)
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	2100      	movs	r1, #0
 8003866:	2018      	movs	r0, #24
 8003868:	f000 faa5 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800386c:	2018      	movs	r0, #24
 800386e:	f000 fabe 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40000800 	.word	0x40000800
 8003884:	40014000 	.word	0x40014000

08003888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d11d      	bne.n	80038e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_TIM_MspPostInit+0x68>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ae:	4a10      	ldr	r2, [pc, #64]	@ (80038f0 <HAL_TIM_MspPostInit+0x68>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_TIM_MspPostInit+0x68>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e2:	f000 ffaf 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b0ac      	sub	sp, #176	@ 0xb0
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2288      	movs	r2, #136	@ 0x88
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f004 fc7e 	bl	8008216 <memset>
  if(huart->Instance==USART2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <HAL_UART_MspInit+0xb0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d13b      	bne.n	800399c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003924:	2302      	movs	r3, #2
 8003926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003928:	2300      	movs	r3, #0
 800392a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4618      	mov	r0, r3
 8003932:	f001 ffdf 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800393c:	f7ff fbd2 	bl	80030e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003940:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	6593      	str	r3, [r2, #88]	@ 0x58
 800394c:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003958:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 800395a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_UART_MspInit+0xb4>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003970:	230c      	movs	r3, #12
 8003972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003982:	2303      	movs	r3, #3
 8003984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003988:	2307      	movs	r3, #7
 800398a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003992:	4619      	mov	r1, r3
 8003994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003998:	f000 ff54 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800399c:	bf00      	nop
 800399e:	37b0      	adds	r7, #176	@ 0xb0
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40004400 	.word	0x40004400
 80039a8:	40021000 	.word	0x40021000

080039ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <NMI_Handler+0x4>

080039b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <HardFault_Handler+0x4>

080039bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <MemManage_Handler+0x4>

080039c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <BusFault_Handler+0x4>

080039cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <UsageFault_Handler+0x4>

080039d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a02:	f000 f8b9 	bl	8003b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003a10:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <DMA1_Channel3_IRQHandler+0x10>)
 8003a12:	f000 fe37 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20007a88 	.word	0x20007a88

08003a20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003a24:	4802      	ldr	r0, [pc, #8]	@ (8003a30 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003a26:	f002 fe13 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20007b68 	.word	0x20007b68

08003a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003a38:	4802      	ldr	r0, [pc, #8]	@ (8003a44 <TIM6_DAC_IRQHandler+0x10>)
 8003a3a:	f000 fae1 	bl	8004000 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20007a74 	.word	0x20007a74

08003a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <SystemInit+0x20>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <SystemInit+0x20>)
 8003a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a70:	f7ff ffea 	bl	8003a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a74:	480c      	ldr	r0, [pc, #48]	@ (8003aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a76:	490d      	ldr	r1, [pc, #52]	@ (8003aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a78:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab0 <LoopForever+0xe>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a7c:	e002      	b.n	8003a84 <LoopCopyDataInit>

08003a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a82:	3304      	adds	r3, #4

08003a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a88:	d3f9      	bcc.n	8003a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab8 <LoopForever+0x16>)
  movs r3, #0
 8003a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a90:	e001      	b.n	8003a96 <LoopFillZerobss>

08003a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a94:	3204      	adds	r2, #4

08003a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a98:	d3fb      	bcc.n	8003a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a9a:	f004 fbc5 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a9e:	f7fe fe27 	bl	80026f0 <main>

08003aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8003aa2:	e7fe      	b.n	8003aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003aa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aac:	20001100 	.word	0x20001100
  ldr r2, =_sidata
 8003ab0:	0800d2fc 	.word	0x0800d2fc
  ldr r2, =_sbss
 8003ab4:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8003ab8:	20015c70 	.word	0x20015c70

08003abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003abc:	e7fe      	b.n	8003abc <ADC1_2_IRQHandler>
	...

08003ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <HAL_Init+0x3c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0b      	ldr	r2, [pc, #44]	@ (8003afc <HAL_Init+0x3c>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad6:	2003      	movs	r0, #3
 8003ad8:	f000 f962 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003adc:	2000      	movs	r0, #0
 8003ade:	f000 f80f 	bl	8003b00 <HAL_InitTick>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	e001      	b.n	8003af2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aee:	f7ff fde7 	bl	80036c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003af2:	79fb      	ldrb	r3, [r7, #7]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b0c:	4b17      	ldr	r3, [pc, #92]	@ (8003b6c <HAL_InitTick+0x6c>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d023      	beq.n	8003b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b14:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <HAL_InitTick+0x70>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <HAL_InitTick+0x6c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f96d 	bl	8003e0a <HAL_SYSTICK_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10f      	bne.n	8003b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d809      	bhi.n	8003b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f000 f937 	bl	8003db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b48:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <HAL_InitTick+0x74>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e007      	b.n	8003b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e004      	b.n	8003b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e001      	b.n	8003b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200010fc 	.word	0x200010fc
 8003b70:	200010f4 	.word	0x200010f4
 8003b74:	200010f8 	.word	0x200010f8

08003b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_IncTick+0x20>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_IncTick+0x24>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <HAL_IncTick+0x24>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200010fc 	.word	0x200010fc
 8003b9c:	20015c6c 	.word	0x20015c6c

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_GetTick+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20015c6c 	.word	0x20015c6c

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff ffee 	bl	8003ba0 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d005      	beq.n	8003bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <HAL_Delay+0x44>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bde:	bf00      	nop
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d8f7      	bhi.n	8003be0 <HAL_Delay+0x28>
  {
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200010fc 	.word	0x200010fc

08003c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c32:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	60d3      	str	r3, [r2, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c4c:	4b04      	ldr	r3, [pc, #16]	@ (8003c60 <__NVIC_GetPriorityGrouping+0x18>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 0307 	and.w	r3, r3, #7
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	db0b      	blt.n	8003c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	4907      	ldr	r1, [pc, #28]	@ (8003c9c <__NVIC_EnableIRQ+0x38>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2001      	movs	r0, #1
 8003c86:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	@ (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	@ (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	@ 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
         );
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	@ 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff8e 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff29 	bl	8003c00 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff3e 	bl	8003c48 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff8e 	bl	8003cf4 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff31 	bl	8003c64 <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa2 	bl	8003d5c <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e014      	b.n	8003e5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	791b      	ldrb	r3, [r3, #4]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fc5f 	bl	8003708 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	795b      	ldrb	r3, [r3, #5]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_DAC_Start_DMA+0x1e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0ab      	b.n	8003fde <HAL_DAC_Start_DMA+0x176>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d12f      	bne.n	8003ef8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	@ (8003fe8 <HAL_DAC_Start_DMA+0x180>)
 8003e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	@ (8003fec <HAL_DAC_Start_DMA+0x184>)
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a50      	ldr	r2, [pc, #320]	@ (8003ff0 <HAL_DAC_Start_DMA+0x188>)
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d013      	beq.n	8003eee <HAL_DAC_Start_DMA+0x86>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d845      	bhi.n	8003f58 <HAL_DAC_Start_DMA+0xf0>
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_DAC_Start_DMA+0x72>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d005      	beq.n	8003ee4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003ed8:	e03e      	b.n	8003f58 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	613b      	str	r3, [r7, #16]
        break;
 8003ee2:	e03c      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	613b      	str	r3, [r7, #16]
        break;
 8003eec:	e037      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3310      	adds	r3, #16
 8003ef4:	613b      	str	r3, [r7, #16]
        break;
 8003ef6:	e032      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff4 <HAL_DAC_Start_DMA+0x18c>)
 8003efe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff8 <HAL_DAC_Start_DMA+0x190>)
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <HAL_DAC_Start_DMA+0x194>)
 8003f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d013      	beq.n	8003f4e <HAL_DAC_Start_DMA+0xe6>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d817      	bhi.n	8003f5c <HAL_DAC_Start_DMA+0xf4>
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_DAC_Start_DMA+0xd2>
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d005      	beq.n	8003f44 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f38:	e010      	b.n	8003f5c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	613b      	str	r3, [r7, #16]
        break;
 8003f42:	e00c      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	613b      	str	r3, [r7, #16]
        break;
 8003f4c:	e007      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	331c      	adds	r3, #28
 8003f54:	613b      	str	r3, [r7, #16]
        break;
 8003f56:	e002      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f5c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6898      	ldr	r0, [r3, #8]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	f000 fb21 	bl	80045c4 <HAL_DMA_Start_IT>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]
 8003f86:	e010      	b.n	8003faa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003f96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68d8      	ldr	r0, [r3, #12]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	f000 fb0f 	bl	80045c4 <HAL_DMA_Start_IT>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e005      	b.n	8003fdc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	0800432b 	.word	0x0800432b
 8003fec:	0800434d 	.word	0x0800434d
 8003ff0:	08004369 	.word	0x08004369
 8003ff4:	080043e7 	.word	0x080043e7
 8003ff8:	08004409 	.word	0x08004409
 8003ffc:	08004425 	.word	0x08004425

08004000 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004016:	d120      	bne.n	800405a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004026:	d118      	bne.n	800405a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2204      	movs	r2, #4
 800402c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004042:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004052:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f837 	bl	80040c8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004068:	d120      	bne.n	80040ac <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004078:	d118      	bne.n	80040ac <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004094:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f993 	bl	80043d2 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	795b      	ldrb	r3, [r3, #5]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_DAC_ConfigChannel+0x1c>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e114      	b.n	8004322 <HAL_DAC_ConfigChannel+0x246>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2202      	movs	r2, #2
 8004102:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b04      	cmp	r3, #4
 800410a:	f040 8081 	bne.w	8004210 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800410e:	f7ff fd47 	bl	8003ba0 <HAL_GetTick>
 8004112:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d140      	bne.n	800419c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800411a:	e018      	b.n	800414e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800411c:	f7ff fd40 	bl	8003ba0 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d911      	bls.n	800414e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f043 0208 	orr.w	r2, r3, #8
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2203      	movs	r2, #3
 8004148:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0e9      	b.n	8004322 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1df      	bne.n	800411c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800415c:	2001      	movs	r0, #1
 800415e:	f7ff fd2b 	bl	8003bb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	6992      	ldr	r2, [r2, #24]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40
 800416c:	e023      	b.n	80041b6 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800416e:	f7ff fd17 	bl	8003ba0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d90f      	bls.n	800419c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	2b00      	cmp	r3, #0
 8004184:	da0a      	bge.n	800419c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f043 0208 	orr.w	r2, r3, #8
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2203      	movs	r2, #3
 8004196:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e0c2      	b.n	8004322 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	dbe3      	blt.n	800416e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7ff fd06 	bl	8003bb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	6992      	ldr	r2, [r2, #24]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	ea02 0103 	and.w	r1, r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	21ff      	movs	r1, #255	@ 0xff
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	ea02 0103 	and.w	r1, r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	409a      	lsls	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d11d      	bne.n	8004254 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	221f      	movs	r2, #31
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2207      	movs	r2, #7
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6819      	ldr	r1, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	22c0      	movs	r2, #192	@ 0xc0
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	400a      	ands	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7fe fe21 	bl	8002f80 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	711a      	strb	r2, [r3, #4]
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7fe fdf8 	bl	8002f50 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fe96 	bl	80040b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	711a      	strb	r2, [r3, #4]
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ffce 	bl	8004396 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	711a      	strb	r2, [r3, #4]
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff ffc7 	bl	80043aa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f043 0204 	orr.w	r2, r3, #4
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff ffbd 	bl	80043be <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	711a      	strb	r2, [r3, #4]
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e098      	b.n	8004598 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	4b4d      	ldr	r3, [pc, #308]	@ (80045a4 <HAL_DMA_Init+0x150>)
 800446e:	429a      	cmp	r2, r3
 8004470:	d80f      	bhi.n	8004492 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_DMA_Init+0x154>)
 800447a:	4413      	add	r3, r2
 800447c:	4a4b      	ldr	r2, [pc, #300]	@ (80045ac <HAL_DMA_Init+0x158>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	009a      	lsls	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a48      	ldr	r2, [pc, #288]	@ (80045b0 <HAL_DMA_Init+0x15c>)
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004490:	e00e      	b.n	80044b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	4b46      	ldr	r3, [pc, #280]	@ (80045b4 <HAL_DMA_Init+0x160>)
 800449a:	4413      	add	r3, r2
 800449c:	4a43      	ldr	r2, [pc, #268]	@ (80045ac <HAL_DMA_Init+0x158>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	009a      	lsls	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a42      	ldr	r2, [pc, #264]	@ (80045b8 <HAL_DMA_Init+0x164>)
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800450a:	d039      	beq.n	8004580 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a27      	ldr	r2, [pc, #156]	@ (80045b0 <HAL_DMA_Init+0x15c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d11a      	bne.n	800454c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004516:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <HAL_DMA_Init+0x168>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f003 031c 	and.w	r3, r3, #28
 8004522:	210f      	movs	r1, #15
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	4924      	ldr	r1, [pc, #144]	@ (80045bc <HAL_DMA_Init+0x168>)
 800452c:	4013      	ands	r3, r2
 800452e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004530:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <HAL_DMA_Init+0x168>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	f003 031c 	and.w	r3, r3, #28
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	491d      	ldr	r1, [pc, #116]	@ (80045bc <HAL_DMA_Init+0x168>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
 800454a:	e019      	b.n	8004580 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800454c:	4b1c      	ldr	r3, [pc, #112]	@ (80045c0 <HAL_DMA_Init+0x16c>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004554:	f003 031c 	and.w	r3, r3, #28
 8004558:	210f      	movs	r1, #15
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	4917      	ldr	r1, [pc, #92]	@ (80045c0 <HAL_DMA_Init+0x16c>)
 8004562:	4013      	ands	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004566:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <HAL_DMA_Init+0x16c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f003 031c 	and.w	r3, r3, #28
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	4911      	ldr	r1, [pc, #68]	@ (80045c0 <HAL_DMA_Init+0x16c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40020407 	.word	0x40020407
 80045a8:	bffdfff8 	.word	0xbffdfff8
 80045ac:	cccccccd 	.word	0xcccccccd
 80045b0:	40020000 	.word	0x40020000
 80045b4:	bffdfbf8 	.word	0xbffdfbf8
 80045b8:	40020400 	.word	0x40020400
 80045bc:	400200a8 	.word	0x400200a8
 80045c0:	400204a8 	.word	0x400204a8

080045c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_DMA_Start_IT+0x20>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e04b      	b.n	800467c <HAL_DMA_Start_IT+0xb8>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d13a      	bne.n	800466e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f8e0 	bl	80047e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 020e 	orr.w	r2, r2, #14
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00f      	b.n	800465c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0204 	bic.w	r2, r2, #4
 800464a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 020a 	orr.w	r2, r2, #10
 800465a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e005      	b.n	800467a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004676:	2302      	movs	r3, #2
 8004678:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800467a:	7dfb      	ldrb	r3, [r7, #23]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a0:	f003 031c 	and.w	r3, r3, #28
 80046a4:	2204      	movs	r2, #4
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d026      	beq.n	80046fe <HAL_DMA_IRQHandler+0x7a>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d021      	beq.n	80046fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d107      	bne.n	80046d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	f003 021c 	and.w	r2, r3, #28
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	2104      	movs	r1, #4
 80046e6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d071      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046fc:	e06c      	b.n	80047d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f003 031c 	and.w	r3, r3, #28
 8004706:	2202      	movs	r2, #2
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02e      	beq.n	8004770 <HAL_DMA_IRQHandler+0xec>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d029      	beq.n	8004770 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020a 	bic.w	r2, r2, #10
 8004738:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f003 021c 	and.w	r2, r3, #28
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	2102      	movs	r1, #2
 8004750:	fa01 f202 	lsl.w	r2, r1, r2
 8004754:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d038      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800476e:	e033      	b.n	80047d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004774:	f003 031c 	and.w	r3, r3, #28
 8004778:	2208      	movs	r2, #8
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02a      	beq.n	80047da <HAL_DMA_IRQHandler+0x156>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d025      	beq.n	80047da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 020e 	bic.w	r2, r2, #14
 800479c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f003 021c 	and.w	r2, r3, #28
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
}
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	f003 021c 	and.w	r2, r3, #28
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004802:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d108      	bne.n	8004826 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004824:	e007      	b.n	8004836 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004852:	e17f      	b.n	8004b54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8171 	beq.w	8004b4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d005      	beq.n	8004884 <HAL_GPIO_Init+0x40>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d130      	bne.n	80048e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0201 	and.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d118      	bne.n	8004924 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80048f8:	2201      	movs	r2, #1
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f003 0201 	and.w	r2, r3, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b03      	cmp	r3, #3
 800492e:	d017      	beq.n	8004960 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d123      	bne.n	80049b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	08da      	lsrs	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3208      	adds	r2, #8
 8004974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	220f      	movs	r2, #15
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3208      	adds	r2, #8
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2203      	movs	r2, #3
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0203 	and.w	r2, r3, #3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80ac 	beq.w	8004b4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b74 <HAL_GPIO_Init+0x330>)
 80049f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004b74 <HAL_GPIO_Init+0x330>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a02:	4b5c      	ldr	r3, [pc, #368]	@ (8004b74 <HAL_GPIO_Init+0x330>)
 8004a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8004b78 <HAL_GPIO_Init+0x334>)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a38:	d025      	beq.n	8004a86 <HAL_GPIO_Init+0x242>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b7c <HAL_GPIO_Init+0x338>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <HAL_GPIO_Init+0x23e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4e      	ldr	r2, [pc, #312]	@ (8004b80 <HAL_GPIO_Init+0x33c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d019      	beq.n	8004a7e <HAL_GPIO_Init+0x23a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b84 <HAL_GPIO_Init+0x340>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_GPIO_Init+0x236>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4c      	ldr	r2, [pc, #304]	@ (8004b88 <HAL_GPIO_Init+0x344>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00d      	beq.n	8004a76 <HAL_GPIO_Init+0x232>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b8c <HAL_GPIO_Init+0x348>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <HAL_GPIO_Init+0x22e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a4a      	ldr	r2, [pc, #296]	@ (8004b90 <HAL_GPIO_Init+0x34c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_GPIO_Init+0x22a>
 8004a6a:	2306      	movs	r3, #6
 8004a6c:	e00c      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a6e:	2307      	movs	r3, #7
 8004a70:	e00a      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a72:	2305      	movs	r3, #5
 8004a74:	e008      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e006      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e004      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e002      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_GPIO_Init+0x244>
 8004a86:	2300      	movs	r3, #0
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	f002 0203 	and.w	r2, r2, #3
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	4093      	lsls	r3, r2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a98:	4937      	ldr	r1, [pc, #220]	@ (8004b78 <HAL_GPIO_Init+0x334>)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aca:	4a32      	ldr	r2, [pc, #200]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ad0:	4b30      	ldr	r3, [pc, #192]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4013      	ands	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004af4:	4a27      	ldr	r2, [pc, #156]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004afa:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b48:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <HAL_GPIO_Init+0x350>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3301      	adds	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f47f ae78 	bne.w	8004854 <HAL_GPIO_Init+0x10>
  }
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	48000400 	.word	0x48000400
 8004b80:	48000800 	.word	0x48000800
 8004b84:	48000c00 	.word	0x48000c00
 8004b88:	48001000 	.word	0x48001000
 8004b8c:	48001400 	.word	0x48001400
 8004b90:	48001800 	.word	0x48001800
 8004b94:	40010400 	.word	0x40010400

08004b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e001      	b.n	8004bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd8:	787b      	ldrb	r3, [r7, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be4:	e002      	b.n	8004bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43d9      	mvns	r1, r3
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	400b      	ands	r3, r1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c30:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40007000 	.word	0x40007000

08004c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d130      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c58:	4b23      	ldr	r3, [pc, #140]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c64:	d038      	beq.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c76:	4b1d      	ldr	r3, [pc, #116]	@ (8004cec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2232      	movs	r2, #50	@ 0x32
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	0c9b      	lsrs	r3, r3, #18
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8c:	e002      	b.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca0:	d102      	bne.n	8004ca8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f2      	bne.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d110      	bne.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e00f      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d007      	beq.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cc8:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cd0:	4a05      	ldr	r2, [pc, #20]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	200010f4 	.word	0x200010f4
 8004cf0:	431bde83 	.word	0x431bde83

08004cf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e3ca      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d06:	4b97      	ldr	r3, [pc, #604]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d10:	4b94      	ldr	r3, [pc, #592]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80e4 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCC_OscConfig+0x4a>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b0c      	cmp	r3, #12
 8004d32:	f040 808b 	bne.w	8004e4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	f040 8087 	bne.w	8004e4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d3e:	4b89      	ldr	r3, [pc, #548]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x62>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e3a2      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	4b82      	ldr	r3, [pc, #520]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_RCC_OscConfig+0x7c>
 8004d66:	4b7f      	ldr	r3, [pc, #508]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d6e:	e005      	b.n	8004d7c <HAL_RCC_OscConfig+0x88>
 8004d70:	4b7c      	ldr	r3, [pc, #496]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d223      	bcs.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fd55 	bl	8005834 <RCC_SetFlashLatencyFromMSIRange>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e383      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d94:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a72      	ldr	r2, [pc, #456]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d9a:	f043 0308 	orr.w	r3, r3, #8
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b70      	ldr	r3, [pc, #448]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	496d      	ldr	r1, [pc, #436]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	4968      	ldr	r1, [pc, #416]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
 8004dc6:	e025      	b.n	8004e14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dc8:	4b66      	ldr	r3, [pc, #408]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a65      	ldr	r2, [pc, #404]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dce:	f043 0308 	orr.w	r3, r3, #8
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b63      	ldr	r3, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4960      	ldr	r1, [pc, #384]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004de6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	495b      	ldr	r1, [pc, #364]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fd15 	bl	8005834 <RCC_SetFlashLatencyFromMSIRange>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e343      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e14:	f000 fc4a 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b52      	ldr	r3, [pc, #328]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	4950      	ldr	r1, [pc, #320]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <HAL_RCC_OscConfig+0x278>)
 8004e32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e34:	4b4e      	ldr	r3, [pc, #312]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe fe61 	bl	8003b00 <HAL_InitTick>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d052      	beq.n	8004eee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	e327      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d032      	beq.n	8004eba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e54:	4b43      	ldr	r3, [pc, #268]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a42      	ldr	r2, [pc, #264]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e60:	f7fe fe9e 	bl	8003ba0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e68:	f7fe fe9a 	bl	8003ba0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e310      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e86:	4b37      	ldr	r3, [pc, #220]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a36      	ldr	r2, [pc, #216]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4931      	ldr	r1, [pc, #196]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	492c      	ldr	r1, [pc, #176]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e01a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004eba:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ec6:	f7fe fe6b 	bl	8003ba0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ece:	f7fe fe67 	bl	8003ba0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e2dd      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ee0:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x1da>
 8004eec:	e000      	b.n	8004ef0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d074      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x21a>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	d10e      	bne.n	8004f26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d10b      	bne.n	8004f26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d064      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d160      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e2ba      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x24a>
 8004f30:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0b      	ldr	r2, [pc, #44]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e026      	b.n	8004f8c <HAL_RCC_OscConfig+0x298>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_OscConfig+0x280>
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a02      	ldr	r2, [pc, #8]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	e014      	b.n	8004f8c <HAL_RCC_OscConfig+0x298>
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	0800d2a4 	.word	0x0800d2a4
 8004f6c:	200010f4 	.word	0x200010f4
 8004f70:	200010f8 	.word	0x200010f8
 8004f74:	4ba0      	ldr	r3, [pc, #640]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a9f      	ldr	r2, [pc, #636]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b9d      	ldr	r3, [pc, #628]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a9c      	ldr	r2, [pc, #624]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fe fe04 	bl	8003ba0 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fe fe00 	bl	8003ba0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e276      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	4b92      	ldr	r3, [pc, #584]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x2a8>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fdf0 	bl	8003ba0 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fe fdec 	bl	8003ba0 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	@ 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e262      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	4b88      	ldr	r3, [pc, #544]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x2d0>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d060      	beq.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_OscConfig+0x310>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d119      	bne.n	8005032 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d116      	bne.n	8005032 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005004:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_OscConfig+0x328>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e23f      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b76      	ldr	r3, [pc, #472]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	4973      	ldr	r1, [pc, #460]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005030:	e040      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d023      	beq.n	8005082 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800503a:	4b6f      	ldr	r3, [pc, #444]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6e      	ldr	r2, [pc, #440]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fe fdab 	bl	8003ba0 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504e:	f7fe fda7 	bl	8003ba0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e21d      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005060:	4b65      	ldr	r3, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506c:	4b62      	ldr	r3, [pc, #392]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	495f      	ldr	r1, [pc, #380]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
 8005080:	e018      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005082:	4b5d      	ldr	r3, [pc, #372]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5c      	ldr	r2, [pc, #368]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fe fd87 	bl	8003ba0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005096:	f7fe fd83 	bl	8003ba0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e1f9      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a8:	4b53      	ldr	r3, [pc, #332]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01c      	beq.n	8005102 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c8:	4b4b      	ldr	r3, [pc, #300]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ce:	4a4a      	ldr	r2, [pc, #296]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fe fd62 	bl	8003ba0 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fe fd5e 	bl	8003ba0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1d4      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f2:	4b41      	ldr	r3, [pc, #260]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ef      	beq.n	80050e0 <HAL_RCC_OscConfig+0x3ec>
 8005100:	e01b      	b.n	800513a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005108:	4a3b      	ldr	r2, [pc, #236]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fe fd45 	bl	8003ba0 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511a:	f7fe fd41 	bl	8003ba0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1b7      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800512c:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800512e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ef      	bne.n	800511a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80a6 	beq.w	8005294 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800514c:	4b2a      	ldr	r3, [pc, #168]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10d      	bne.n	8005174 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	4a26      	ldr	r2, [pc, #152]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6593      	str	r3, [r2, #88]	@ 0x58
 8005164:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005170:	2301      	movs	r3, #1
 8005172:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518c:	f7fe fd08 	bl	8003ba0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005194:	f7fe fd04 	bl	8003ba0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e17a      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d108      	bne.n	80051cc <HAL_RCC_OscConfig+0x4d8>
 80051ba:	4b0f      	ldr	r3, [pc, #60]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	4a0d      	ldr	r2, [pc, #52]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ca:	e029      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d115      	bne.n	8005200 <HAL_RCC_OscConfig+0x50c>
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	4a03      	ldr	r2, [pc, #12]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051f4:	e014      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
 8005200:	4b9c      	ldr	r3, [pc, #624]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	4a9b      	ldr	r2, [pc, #620]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005210:	4b98      	ldr	r3, [pc, #608]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	4a97      	ldr	r2, [pc, #604]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fe fcba 	bl	8003ba0 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522e:	e00a      	b.n	8005246 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fe fcb6 	bl	8003ba0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e12a      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	4b8b      	ldr	r3, [pc, #556]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ed      	beq.n	8005230 <HAL_RCC_OscConfig+0x53c>
 8005254:	e015      	b.n	8005282 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fe fca3 	bl	8003ba0 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fe fc9f 	bl	8003ba0 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e113      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005274:	4b7f      	ldr	r3, [pc, #508]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ed      	bne.n	800525e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005288:	4b7a      	ldr	r3, [pc, #488]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528c:	4a79      	ldr	r2, [pc, #484]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005292:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80fe 	beq.w	800549a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	f040 80d0 	bne.w	8005448 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052a8:	4b72      	ldr	r3, [pc, #456]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f003 0203 	and.w	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d130      	bne.n	800531e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	3b01      	subs	r3, #1
 80052c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d127      	bne.n	800531e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d11f      	bne.n	800531e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052e8:	2a07      	cmp	r2, #7
 80052ea:	bf14      	ite	ne
 80052ec:	2201      	movne	r2, #1
 80052ee:	2200      	moveq	r2, #0
 80052f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d113      	bne.n	800531e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	3b01      	subs	r3, #1
 8005304:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d109      	bne.n	800531e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	3b01      	subs	r3, #1
 8005318:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d06e      	beq.n	80053fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b0c      	cmp	r3, #12
 8005322:	d069      	beq.n	80053f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005324:	4b53      	ldr	r3, [pc, #332]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005330:	4b50      	ldr	r3, [pc, #320]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0ad      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005340:	4b4c      	ldr	r3, [pc, #304]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a4b      	ldr	r2, [pc, #300]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800534c:	f7fe fc28 	bl	8003ba0 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fe fc24 	bl	8003ba0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e09a      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005366:	4b43      	ldr	r3, [pc, #268]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005372:	4b40      	ldr	r3, [pc, #256]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	4b40      	ldr	r3, [pc, #256]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005382:	3a01      	subs	r2, #1
 8005384:	0112      	lsls	r2, r2, #4
 8005386:	4311      	orrs	r1, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800538c:	0212      	lsls	r2, r2, #8
 800538e:	4311      	orrs	r1, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005394:	0852      	lsrs	r2, r2, #1
 8005396:	3a01      	subs	r2, #1
 8005398:	0552      	lsls	r2, r2, #21
 800539a:	4311      	orrs	r1, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053a0:	0852      	lsrs	r2, r2, #1
 80053a2:	3a01      	subs	r2, #1
 80053a4:	0652      	lsls	r2, r2, #25
 80053a6:	4311      	orrs	r1, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053ac:	0912      	lsrs	r2, r2, #4
 80053ae:	0452      	lsls	r2, r2, #17
 80053b0:	430a      	orrs	r2, r1
 80053b2:	4930      	ldr	r1, [pc, #192]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d0:	f7fe fbe6 	bl	8003ba0 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fe fbe2 	bl	8003ba0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e058      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ea:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053f6:	e050      	b.n	800549a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e04f      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d148      	bne.n	800549a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005408:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800540e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005412:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005414:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a16      	ldr	r2, [pc, #88]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800541a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800541e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005420:	f7fe fbbe 	bl	8003ba0 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005428:	f7fe fbba 	bl	8003ba0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e030      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543a:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x734>
 8005446:	e028      	b.n	800549a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d023      	beq.n	8005496 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <HAL_RCC_OscConfig+0x780>)
 8005454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fe fba1 	bl	8003ba0 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	e00c      	b.n	800547c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005462:	f7fe fb9d 	bl	8003ba0 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d905      	bls.n	800547c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e013      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
 8005474:	40021000 	.word	0x40021000
 8005478:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_OscConfig+0x7b0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ec      	bne.n	8005462 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005488:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <HAL_RCC_OscConfig+0x7b0>)
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	4905      	ldr	r1, [pc, #20]	@ (80054a4 <HAL_RCC_OscConfig+0x7b0>)
 800548e:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <HAL_RCC_OscConfig+0x7b4>)
 8005490:	4013      	ands	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
 8005494:	e001      	b.n	800549a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	feeefffc 	.word	0xfeeefffc

080054ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0e7      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b75      	ldr	r3, [pc, #468]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d910      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b72      	ldr	r3, [pc, #456]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 0207 	bic.w	r2, r3, #7
 80054d6:	4970      	ldr	r1, [pc, #448]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b6e      	ldr	r3, [pc, #440]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0cf      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	4b66      	ldr	r3, [pc, #408]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005508:	429a      	cmp	r2, r3
 800550a:	d908      	bls.n	800551e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550c:	4b63      	ldr	r3, [pc, #396]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4960      	ldr	r1, [pc, #384]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04c      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005532:	4b5a      	ldr	r3, [pc, #360]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d121      	bne.n	8005582 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0a6      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800554a:	4b54      	ldr	r3, [pc, #336]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d115      	bne.n	8005582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e09a      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005562:	4b4e      	ldr	r3, [pc, #312]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e08e      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005572:	4b4a      	ldr	r3, [pc, #296]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e086      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005582:	4b46      	ldr	r3, [pc, #280]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 0203 	bic.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4943      	ldr	r1, [pc, #268]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005590:	4313      	orrs	r3, r2
 8005592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fe fb04 	bl	8003ba0 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559c:	f7fe fb00 	bl	8003ba0 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e06e      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	4b3a      	ldr	r3, [pc, #232]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 020c 	and.w	r2, r3, #12
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d1eb      	bne.n	800559c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b31      	ldr	r3, [pc, #196]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055dc:	429a      	cmp	r2, r3
 80055de:	d208      	bcs.n	80055f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	492b      	ldr	r1, [pc, #172]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d210      	bcs.n	8005622 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005600:	4b25      	ldr	r3, [pc, #148]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 0207 	bic.w	r2, r3, #7
 8005608:	4923      	ldr	r1, [pc, #140]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005610:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <HAL_RCC_ClockConfig+0x1ec>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d001      	beq.n	8005622 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e036      	b.n	8005690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562e:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4918      	ldr	r1, [pc, #96]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800564c:	4b13      	ldr	r3, [pc, #76]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4910      	ldr	r1, [pc, #64]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	4313      	orrs	r3, r2
 800565e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005660:	f000 f824 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <HAL_RCC_ClockConfig+0x1f0>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	490b      	ldr	r1, [pc, #44]	@ (80056a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1f8>)
 800567e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005680:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fa3b 	bl	8003b00 <HAL_InitTick>
 800568a:	4603      	mov	r3, r0
 800568c:	72fb      	strb	r3, [r7, #11]

  return status;
 800568e:	7afb      	ldrb	r3, [r7, #11]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40022000 	.word	0x40022000
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800d2a4 	.word	0x0800d2a4
 80056a4:	200010f4 	.word	0x200010f4
 80056a8:	200010f8 	.word	0x200010f8

080056ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	@ 0x24
 80056b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ba:	4b3e      	ldr	r3, [pc, #248]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056c4:	4b3b      	ldr	r3, [pc, #236]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x34>
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	d121      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d11e      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056e0:	4b34      	ldr	r3, [pc, #208]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056ec:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e005      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056fc:	4b2d      	ldr	r3, [pc, #180]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005708:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10d      	bne.n	8005734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d102      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005724:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e004      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d101      	bne.n	8005734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005730:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d134      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800573a:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d003      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0xa6>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d003      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0xac>
 8005750:	e005      	b.n	800575e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005752:	4b1a      	ldr	r3, [pc, #104]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005754:	617b      	str	r3, [r7, #20]
      break;
 8005756:	e005      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800575a:	617b      	str	r3, [r7, #20]
      break;
 800575c:	e002      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	617b      	str	r3, [r7, #20]
      break;
 8005762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005764:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	3301      	adds	r3, #1
 8005770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005772:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	fb03 f202 	mul.w	r2, r3, r2
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800578a:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	0e5b      	lsrs	r3, r3, #25
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	3301      	adds	r3, #1
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057a4:	69bb      	ldr	r3, [r7, #24]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	@ 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	0800d2bc 	.word	0x0800d2bc
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	007a1200 	.word	0x007a1200

080057c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c8:	4b03      	ldr	r3, [pc, #12]	@ (80057d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	200010f4 	.word	0x200010f4

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057e0:	f7ff fff0 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4904      	ldr	r1, [pc, #16]	@ (8005804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	0800d2b4 	.word	0x0800d2b4

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800580c:	f7ff ffda 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0adb      	lsrs	r3, r3, #11
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4904      	ldr	r1, [pc, #16]	@ (8005830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000
 8005830:	0800d2b4 	.word	0x0800d2b4

08005834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005840:	4b2a      	ldr	r3, [pc, #168]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800584c:	f7ff f9ee 	bl	8004c2c <HAL_PWREx_GetVoltageRange>
 8005850:	6178      	str	r0, [r7, #20]
 8005852:	e014      	b.n	800587e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005854:	4b25      	ldr	r3, [pc, #148]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	4a24      	ldr	r2, [pc, #144]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005860:	4b22      	ldr	r3, [pc, #136]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800586c:	f7ff f9de 	bl	8004c2c <HAL_PWREx_GetVoltageRange>
 8005870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005872:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005876:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800587c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005884:	d10b      	bne.n	800589e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b80      	cmp	r3, #128	@ 0x80
 800588a:	d919      	bls.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005890:	d902      	bls.n	8005898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005892:	2302      	movs	r3, #2
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e013      	b.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005898:	2301      	movs	r3, #1
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	e010      	b.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b80      	cmp	r3, #128	@ 0x80
 80058a2:	d902      	bls.n	80058aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058a4:	2303      	movs	r3, #3
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	e00a      	b.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b80      	cmp	r3, #128	@ 0x80
 80058ae:	d102      	bne.n	80058b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058b0:	2302      	movs	r3, #2
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	e004      	b.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b70      	cmp	r3, #112	@ 0x70
 80058ba:	d101      	bne.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058bc:	2301      	movs	r3, #1
 80058be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 0207 	bic.w	r2, r3, #7
 80058c8:	4909      	ldr	r1, [pc, #36]	@ (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d001      	beq.n	80058e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40022000 	.word	0x40022000

080058f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058fc:	2300      	movs	r3, #0
 80058fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005900:	2300      	movs	r3, #0
 8005902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800590c:	2b00      	cmp	r3, #0
 800590e:	d041      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005914:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005918:	d02a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800591a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800591e:	d824      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005924:	d008      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005926:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800592a:	d81e      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005934:	d010      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005936:	e018      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005938:	4b86      	ldr	r3, [pc, #536]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a85      	ldr	r2, [pc, #532]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005942:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005944:	e015      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fabb 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005956:	e00c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3320      	adds	r3, #32
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fba6 	bl	80060b0 <RCCEx_PLLSAI2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	74fb      	strb	r3, [r7, #19]
      break;
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005978:	4b76      	ldr	r3, [pc, #472]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005986:	4973      	ldr	r1, [pc, #460]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800598e:	e001      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d041      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059a8:	d02a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80059aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059ae:	d824      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ba:	d81e      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80059c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c4:	d010      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059c6:	e018      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059c8:	4b62      	ldr	r3, [pc, #392]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a61      	ldr	r2, [pc, #388]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059d4:	e015      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fa73 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059e6:	e00c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3320      	adds	r3, #32
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fb5e 	bl	80060b0 <RCCEx_PLLSAI2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	74fb      	strb	r3, [r7, #19]
      break;
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a08:	4b52      	ldr	r3, [pc, #328]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a16:	494f      	ldr	r1, [pc, #316]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80a0 	beq.w	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a36:	4b47      	ldr	r3, [pc, #284]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4c:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a50:	4a40      	ldr	r2, [pc, #256]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a58:	4b3e      	ldr	r3, [pc, #248]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a64:	2301      	movs	r3, #1
 8005a66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a68:	4b3b      	ldr	r3, [pc, #236]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a74:	f7fe f894 	bl	8003ba0 <HAL_GetTick>
 8005a78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a7a:	e009      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7c:	f7fe f890 	bl	8003ba0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d902      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	74fb      	strb	r3, [r7, #19]
        break;
 8005a8e:	e005      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a90:	4b31      	ldr	r3, [pc, #196]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ef      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d15c      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01f      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d019      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ac0:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005acc:	4b21      	ldr	r3, [pc, #132]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	4a20      	ldr	r2, [pc, #128]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005adc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005aec:	4a19      	ldr	r2, [pc, #100]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fe f84f 	bl	8003ba0 <HAL_GetTick>
 8005b02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b04:	e00b      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fe f84b 	bl	8003ba0 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d902      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ec      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b32:	4b08      	ldr	r3, [pc, #32]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b42:	4904      	ldr	r1, [pc, #16]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b4a:	e009      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
 8005b4e:	74bb      	strb	r3, [r7, #18]
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	7cfb      	ldrb	r3, [r7, #19]
 8005b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b60:	7c7b      	ldrb	r3, [r7, #17]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b66:	4b9e      	ldr	r3, [pc, #632]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	4a9d      	ldr	r2, [pc, #628]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b7e:	4b98      	ldr	r3, [pc, #608]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f023 0203 	bic.w	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	4994      	ldr	r1, [pc, #592]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba6:	f023 020c 	bic.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	498c      	ldr	r1, [pc, #560]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc2:	4b87      	ldr	r3, [pc, #540]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd0:	4983      	ldr	r1, [pc, #524]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005be4:	4b7e      	ldr	r3, [pc, #504]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	497b      	ldr	r1, [pc, #492]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c06:	4b76      	ldr	r3, [pc, #472]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	4972      	ldr	r1, [pc, #456]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c28:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	496a      	ldr	r1, [pc, #424]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c58:	4961      	ldr	r1, [pc, #388]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c7a:	4959      	ldr	r1, [pc, #356]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c8e:	4b54      	ldr	r3, [pc, #336]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9c:	4950      	ldr	r1, [pc, #320]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbe:	4948      	ldr	r1, [pc, #288]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cd2:	4b43      	ldr	r3, [pc, #268]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce0:	493f      	ldr	r1, [pc, #252]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d028      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d02:	4937      	ldr	r1, [pc, #220]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d14:	4b32      	ldr	r3, [pc, #200]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a31      	ldr	r2, [pc, #196]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d1e:	60d3      	str	r3, [r2, #12]
 8005d20:	e011      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	2101      	movs	r1, #1
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f8c8 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005d42:	7cfb      	ldrb	r3, [r7, #19]
 8005d44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d028      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d52:	4b23      	ldr	r3, [pc, #140]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d60:	491f      	ldr	r1, [pc, #124]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d70:	d106      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4a1a      	ldr	r2, [pc, #104]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d7c:	60d3      	str	r3, [r2, #12]
 8005d7e:	e011      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f899 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02b      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbe:	4908      	ldr	r1, [pc, #32]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dce:	d109      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a02      	ldr	r2, [pc, #8]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dda:	60d3      	str	r3, [r2, #12]
 8005ddc:	e014      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005dde:	bf00      	nop
 8005de0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3304      	adds	r3, #4
 8005df2:	2101      	movs	r1, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f867 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02f      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e22:	4928      	ldr	r1, [pc, #160]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	2102      	movs	r1, #2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f844 	bl	8005ec8 <RCCEx_PLLSAI1_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	74bb      	strb	r3, [r7, #18]
 8005e4e:	e011      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	2102      	movs	r1, #2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 f925 	bl	80060b0 <RCCEx_PLLSAI2_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e80:	4b10      	ldr	r3, [pc, #64]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e8e:	490d      	ldr	r1, [pc, #52]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ea2:	4b08      	ldr	r3, [pc, #32]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb2:	4904      	ldr	r1, [pc, #16]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005eba:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40021000 	.word	0x40021000

08005ec8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ed6:	4b75      	ldr	r3, [pc, #468]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d018      	beq.n	8005f14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ee2:	4b72      	ldr	r3, [pc, #456]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0203 	and.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10d      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005efa:	4b6c      	ldr	r3, [pc, #432]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
       ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d047      	beq.n	8005f9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	73fb      	strb	r3, [r7, #15]
 8005f12:	e044      	b.n	8005f9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d018      	beq.n	8005f4e <RCCEx_PLLSAI1_Config+0x86>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d825      	bhi.n	8005f6c <RCCEx_PLLSAI1_Config+0xa4>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d002      	beq.n	8005f2a <RCCEx_PLLSAI1_Config+0x62>
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d009      	beq.n	8005f3c <RCCEx_PLLSAI1_Config+0x74>
 8005f28:	e020      	b.n	8005f6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f2a:	4b60      	ldr	r3, [pc, #384]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11d      	bne.n	8005f72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f3a:	e01a      	b.n	8005f72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f4c:	e013      	b.n	8005f76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f4e:	4b57      	ldr	r3, [pc, #348]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10f      	bne.n	8005f7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f5a:	4b54      	ldr	r3, [pc, #336]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f6a:	e006      	b.n	8005f7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e004      	b.n	8005f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f82:	4b4a      	ldr	r3, [pc, #296]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	430b      	orrs	r3, r1
 8005f98:	4944      	ldr	r1, [pc, #272]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d17d      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fa4:	4b41      	ldr	r3, [pc, #260]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a40      	ldr	r2, [pc, #256]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005faa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb0:	f7fd fdf6 	bl	8003ba0 <HAL_GetTick>
 8005fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fb6:	e009      	b.n	8005fcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb8:	f7fd fdf2 	bl	8003ba0 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d902      	bls.n	8005fcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fca:	e005      	b.n	8005fd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fcc:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ef      	bne.n	8005fb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d160      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d111      	bne.n	8006008 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe4:	4b31      	ldr	r3, [pc, #196]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6892      	ldr	r2, [r2, #8]
 8005ff4:	0211      	lsls	r1, r2, #8
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	0912      	lsrs	r2, r2, #4
 8005ffc:	0452      	lsls	r2, r2, #17
 8005ffe:	430a      	orrs	r2, r1
 8006000:	492a      	ldr	r1, [pc, #168]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006002:	4313      	orrs	r3, r2
 8006004:	610b      	str	r3, [r1, #16]
 8006006:	e027      	b.n	8006058 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d112      	bne.n	8006034 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800600e:	4b27      	ldr	r3, [pc, #156]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006016:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	0211      	lsls	r1, r2, #8
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6912      	ldr	r2, [r2, #16]
 8006024:	0852      	lsrs	r2, r2, #1
 8006026:	3a01      	subs	r2, #1
 8006028:	0552      	lsls	r2, r2, #21
 800602a:	430a      	orrs	r2, r1
 800602c:	491f      	ldr	r1, [pc, #124]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]
 8006032:	e011      	b.n	8006058 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006034:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800603c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	0211      	lsls	r1, r2, #8
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6952      	ldr	r2, [r2, #20]
 800604a:	0852      	lsrs	r2, r2, #1
 800604c:	3a01      	subs	r2, #1
 800604e:	0652      	lsls	r2, r2, #25
 8006050:	430a      	orrs	r2, r1
 8006052:	4916      	ldr	r1, [pc, #88]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006054:	4313      	orrs	r3, r2
 8006056:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006058:	4b14      	ldr	r3, [pc, #80]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a13      	ldr	r2, [pc, #76]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800605e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7fd fd9c 	bl	8003ba0 <HAL_GetTick>
 8006068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800606a:	e009      	b.n	8006080 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800606c:	f7fd fd98 	bl	8003ba0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d902      	bls.n	8006080 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	73fb      	strb	r3, [r7, #15]
          break;
 800607e:	e005      	b.n	800608c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006080:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ef      	beq.n	800606c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	4904      	ldr	r1, [pc, #16]	@ (80060ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800609c:	4313      	orrs	r3, r2
 800609e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000

080060b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060be:	4b6a      	ldr	r3, [pc, #424]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060ca:	4b67      	ldr	r3, [pc, #412]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0203 	and.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d10d      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
       ||
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80060e2:	4b61      	ldr	r3, [pc, #388]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
       ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d047      	beq.n	8006186 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	73fb      	strb	r3, [r7, #15]
 80060fa:	e044      	b.n	8006186 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d018      	beq.n	8006136 <RCCEx_PLLSAI2_Config+0x86>
 8006104:	2b03      	cmp	r3, #3
 8006106:	d825      	bhi.n	8006154 <RCCEx_PLLSAI2_Config+0xa4>
 8006108:	2b01      	cmp	r3, #1
 800610a:	d002      	beq.n	8006112 <RCCEx_PLLSAI2_Config+0x62>
 800610c:	2b02      	cmp	r3, #2
 800610e:	d009      	beq.n	8006124 <RCCEx_PLLSAI2_Config+0x74>
 8006110:	e020      	b.n	8006154 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006112:	4b55      	ldr	r3, [pc, #340]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d11d      	bne.n	800615a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006122:	e01a      	b.n	800615a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006124:	4b50      	ldr	r3, [pc, #320]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800612c:	2b00      	cmp	r3, #0
 800612e:	d116      	bne.n	800615e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006134:	e013      	b.n	800615e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006136:	4b4c      	ldr	r3, [pc, #304]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10f      	bne.n	8006162 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006142:	4b49      	ldr	r3, [pc, #292]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006152:	e006      	b.n	8006162 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e004      	b.n	8006164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006162:	bf00      	nop
    }

    if(status == HAL_OK)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800616a:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	3b01      	subs	r3, #1
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	430b      	orrs	r3, r1
 8006180:	4939      	ldr	r1, [pc, #228]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006182:	4313      	orrs	r3, r2
 8006184:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d167      	bne.n	800625c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800618c:	4b36      	ldr	r3, [pc, #216]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fd fd02 	bl	8003ba0 <HAL_GetTick>
 800619c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800619e:	e009      	b.n	80061b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061a0:	f7fd fcfe 	bl	8003ba0 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d902      	bls.n	80061b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	73fb      	strb	r3, [r7, #15]
        break;
 80061b2:	e005      	b.n	80061c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ef      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d14a      	bne.n	800625c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d111      	bne.n	80061f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061cc:	4b26      	ldr	r3, [pc, #152]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80061d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6892      	ldr	r2, [r2, #8]
 80061dc:	0211      	lsls	r1, r2, #8
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68d2      	ldr	r2, [r2, #12]
 80061e2:	0912      	lsrs	r2, r2, #4
 80061e4:	0452      	lsls	r2, r2, #17
 80061e6:	430a      	orrs	r2, r1
 80061e8:	491f      	ldr	r1, [pc, #124]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	614b      	str	r3, [r1, #20]
 80061ee:	e011      	b.n	8006214 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80061f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6892      	ldr	r2, [r2, #8]
 8006200:	0211      	lsls	r1, r2, #8
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6912      	ldr	r2, [r2, #16]
 8006206:	0852      	lsrs	r2, r2, #1
 8006208:	3a01      	subs	r2, #1
 800620a:	0652      	lsls	r2, r2, #25
 800620c:	430a      	orrs	r2, r1
 800620e:	4916      	ldr	r1, [pc, #88]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006210:	4313      	orrs	r3, r2
 8006212:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006214:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a13      	ldr	r2, [pc, #76]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fd fcbe 	bl	8003ba0 <HAL_GetTick>
 8006224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006226:	e009      	b.n	800623c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006228:	f7fd fcba 	bl	8003ba0 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d902      	bls.n	800623c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	73fb      	strb	r3, [r7, #15]
          break;
 800623a:	e005      	b.n	8006248 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4904      	ldr	r1, [pc, #16]	@ (8006268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006258:	4313      	orrs	r3, r2
 800625a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e049      	b.n	8006312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fd faac 	bl	80037f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 fd58 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d001      	beq.n	8006334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e047      	b.n	80063c4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a23      	ldr	r2, [pc, #140]	@ (80063d0 <HAL_TIM_Base_Start+0xb4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634e:	d018      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <HAL_TIM_Base_Start+0xb8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <HAL_TIM_Base_Start+0xbc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1c      	ldr	r2, [pc, #112]	@ (80063dc <HAL_TIM_Base_Start+0xc0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1b      	ldr	r2, [pc, #108]	@ (80063e0 <HAL_TIM_Base_Start+0xc4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIM_Base_Start+0x66>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a19      	ldr	r2, [pc, #100]	@ (80063e4 <HAL_TIM_Base_Start+0xc8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d115      	bne.n	80063ae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	4b17      	ldr	r3, [pc, #92]	@ (80063e8 <HAL_TIM_Base_Start+0xcc>)
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d015      	beq.n	80063c0 <HAL_TIM_Base_Start+0xa4>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800639a:	d011      	beq.n	80063c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ac:	e008      	b.n	80063c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e000      	b.n	80063c2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40000c00 	.word	0x40000c00
 80063e0:	40013400 	.word	0x40013400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	00010007 	.word	0x00010007

080063ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e04f      	b.n	80064a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a23      	ldr	r2, [pc, #140]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01d      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642e:	d018      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1f      	ldr	r2, [pc, #124]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1e      	ldr	r2, [pc, #120]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1c      	ldr	r2, [pc, #112]	@ (80064bc <HAL_TIM_Base_Start_IT+0xd0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1b      	ldr	r2, [pc, #108]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0x76>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d115      	bne.n	800648e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800646a:	4013      	ands	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d015      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0xb4>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647a:	d011      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	e008      	b.n	80064a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e000      	b.n	80064a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	00010007 	.word	0x00010007

080064cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e049      	b.n	8006572 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f841 	bl	800657a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 fc28 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e049      	b.n	8006634 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f841 	bl	800663c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fbc7 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d020      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0202 	mvn.w	r2, #2
 8006684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fb41 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fb33 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb44 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d020      	beq.n	8006700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0204 	mvn.w	r2, #4
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb1b 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fb0d 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb1e 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d020      	beq.n	800674c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01b      	beq.n	800674c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0208 	mvn.w	r2, #8
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 faf5 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fae7 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 faf8 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	d020      	beq.n	8006798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0210 	mvn.w	r2, #16
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2208      	movs	r2, #8
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 facf 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fac1 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fad2 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fc fbfa 	bl	8002fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ffe1 	bl	80077ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 ffd9 	bl	80077c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fa8c 	bl	8006d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0220 	mvn.w	r2, #32
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 ffa1 	bl	8007798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_TIM_OC_ConfigChannel+0x1e>
 800687a:	2302      	movs	r3, #2
 800687c:	e066      	b.n	800694c <HAL_TIM_OC_ConfigChannel+0xec>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b14      	cmp	r3, #20
 800688a:	d857      	bhi.n	800693c <HAL_TIM_OC_ConfigChannel+0xdc>
 800688c:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_TIM_OC_ConfigChannel+0x34>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068e9 	.word	0x080068e9
 8006898:	0800693d 	.word	0x0800693d
 800689c:	0800693d 	.word	0x0800693d
 80068a0:	0800693d 	.word	0x0800693d
 80068a4:	080068f7 	.word	0x080068f7
 80068a8:	0800693d 	.word	0x0800693d
 80068ac:	0800693d 	.word	0x0800693d
 80068b0:	0800693d 	.word	0x0800693d
 80068b4:	08006905 	.word	0x08006905
 80068b8:	0800693d 	.word	0x0800693d
 80068bc:	0800693d 	.word	0x0800693d
 80068c0:	0800693d 	.word	0x0800693d
 80068c4:	08006913 	.word	0x08006913
 80068c8:	0800693d 	.word	0x0800693d
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	0800693d 	.word	0x0800693d
 80068d4:	08006921 	.word	0x08006921
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	0800693d 	.word	0x0800693d
 80068e4:	0800692f 	.word	0x0800692f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fadc 	bl	8006eac <TIM_OC1_SetConfig>
      break;
 80068f4:	e025      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fb65 	bl	8006fcc <TIM_OC2_SetConfig>
      break;
 8006902:	e01e      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fbe8 	bl	80070e0 <TIM_OC3_SetConfig>
      break;
 8006910:	e017      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fc69 	bl	80071f0 <TIM_OC4_SetConfig>
      break;
 800691e:	e010      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fccc 	bl	80072c4 <TIM_OC5_SetConfig>
      break;
 800692c:	e009      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fd29 	bl	800738c <TIM_OC6_SetConfig>
      break;
 800693a:	e002      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	75fb      	strb	r3, [r7, #23]
      break;
 8006940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800696e:	2302      	movs	r3, #2
 8006970:	e0ff      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b14      	cmp	r3, #20
 800697e:	f200 80f0 	bhi.w	8006b62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006982:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006b63 	.word	0x08006b63
 8006990:	08006b63 	.word	0x08006b63
 8006994:	08006b63 	.word	0x08006b63
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006b63 	.word	0x08006b63
 80069a0:	08006b63 	.word	0x08006b63
 80069a4:	08006b63 	.word	0x08006b63
 80069a8:	08006a5f 	.word	0x08006a5f
 80069ac:	08006b63 	.word	0x08006b63
 80069b0:	08006b63 	.word	0x08006b63
 80069b4:	08006b63 	.word	0x08006b63
 80069b8:	08006a9f 	.word	0x08006a9f
 80069bc:	08006b63 	.word	0x08006b63
 80069c0:	08006b63 	.word	0x08006b63
 80069c4:	08006b63 	.word	0x08006b63
 80069c8:	08006ae1 	.word	0x08006ae1
 80069cc:	08006b63 	.word	0x08006b63
 80069d0:	08006b63 	.word	0x08006b63
 80069d4:	08006b63 	.word	0x08006b63
 80069d8:	08006b21 	.word	0x08006b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fa62 	bl	8006eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
      break;
 8006a1a:	e0a5      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fad2 	bl	8006fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
      break;
 8006a5c:	e084      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fb3b 	bl	80070e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0204 	bic.w	r2, r2, #4
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	61da      	str	r2, [r3, #28]
      break;
 8006a9c:	e064      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fba3 	bl	80071f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	021a      	lsls	r2, r3, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	61da      	str	r2, [r3, #28]
      break;
 8006ade:	e043      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbec 	bl	80072c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b1e:	e023      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fc30 	bl	800738c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b60:	e002      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
      break;
 8006b66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop

08006b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0b6      	b.n	8006d06 <HAL_TIM_ConfigClockSource+0x18a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bd4:	d03e      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0xd8>
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bda:	f200 8087 	bhi.w	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be2:	f000 8086 	beq.w	8006cf2 <HAL_TIM_ConfigClockSource+0x176>
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bea:	d87f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bec:	2b70      	cmp	r3, #112	@ 0x70
 8006bee:	d01a      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xaa>
 8006bf0:	2b70      	cmp	r3, #112	@ 0x70
 8006bf2:	d87b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bf4:	2b60      	cmp	r3, #96	@ 0x60
 8006bf6:	d050      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x11e>
 8006bf8:	2b60      	cmp	r3, #96	@ 0x60
 8006bfa:	d877      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bfc:	2b50      	cmp	r3, #80	@ 0x50
 8006bfe:	d03c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0xfe>
 8006c00:	2b50      	cmp	r3, #80	@ 0x50
 8006c02:	d873      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c04:	2b40      	cmp	r3, #64	@ 0x40
 8006c06:	d058      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x13e>
 8006c08:	2b40      	cmp	r3, #64	@ 0x40
 8006c0a:	d86f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c0c:	2b30      	cmp	r3, #48	@ 0x30
 8006c0e:	d064      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c10:	2b30      	cmp	r3, #48	@ 0x30
 8006c12:	d86b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d060      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d867      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05c      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d05a      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c24:	e062      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c36:	f000 fc89 	bl	800754c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	609a      	str	r2, [r3, #8]
      break;
 8006c52:	e04f      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	f000 fc72 	bl	800754c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c76:	609a      	str	r2, [r3, #8]
      break;
 8006c78:	e03c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 fbe6 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2150      	movs	r1, #80	@ 0x50
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fc3f 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006c98:	e02c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fc05 	bl	80074b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2160      	movs	r1, #96	@ 0x60
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fc2f 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e01c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fbc6 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2140      	movs	r1, #64	@ 0x40
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fc1f 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e00c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f000 fc16 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006cea:	e003      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf0:	e000      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a46      	ldr	r2, [pc, #280]	@ (8006e8c <TIM_Base_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d7e:	d00f      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a43      	ldr	r2, [pc, #268]	@ (8006e90 <TIM_Base_SetConfig+0x130>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a42      	ldr	r2, [pc, #264]	@ (8006e94 <TIM_Base_SetConfig+0x134>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d007      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a41      	ldr	r2, [pc, #260]	@ (8006e98 <TIM_Base_SetConfig+0x138>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a40      	ldr	r2, [pc, #256]	@ (8006e9c <TIM_Base_SetConfig+0x13c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d108      	bne.n	8006db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a35      	ldr	r2, [pc, #212]	@ (8006e8c <TIM_Base_SetConfig+0x12c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01f      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc0:	d01b      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a32      	ldr	r2, [pc, #200]	@ (8006e90 <TIM_Base_SetConfig+0x130>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d017      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a31      	ldr	r2, [pc, #196]	@ (8006e94 <TIM_Base_SetConfig+0x134>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a30      	ldr	r2, [pc, #192]	@ (8006e98 <TIM_Base_SetConfig+0x138>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00f      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8006e9c <TIM_Base_SetConfig+0x13c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2e      	ldr	r2, [pc, #184]	@ (8006ea0 <TIM_Base_SetConfig+0x140>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea4 <TIM_Base_SetConfig+0x144>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_Base_SetConfig+0x9a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea8 <TIM_Base_SetConfig+0x148>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d108      	bne.n	8006e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a16      	ldr	r2, [pc, #88]	@ (8006e8c <TIM_Base_SetConfig+0x12c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_Base_SetConfig+0xf8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <TIM_Base_SetConfig+0x13c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0xf8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <TIM_Base_SetConfig+0x140>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0xf8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <TIM_Base_SetConfig+0x144>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0xf8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <TIM_Base_SetConfig+0x148>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d103      	bne.n	8006e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d105      	bne.n	8006e7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	611a      	str	r2, [r3, #16]
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f023 0201 	bic.w	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 0302 	bic.w	r3, r3, #2
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb8 <TIM_OC1_SetConfig+0x10c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_OC1_SetConfig+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8006fbc <TIM_OC1_SetConfig+0x110>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_OC1_SetConfig+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc0 <TIM_OC1_SetConfig+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_OC1_SetConfig+0x80>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a29      	ldr	r2, [pc, #164]	@ (8006fc4 <TIM_OC1_SetConfig+0x118>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC1_SetConfig+0x80>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a28      	ldr	r2, [pc, #160]	@ (8006fc8 <TIM_OC1_SetConfig+0x11c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10c      	bne.n	8006f46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0308 	bic.w	r3, r3, #8
 8006f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f023 0304 	bic.w	r3, r3, #4
 8006f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb8 <TIM_OC1_SetConfig+0x10c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00f      	beq.n	8006f6e <TIM_OC1_SetConfig+0xc2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1a      	ldr	r2, [pc, #104]	@ (8006fbc <TIM_OC1_SetConfig+0x110>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <TIM_OC1_SetConfig+0xc2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a19      	ldr	r2, [pc, #100]	@ (8006fc0 <TIM_OC1_SetConfig+0x114>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <TIM_OC1_SetConfig+0xc2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a18      	ldr	r2, [pc, #96]	@ (8006fc4 <TIM_OC1_SetConfig+0x118>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_OC1_SetConfig+0xc2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a17      	ldr	r2, [pc, #92]	@ (8006fc8 <TIM_OC1_SetConfig+0x11c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d111      	bne.n	8006f92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	621a      	str	r2, [r3, #32]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f023 0210 	bic.w	r2, r3, #16
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 0320 	bic.w	r3, r3, #32
 800701a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a28      	ldr	r2, [pc, #160]	@ (80070cc <TIM_OC2_SetConfig+0x100>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC2_SetConfig+0x6c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a27      	ldr	r2, [pc, #156]	@ (80070d0 <TIM_OC2_SetConfig+0x104>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d10d      	bne.n	8007054 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800703e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1d      	ldr	r2, [pc, #116]	@ (80070cc <TIM_OC2_SetConfig+0x100>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00f      	beq.n	800707c <TIM_OC2_SetConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <TIM_OC2_SetConfig+0x104>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00b      	beq.n	800707c <TIM_OC2_SetConfig+0xb0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <TIM_OC2_SetConfig+0x108>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <TIM_OC2_SetConfig+0xb0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1a      	ldr	r2, [pc, #104]	@ (80070d8 <TIM_OC2_SetConfig+0x10c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC2_SetConfig+0xb0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <TIM_OC2_SetConfig+0x110>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d113      	bne.n	80070a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800708a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40013400 	.word	0x40013400
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800

080070e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a27      	ldr	r2, [pc, #156]	@ (80071dc <TIM_OC3_SetConfig+0xfc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_OC3_SetConfig+0x6a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a26      	ldr	r2, [pc, #152]	@ (80071e0 <TIM_OC3_SetConfig+0x100>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10d      	bne.n	8007166 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1c      	ldr	r2, [pc, #112]	@ (80071dc <TIM_OC3_SetConfig+0xfc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_OC3_SetConfig+0xae>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1b      	ldr	r2, [pc, #108]	@ (80071e0 <TIM_OC3_SetConfig+0x100>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_OC3_SetConfig+0xae>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a1a      	ldr	r2, [pc, #104]	@ (80071e4 <TIM_OC3_SetConfig+0x104>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_OC3_SetConfig+0xae>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a19      	ldr	r2, [pc, #100]	@ (80071e8 <TIM_OC3_SetConfig+0x108>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_OC3_SetConfig+0xae>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a18      	ldr	r2, [pc, #96]	@ (80071ec <TIM_OC3_SetConfig+0x10c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d113      	bne.n	80071b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800719c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	621a      	str	r2, [r3, #32]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40012c00 	.word	0x40012c00
 80071e0:	40013400 	.word	0x40013400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800722a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800723e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	031b      	lsls	r3, r3, #12
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <TIM_OC4_SetConfig+0xc0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00f      	beq.n	8007274 <TIM_OC4_SetConfig+0x84>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <TIM_OC4_SetConfig+0xc4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_OC4_SetConfig+0x84>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a16      	ldr	r2, [pc, #88]	@ (80072b8 <TIM_OC4_SetConfig+0xc8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_OC4_SetConfig+0x84>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a15      	ldr	r2, [pc, #84]	@ (80072bc <TIM_OC4_SetConfig+0xcc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC4_SetConfig+0x84>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a14      	ldr	r2, [pc, #80]	@ (80072c0 <TIM_OC4_SetConfig+0xd0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d109      	bne.n	8007288 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800727a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	019b      	lsls	r3, r3, #6
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800

080072c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	041b      	lsls	r3, r3, #16
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a17      	ldr	r2, [pc, #92]	@ (8007378 <TIM_OC5_SetConfig+0xb4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_OC5_SetConfig+0x7a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a16      	ldr	r2, [pc, #88]	@ (800737c <TIM_OC5_SetConfig+0xb8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <TIM_OC5_SetConfig+0x7a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a15      	ldr	r2, [pc, #84]	@ (8007380 <TIM_OC5_SetConfig+0xbc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_OC5_SetConfig+0x7a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a14      	ldr	r2, [pc, #80]	@ (8007384 <TIM_OC5_SetConfig+0xc0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_OC5_SetConfig+0x7a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a13      	ldr	r2, [pc, #76]	@ (8007388 <TIM_OC5_SetConfig+0xc4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d109      	bne.n	8007352 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007344:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	051b      	lsls	r3, r3, #20
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a18      	ldr	r2, [pc, #96]	@ (8007444 <TIM_OC6_SetConfig+0xb8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_OC6_SetConfig+0x7c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a17      	ldr	r2, [pc, #92]	@ (8007448 <TIM_OC6_SetConfig+0xbc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_OC6_SetConfig+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a16      	ldr	r2, [pc, #88]	@ (800744c <TIM_OC6_SetConfig+0xc0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_OC6_SetConfig+0x7c>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a15      	ldr	r2, [pc, #84]	@ (8007450 <TIM_OC6_SetConfig+0xc4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC6_SetConfig+0x7c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a14      	ldr	r2, [pc, #80]	@ (8007454 <TIM_OC6_SetConfig+0xc8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d109      	bne.n	800741c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800740e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	029b      	lsls	r3, r3, #10
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800

08007458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 030a 	bic.w	r3, r3, #10
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f023 0210 	bic.w	r2, r3, #16
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	f043 0307 	orr.w	r3, r3, #7
 8007538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	021a      	lsls	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	431a      	orrs	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e068      	b.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d108      	bne.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1e      	ldr	r2, [pc, #120]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d018      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1a      	ldr	r2, [pc, #104]	@ (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a13      	ldr	r2, [pc, #76]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a14      	ldr	r2, [pc, #80]	@ (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d10c      	bne.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4313      	orrs	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40014000 	.word	0x40014000

0800769c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e065      	b.n	8007784 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a16      	ldr	r2, [pc, #88]	@ (8007790 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d004      	beq.n	8007746 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a14      	ldr	r2, [pc, #80]	@ (8007794 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d115      	bne.n	8007772 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	051b      	lsls	r3, r3, #20
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40013400 	.word	0x40013400

08007798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e040      	b.n	8007868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fc f87c 	bl	80038f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	@ 0x24
 8007800:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fae0 	bl	8007de0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f825 	bl	8007870 <UART_SetConfig>
 8007826:	4603      	mov	r3, r0
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e01b      	b.n	8007868 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800783e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800784e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0201 	orr.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fb5f 	bl	8007f24 <UART_CheckIdleState>
 8007866:	4603      	mov	r3, r0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007874:	b08a      	sub	sp, #40	@ 0x28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	4313      	orrs	r3, r2
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4ba4      	ldr	r3, [pc, #656]	@ (8007b30 <UART_SetConfig+0x2c0>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078a8:	430b      	orrs	r3, r1
 80078aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a99      	ldr	r2, [pc, #612]	@ (8007b34 <UART_SetConfig+0x2c4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d8:	4313      	orrs	r3, r2
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ec:	430a      	orrs	r2, r1
 80078ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a90      	ldr	r2, [pc, #576]	@ (8007b38 <UART_SetConfig+0x2c8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d126      	bne.n	8007948 <UART_SetConfig+0xd8>
 80078fa:	4b90      	ldr	r3, [pc, #576]	@ (8007b3c <UART_SetConfig+0x2cc>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b03      	cmp	r3, #3
 8007906:	d81b      	bhi.n	8007940 <UART_SetConfig+0xd0>
 8007908:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0xa0>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007921 	.word	0x08007921
 8007914:	08007931 	.word	0x08007931
 8007918:	08007929 	.word	0x08007929
 800791c:	08007939 	.word	0x08007939
 8007920:	2301      	movs	r3, #1
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e116      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792e:	e112      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007936:	e10e      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793e:	e10a      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007946:	e106      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a7c      	ldr	r2, [pc, #496]	@ (8007b40 <UART_SetConfig+0x2d0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d138      	bne.n	80079c4 <UART_SetConfig+0x154>
 8007952:	4b7a      	ldr	r3, [pc, #488]	@ (8007b3c <UART_SetConfig+0x2cc>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007958:	f003 030c 	and.w	r3, r3, #12
 800795c:	2b0c      	cmp	r3, #12
 800795e:	d82d      	bhi.n	80079bc <UART_SetConfig+0x14c>
 8007960:	a201      	add	r2, pc, #4	@ (adr r2, 8007968 <UART_SetConfig+0xf8>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	0800799d 	.word	0x0800799d
 800796c:	080079bd 	.word	0x080079bd
 8007970:	080079bd 	.word	0x080079bd
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079bd 	.word	0x080079bd
 8007984:	080079bd 	.word	0x080079bd
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079b5 	.word	0x080079b5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e0d8      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079aa:	e0d4      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079ac:	2304      	movs	r3, #4
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b2:	e0d0      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079b4:	2308      	movs	r3, #8
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ba:	e0cc      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e0c8      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007b44 <UART_SetConfig+0x2d4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d125      	bne.n	8007a1a <UART_SetConfig+0x1aa>
 80079ce:	4b5b      	ldr	r3, [pc, #364]	@ (8007b3c <UART_SetConfig+0x2cc>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079d8:	2b30      	cmp	r3, #48	@ 0x30
 80079da:	d016      	beq.n	8007a0a <UART_SetConfig+0x19a>
 80079dc:	2b30      	cmp	r3, #48	@ 0x30
 80079de:	d818      	bhi.n	8007a12 <UART_SetConfig+0x1a2>
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d00a      	beq.n	80079fa <UART_SetConfig+0x18a>
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d814      	bhi.n	8007a12 <UART_SetConfig+0x1a2>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UART_SetConfig+0x182>
 80079ec:	2b10      	cmp	r3, #16
 80079ee:	d008      	beq.n	8007a02 <UART_SetConfig+0x192>
 80079f0:	e00f      	b.n	8007a12 <UART_SetConfig+0x1a2>
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f8:	e0ad      	b.n	8007b56 <UART_SetConfig+0x2e6>
 80079fa:	2302      	movs	r3, #2
 80079fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a00:	e0a9      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a02:	2304      	movs	r3, #4
 8007a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a08:	e0a5      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a10:	e0a1      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a12:	2310      	movs	r3, #16
 8007a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a18:	e09d      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b48 <UART_SetConfig+0x2d8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d125      	bne.n	8007a70 <UART_SetConfig+0x200>
 8007a24:	4b45      	ldr	r3, [pc, #276]	@ (8007b3c <UART_SetConfig+0x2cc>)
 8007a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a30:	d016      	beq.n	8007a60 <UART_SetConfig+0x1f0>
 8007a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a34:	d818      	bhi.n	8007a68 <UART_SetConfig+0x1f8>
 8007a36:	2b80      	cmp	r3, #128	@ 0x80
 8007a38:	d00a      	beq.n	8007a50 <UART_SetConfig+0x1e0>
 8007a3a:	2b80      	cmp	r3, #128	@ 0x80
 8007a3c:	d814      	bhi.n	8007a68 <UART_SetConfig+0x1f8>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <UART_SetConfig+0x1d8>
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d008      	beq.n	8007a58 <UART_SetConfig+0x1e8>
 8007a46:	e00f      	b.n	8007a68 <UART_SetConfig+0x1f8>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4e:	e082      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a56:	e07e      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e07a      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e076      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6e:	e072      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a35      	ldr	r2, [pc, #212]	@ (8007b4c <UART_SetConfig+0x2dc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d12a      	bne.n	8007ad0 <UART_SetConfig+0x260>
 8007a7a:	4b30      	ldr	r3, [pc, #192]	@ (8007b3c <UART_SetConfig+0x2cc>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a88:	d01a      	beq.n	8007ac0 <UART_SetConfig+0x250>
 8007a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8e:	d81b      	bhi.n	8007ac8 <UART_SetConfig+0x258>
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a94:	d00c      	beq.n	8007ab0 <UART_SetConfig+0x240>
 8007a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9a:	d815      	bhi.n	8007ac8 <UART_SetConfig+0x258>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x238>
 8007aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa4:	d008      	beq.n	8007ab8 <UART_SetConfig+0x248>
 8007aa6:	e00f      	b.n	8007ac8 <UART_SetConfig+0x258>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aae:	e052      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab6:	e04e      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007abe:	e04a      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac6:	e046      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ace:	e042      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a17      	ldr	r2, [pc, #92]	@ (8007b34 <UART_SetConfig+0x2c4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d13a      	bne.n	8007b50 <UART_SetConfig+0x2e0>
 8007ada:	4b18      	ldr	r3, [pc, #96]	@ (8007b3c <UART_SetConfig+0x2cc>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ae4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ae8:	d01a      	beq.n	8007b20 <UART_SetConfig+0x2b0>
 8007aea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aee:	d81b      	bhi.n	8007b28 <UART_SetConfig+0x2b8>
 8007af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007af4:	d00c      	beq.n	8007b10 <UART_SetConfig+0x2a0>
 8007af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007afa:	d815      	bhi.n	8007b28 <UART_SetConfig+0x2b8>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <UART_SetConfig+0x298>
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b04:	d008      	beq.n	8007b18 <UART_SetConfig+0x2a8>
 8007b06:	e00f      	b.n	8007b28 <UART_SetConfig+0x2b8>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0e:	e022      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007b10:	2302      	movs	r3, #2
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b16:	e01e      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b1e:	e01a      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b26:	e016      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2e:	e012      	b.n	8007b56 <UART_SetConfig+0x2e6>
 8007b30:	efff69f3 	.word	0xefff69f3
 8007b34:	40008000 	.word	0x40008000
 8007b38:	40013800 	.word	0x40013800
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	40004400 	.word	0x40004400
 8007b44:	40004800 	.word	0x40004800
 8007b48:	40004c00 	.word	0x40004c00
 8007b4c:	40005000 	.word	0x40005000
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a9f      	ldr	r2, [pc, #636]	@ (8007dd8 <UART_SetConfig+0x568>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d17a      	bne.n	8007c56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d824      	bhi.n	8007bb2 <UART_SetConfig+0x342>
 8007b68:	a201      	add	r2, pc, #4	@ (adr r2, 8007b70 <UART_SetConfig+0x300>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007bb3 	.word	0x08007bb3
 8007b78:	08007b9d 	.word	0x08007b9d
 8007b7c:	08007bb3 	.word	0x08007bb3
 8007b80:	08007ba3 	.word	0x08007ba3
 8007b84:	08007bb3 	.word	0x08007bb3
 8007b88:	08007bb3 	.word	0x08007bb3
 8007b8c:	08007bb3 	.word	0x08007bb3
 8007b90:	08007bab 	.word	0x08007bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b94:	f7fd fe22 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8007b98:	61f8      	str	r0, [r7, #28]
        break;
 8007b9a:	e010      	b.n	8007bbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8007ddc <UART_SetConfig+0x56c>)
 8007b9e:	61fb      	str	r3, [r7, #28]
        break;
 8007ba0:	e00d      	b.n	8007bbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba2:	f7fd fd83 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8007ba6:	61f8      	str	r0, [r7, #28]
        break;
 8007ba8:	e009      	b.n	8007bbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bae:	61fb      	str	r3, [r7, #28]
        break;
 8007bb0:	e005      	b.n	8007bbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 80fb 	beq.w	8007dbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	4413      	add	r3, r2
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d305      	bcc.n	8007be2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d903      	bls.n	8007bea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007be8:	e0e8      	b.n	8007dbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2200      	movs	r2, #0
 8007bee:	461c      	mov	r4, r3
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	022b      	lsls	r3, r5, #8
 8007bfc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c00:	0222      	lsls	r2, r4, #8
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	6849      	ldr	r1, [r1, #4]
 8007c06:	0849      	lsrs	r1, r1, #1
 8007c08:	2000      	movs	r0, #0
 8007c0a:	4688      	mov	r8, r1
 8007c0c:	4681      	mov	r9, r0
 8007c0e:	eb12 0a08 	adds.w	sl, r2, r8
 8007c12:	eb43 0b09 	adc.w	fp, r3, r9
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c24:	4650      	mov	r0, sl
 8007c26:	4659      	mov	r1, fp
 8007c28:	f7f8 face 	bl	80001c8 <__aeabi_uldivmod>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4613      	mov	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c3a:	d308      	bcc.n	8007c4e <UART_SetConfig+0x3de>
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c42:	d204      	bcs.n	8007c4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	60da      	str	r2, [r3, #12]
 8007c4c:	e0b6      	b.n	8007dbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c54:	e0b2      	b.n	8007dbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c5e:	d15e      	bne.n	8007d1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d828      	bhi.n	8007cba <UART_SetConfig+0x44a>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <UART_SetConfig+0x400>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c95 	.word	0x08007c95
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cbb 	.word	0x08007cbb
 8007c80:	08007cab 	.word	0x08007cab
 8007c84:	08007cbb 	.word	0x08007cbb
 8007c88:	08007cbb 	.word	0x08007cbb
 8007c8c:	08007cbb 	.word	0x08007cbb
 8007c90:	08007cb3 	.word	0x08007cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fd fda2 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8007c98:	61f8      	str	r0, [r7, #28]
        break;
 8007c9a:	e014      	b.n	8007cc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9c:	f7fd fdb4 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8007ca0:	61f8      	str	r0, [r7, #28]
        break;
 8007ca2:	e010      	b.n	8007cc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8007ddc <UART_SetConfig+0x56c>)
 8007ca6:	61fb      	str	r3, [r7, #28]
        break;
 8007ca8:	e00d      	b.n	8007cc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007caa:	f7fd fcff 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8007cae:	61f8      	str	r0, [r7, #28]
        break;
 8007cb0:	e009      	b.n	8007cc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb6:	61fb      	str	r3, [r7, #28]
        break;
 8007cb8:	e005      	b.n	8007cc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d077      	beq.n	8007dbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	005a      	lsls	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b0f      	cmp	r3, #15
 8007ce6:	d916      	bls.n	8007d16 <UART_SetConfig+0x4a6>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cee:	d212      	bcs.n	8007d16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f023 030f 	bic.w	r3, r3, #15
 8007cf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	8afb      	ldrh	r3, [r7, #22]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	8afa      	ldrh	r2, [r7, #22]
 8007d12:	60da      	str	r2, [r3, #12]
 8007d14:	e052      	b.n	8007dbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d1c:	e04e      	b.n	8007dbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d827      	bhi.n	8007d76 <UART_SetConfig+0x506>
 8007d26:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <UART_SetConfig+0x4bc>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d77 	.word	0x08007d77
 8007d3c:	08007d67 	.word	0x08007d67
 8007d40:	08007d77 	.word	0x08007d77
 8007d44:	08007d77 	.word	0x08007d77
 8007d48:	08007d77 	.word	0x08007d77
 8007d4c:	08007d6f 	.word	0x08007d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d50:	f7fd fd44 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8007d54:	61f8      	str	r0, [r7, #28]
        break;
 8007d56:	e014      	b.n	8007d82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fd fd56 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8007d5c:	61f8      	str	r0, [r7, #28]
        break;
 8007d5e:	e010      	b.n	8007d82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d60:	4b1e      	ldr	r3, [pc, #120]	@ (8007ddc <UART_SetConfig+0x56c>)
 8007d62:	61fb      	str	r3, [r7, #28]
        break;
 8007d64:	e00d      	b.n	8007d82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d66:	f7fd fca1 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8007d6a:	61f8      	str	r0, [r7, #28]
        break;
 8007d6c:	e009      	b.n	8007d82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d72:	61fb      	str	r3, [r7, #28]
        break;
 8007d74:	e005      	b.n	8007d82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d80:	bf00      	nop
    }

    if (pclk != 0U)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d019      	beq.n	8007dbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	085a      	lsrs	r2, r3, #1
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b0f      	cmp	r3, #15
 8007da0:	d909      	bls.n	8007db6 <UART_SetConfig+0x546>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da8:	d205      	bcs.n	8007db6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60da      	str	r2, [r3, #12]
 8007db4:	e002      	b.n	8007dbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007dc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3728      	adds	r7, #40	@ 0x28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40008000 	.word	0x40008000
 8007ddc:	00f42400 	.word	0x00f42400

08007de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ede:	d10a      	bne.n	8007ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b098      	sub	sp, #96	@ 0x60
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f34:	f7fb fe34 	bl	8003ba0 <HAL_GetTick>
 8007f38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d12e      	bne.n	8007fa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f50:	2200      	movs	r2, #0
 8007f52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f88c 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d021      	beq.n	8007fa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e062      	b.n	800806c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d149      	bne.n	8008048 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f856 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d03c      	beq.n	8008048 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	623b      	str	r3, [r7, #32]
   return(result);
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008020:	61fa      	str	r2, [r7, #28]
 8008022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	69b9      	ldr	r1, [r7, #24]
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	617b      	str	r3, [r7, #20]
   return(result);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e5      	bne.n	8008000 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e011      	b.n	800806c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3758      	adds	r7, #88	@ 0x58
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e04f      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d04b      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fb fd87 	bl	8003ba0 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e04e      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d037      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b80      	cmp	r3, #128	@ 0x80
 80080ba:	d034      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d031      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d110      	bne.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f838 	bl	800814e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2208      	movs	r2, #8
 80080e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e029      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008100:	d111      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800810a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f81e 	bl	800814e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e00f      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4013      	ands	r3, r2
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d0a0      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800814e:	b480      	push	{r7}
 8008150:	b095      	sub	sp, #84	@ 0x54
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008174:	643b      	str	r3, [r7, #64]	@ 0x40
 8008176:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800817a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	61fb      	str	r3, [r7, #28]
   return(result);
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f023 0301 	bic.w	r3, r3, #1
 800819e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d118      	bne.n	80081f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f023 0310 	bic.w	r3, r3, #16
 80081d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6979      	ldr	r1, [r7, #20]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	613b      	str	r3, [r7, #16]
   return(result);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e6      	bne.n	80081c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800820a:	bf00      	nop
 800820c:	3754      	adds	r7, #84	@ 0x54
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <memset>:
 8008216:	4402      	add	r2, r0
 8008218:	4603      	mov	r3, r0
 800821a:	4293      	cmp	r3, r2
 800821c:	d100      	bne.n	8008220 <memset+0xa>
 800821e:	4770      	bx	lr
 8008220:	f803 1b01 	strb.w	r1, [r3], #1
 8008224:	e7f9      	b.n	800821a <memset+0x4>
	...

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	@ (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	@ (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	@ (800826c <__libc_init_array+0x44>)
 800823c:	f000 f826 	bl	800828c <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	0800d2f4 	.word	0x0800d2f4
 8008264:	0800d2f4 	.word	0x0800d2f4
 8008268:	0800d2f4 	.word	0x0800d2f4
 800826c:	0800d2f8 	.word	0x0800d2f8

08008270 <memcpy>:
 8008270:	440a      	add	r2, r1
 8008272:	4291      	cmp	r1, r2
 8008274:	f100 33ff 	add.w	r3, r0, #4294967295
 8008278:	d100      	bne.n	800827c <memcpy+0xc>
 800827a:	4770      	bx	lr
 800827c:	b510      	push	{r4, lr}
 800827e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008286:	4291      	cmp	r1, r2
 8008288:	d1f9      	bne.n	800827e <memcpy+0xe>
 800828a:	bd10      	pop	{r4, pc}

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr

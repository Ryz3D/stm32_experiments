
esc_pwm_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005220  08009268  08009268  0000a268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e488  0800e488  00011100  2**0
                  CONTENTS
  4 .ARM          00000008  0800e488  0800e488  0000f488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e490  0800e490  00011100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e490  0800e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e494  0800e494  0000f494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001100  20000000  0800e498  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d200  20001100  0800f598  00011100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e300  0800f598  00011300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013287  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3f  00000000  00000000  000243b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000270f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002783b  00000000  00000000  00028390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016ae4  00000000  00000000  0004fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f493f  00000000  00000000  000666af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0015afee  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e32  00000000  00000000  0015b031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000507c  00000000  00000000  0015be64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00160ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001100 	.word	0x20001100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009250 	.word	0x08009250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001104 	.word	0x20001104
 80001c4:	08009250 	.word	0x08009250

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <pin_mode>:
#include "cia.h"

void pin_mode(uint8_t ddr, uint8_t offset)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	 if (io_conf_in.pin_bit_mask)
	 ESP_ERROR_CHECK(gpio_config(&io_conf_in));
	 if (io_conf_out.pin_bit_mask)
	 ESP_ERROR_CHECK(gpio_config(&io_conf_out));
	 */
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <cia_read>:

uint8_t port_a = 0;

int8_t cia_read(uint8_t addr_off)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	if (addr_off == 0x00)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d103      	bne.n	8000e28 <cia_read+0x18>
		return port_a;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <cia_read+0x4c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	e013      	b.n	8000e50 <cia_read+0x40>
	else if (addr_off == 0x01)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d104      	bne.n	8000e38 <cia_read+0x28>
	{
		uint8_t port_b = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
		 port_b |= gpio_get_level(6) << 2;
		 port_b |= gpio_get_level(7) << 1;
		 port_b |= gpio_get_level(8) << 0;
		 */

		return port_b;
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	e00b      	b.n	8000e50 <cia_read+0x40>
	}
	else if (addr_off == 0x02)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d102      	bne.n	8000e44 <cia_read+0x34>
		return 0xff;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e005      	b.n	8000e50 <cia_read+0x40>
	else if (addr_off == 0x03)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d101      	bne.n	8000e4e <cia_read+0x3e>
		return 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <cia_read+0x40>
	return 0;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	2000111c 	.word	0x2000111c

08000e60 <cia_write>:

void cia_write(uint8_t addr_off, int8_t d)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
	if (addr_off == 0x00)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d103      	bne.n	8000e7e <cia_write+0x1e>
	{
		port_a = d;
 8000e76:	79ba      	ldrb	r2, [r7, #6]
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <cia_write+0x48>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	}
	else if (addr_off == 0x02)
		pin_mode(d, 9);
	else if (addr_off == 0x03)
		pin_mode(d, 1);
}
 8000e7c:	e010      	b.n	8000ea0 <cia_write+0x40>
	else if (addr_off == 0x02)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d105      	bne.n	8000e90 <cia_write+0x30>
		pin_mode(d, 9);
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	2109      	movs	r1, #9
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffb3 	bl	8000df4 <pin_mode>
}
 8000e8e:	e007      	b.n	8000ea0 <cia_write+0x40>
	else if (addr_off == 0x03)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d104      	bne.n	8000ea0 <cia_write+0x40>
		pin_mode(d, 1);
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffaa 	bl	8000df4 <pin_mode>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000111c 	.word	0x2000111c

08000eac <reset>:
bool fN, fV, fB, fD, fI, fZ, fC;
uint8_t stack_pointer;
int8_t ins_buf[3];

void reset()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	a = x = y = 0;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <reset+0x6c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <reset+0x6c>)
 8000eb8:	f993 2000 	ldrsb.w	r2, [r3]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <reset+0x70>)
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <reset+0x70>)
 8000ec2:	f993 2000 	ldrsb.w	r2, [r3]
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <reset+0x74>)
 8000ec8:	701a      	strb	r2, [r3, #0]
	fN = fV = fB = fD = fZ = fC = 0;
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <reset+0x78>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <reset+0x78>)
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <reset+0x7c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <reset+0x7c>)
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <reset+0x80>)
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <reset+0x80>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <reset+0x84>)
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <reset+0x84>)
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <reset+0x88>)
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <reset+0x88>)
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <reset+0x8c>)
 8000ef6:	701a      	strb	r2, [r3, #0]
	fI = 1;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <reset+0x90>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
	stack_pointer = 0xff;
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <reset+0x94>)
 8000f00:	22ff      	movs	r2, #255	@ 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
	pc = mem_read16(0xfffc);
 8000f04:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8000f08:	f001 fe0c 	bl	8002b24 <mem_read16>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <reset+0x98>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20001122 	.word	0x20001122
 8000f1c:	20001121 	.word	0x20001121
 8000f20:	20001120 	.word	0x20001120
 8000f24:	20001129 	.word	0x20001129
 8000f28:	20001128 	.word	0x20001128
 8000f2c:	20001126 	.word	0x20001126
 8000f30:	20001125 	.word	0x20001125
 8000f34:	20001124 	.word	0x20001124
 8000f38:	20001123 	.word	0x20001123
 8000f3c:	20001127 	.word	0x20001127
 8000f40:	2000112a 	.word	0x2000112a
 8000f44:	2000111e 	.word	0x2000111e

08000f48 <s_pop>:
	s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
	pc = mem_read16(0xfffa);
}

uint8_t s_pop()
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	return stack[++stack_pointer];
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <s_pop+0x28>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <s_pop+0x28>)
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <s_pop+0x28>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <s_pop+0x2c>)
 8000f60:	569b      	ldrsb	r3, [r3, r2]
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000112a 	.word	0x2000112a
 8000f74:	20001234 	.word	0x20001234

08000f78 <s_push>:

void s_push(int8_t d)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	stack[stack_pointer--] = d;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <s_push+0x2c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	b2d1      	uxtb	r1, r2
 8000f8a:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <s_push+0x2c>)
 8000f8c:	7011      	strb	r1, [r2, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <s_push+0x30>)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	5453      	strb	r3, [r2, r1]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000112a 	.word	0x2000112a
 8000fa8:	20001234 	.word	0x20001234

08000fac <s_pop16>:

uint16_t s_pop16()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t a = s_pop();
 8000fb2:	f7ff ffc9 	bl	8000f48 <s_pop>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t b = s_pop();
 8000fba:	f7ff ffc5 	bl	8000f48 <s_pop>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t)b << 8) | (uint16_t)a;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <s_push16>:

void s_push16(uint16_t d)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	80fb      	strh	r3, [r7, #6]
	s_push(d >> 8);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ffc3 	bl	8000f78 <s_push>
	s_push(d & 0xff);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffbe 	bl	8000f78 <s_push>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <load_ins_buf>:

void load_ins_buf(uint8_t len)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e010      	b.n	8001036 <load_ins_buf+0x32>
		ins_buf[i] = mem_read(pc + i);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <load_ins_buf+0x54>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b29b      	uxth	r3, r3
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fcbc 	bl	80029a0 <mem_read>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <load_ins_buf+0x58>)
 800102e:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < len; i++)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ea      	bcc.n	8001014 <load_ins_buf+0x10>
	pc += len;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <load_ins_buf+0x54>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <load_ins_buf+0x54>)
 800104c:	801a      	strh	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	bf00      	nop
 8001058:	2000111e 	.word	0x2000111e
 800105c:	2000112c 	.word	0x2000112c

08001060 <get_operand>:

bool get_operand(int8_t *op, uint16_t *op_addr, uint8_t ins, uint8_t *variants)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	71fb      	strb	r3, [r7, #7]
	if (ins == 0x00)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <get_operand+0x1a>
		return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e120      	b.n	80012bc <get_operand+0x25c>

	if (ins == variants[0])
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	429a      	cmp	r2, r3
 8001082:	d108      	bne.n	8001096 <get_operand+0x36>
	{
		// immediate
		load_ins_buf(2);
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff ffbd 	bl	8001004 <load_ins_buf>
		*op = ins_buf[1];
 800108a:	4b8e      	ldr	r3, [pc, #568]	@ (80012c4 <get_operand+0x264>)
 800108c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e111      	b.n	80012ba <get_operand+0x25a>
	}
	else
	{
		if (ins == variants[1])
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d10a      	bne.n	80010b8 <get_operand+0x58>
		{
			// zeropage
			load_ins_buf(2);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff ffae 	bl	8001004 <load_ins_buf>
			*op_addr = (uint8_t)ins_buf[1];
 80010a8:	4b86      	ldr	r3, [pc, #536]	@ (80012c4 <get_operand+0x264>)
 80010aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	801a      	strh	r2, [r3, #0]
 80010b6:	e0f7      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[2])
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3302      	adds	r3, #2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d110      	bne.n	80010e6 <get_operand+0x86>
		{
			// x-indexed zeropage
			load_ins_buf(2);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff9d 	bl	8001004 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)x);
 80010ca:	4b7e      	ldr	r3, [pc, #504]	@ (80012c4 <get_operand+0x264>)
 80010cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b7d      	ldr	r3, [pc, #500]	@ (80012c8 <get_operand+0x268>)
 80010d4:	f993 3000 	ldrsb.w	r3, [r3]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e0e0      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[3])
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3303      	adds	r3, #3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d110      	bne.n	8001114 <get_operand+0xb4>
		{
			// y-indexed zeropage
			load_ins_buf(2);
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff ff86 	bl	8001004 <load_ins_buf>
			*op_addr = (uint8_t)((uint8_t)ins_buf[1] + (uint8_t)y);
 80010f8:	4b72      	ldr	r3, [pc, #456]	@ (80012c4 <get_operand+0x264>)
 80010fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b72      	ldr	r3, [pc, #456]	@ (80012cc <get_operand+0x26c>)
 8001102:	f993 3000 	ldrsb.w	r3, [r3]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	e0c9      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[4])
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	429a      	cmp	r2, r3
 800111e:	d116      	bne.n	800114e <get_operand+0xee>
		{
			// x-indexed zeropage indirect
			load_ins_buf(2);
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff ff6f 	bl	8001004 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1] + (uint8_t)x;
 8001126:	4b67      	ldr	r3, [pc, #412]	@ (80012c4 <get_operand+0x264>)
 8001128:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <get_operand+0x268>)
 8001130:	f993 3000 	ldrsb.w	r3, [r3]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	753b      	strb	r3, [r7, #20]
			*op_addr = mem_read16(op_addr_addr);
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fcf0 	bl	8002b24 <mem_read16>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	e0ac      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[5])
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3305      	adds	r3, #5
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	429a      	cmp	r2, r3
 8001158:	d116      	bne.n	8001188 <get_operand+0x128>
		{
			// y-indexed zeropage indirect
			load_ins_buf(2);
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff ff52 	bl	8001004 <load_ins_buf>
			uint8_t op_addr_addr = (uint8_t)ins_buf[1];
 8001160:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <get_operand+0x264>)
 8001162:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001166:	757b      	strb	r3, [r7, #21]
			*op_addr = mem_read16(op_addr_addr) + (uint8_t)y;
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fcd9 	bl	8002b24 <mem_read16>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b55      	ldr	r3, [pc, #340]	@ (80012cc <get_operand+0x26c>)
 8001178:	f993 3000 	ldrsb.w	r3, [r3]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b29a      	uxth	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	e08f      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[6])
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3306      	adds	r3, #6
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	429a      	cmp	r2, r3
 8001192:	d113      	bne.n	80011bc <get_operand+0x15c>
		{
			// absolute
			load_ins_buf(3);
 8001194:	2003      	movs	r0, #3
 8001196:	f7ff ff35 	bl	8001004 <load_ins_buf>
			*op_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 800119a:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <get_operand+0x264>)
 800119c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <get_operand+0x264>)
 80011a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	e075      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[7])
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3307      	adds	r3, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d119      	bne.n	80011fc <get_operand+0x19c>
		{
			// x-indexed absolute
			load_ins_buf(3);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f7ff ff1b 	bl	8001004 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)x;
 80011ce:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <get_operand+0x264>)
 80011d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <get_operand+0x264>)
 80011dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4a37      	ldr	r2, [pc, #220]	@ (80012c8 <get_operand+0x268>)
 80011ec:	f992 2000 	ldrsb.w	r2, [r2]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	4413      	add	r3, r2
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	e055      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[8])
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3308      	adds	r3, #8
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	429a      	cmp	r2, r3
 8001206:	d119      	bne.n	800123c <get_operand+0x1dc>
		{
			// y-indexed absolute
			load_ins_buf(3);
 8001208:	2003      	movs	r0, #3
 800120a:	f7ff fefb 	bl	8001004 <load_ins_buf>
			*op_addr = (((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]) + (uint8_t)y;
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <get_operand+0x264>)
 8001210:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <get_operand+0x264>)
 800121c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29b      	uxth	r3, r3
 800122a:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <get_operand+0x26c>)
 800122c:	f992 2000 	ldrsb.w	r2, [r2]
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	4413      	add	r3, r2
 8001234:	b29a      	uxth	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	e035      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[9])
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3309      	adds	r3, #9
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	429a      	cmp	r2, r3
 8001246:	d119      	bne.n	800127c <get_operand+0x21c>
		{
			// absolute indirect
			load_ins_buf(3);
 8001248:	2003      	movs	r0, #3
 800124a:	f7ff fedb 	bl	8001004 <load_ins_buf>
			uint16_t op_addr_addr = ((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1];
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <get_operand+0x264>)
 8001250:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <get_operand+0x264>)
 800125c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	82fb      	strh	r3, [r7, #22]
			*op_addr = mem_read16(op_addr_addr);
 800126a:	8afb      	ldrh	r3, [r7, #22]
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fc59 	bl	8002b24 <mem_read16>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	e015      	b.n	80012a8 <get_operand+0x248>
		}
		else if (ins == variants[10])
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	330a      	adds	r3, #10
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	429a      	cmp	r2, r3
 8001286:	d10d      	bne.n	80012a4 <get_operand+0x244>
		{
			// relative
			load_ins_buf(2);
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff febb 	bl	8001004 <load_ins_buf>
			*op_addr = pc + ins_buf[1];
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <get_operand+0x264>)
 8001290:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <get_operand+0x270>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	b29a      	uxth	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	e001      	b.n	80012a8 <get_operand+0x248>
		}
		else
			return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e009      	b.n	80012bc <get_operand+0x25c>

		*op = mem_read(*op_addr);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fb77 	bl	80029a0 <mem_read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000112c 	.word	0x2000112c
 80012c8:	20001121 	.word	0x20001121
 80012cc:	20001122 	.word	0x20001122
 80012d0:	2000111e 	.word	0x2000111e

080012d4 <exec_ora>:
	0xa0, 0xa4, 0xb4, 0x00, 0x00, 0x00, 0xac, 0xbc, 0x00, 0x00, 0x00 };
uint8_t v_sty[] = {
	0x00, 0x84, 0x94, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00 };

bool exec_ora(uint8_t ins, int8_t *res)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ora))
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	f107 000f 	add.w	r0, r7, #15
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <exec_ora+0x50>)
 80012ec:	490e      	ldr	r1, [pc, #56]	@ (8001328 <exec_ora+0x54>)
 80012ee:	f7ff feb7 	bl	8001060 <get_operand>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00f      	beq.n	8001318 <exec_ora+0x44>
	{
		*res = a |= op;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <exec_ora+0x58>)
 80012fa:	f993 2000 	ldrsb.w	r2, [r3]
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4313      	orrs	r3, r2
 8001304:	b25a      	sxtb	r2, r3
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <exec_ora+0x58>)
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <exec_ora+0x58>)
 800130c:	f993 2000 	ldrsb.w	r2, [r3]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	701a      	strb	r2, [r3, #0]
		return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <exec_ora+0x46>
	}
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	20001130 	.word	0x20001130
 800132c:	20001120 	.word	0x20001120

08001330 <exec_and>:

bool exec_and(uint8_t ins, int8_t *res)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_and))
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	f107 000f 	add.w	r0, r7, #15
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <exec_and+0x50>)
 8001348:	490e      	ldr	r1, [pc, #56]	@ (8001384 <exec_and+0x54>)
 800134a:	f7ff fe89 	bl	8001060 <get_operand>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00f      	beq.n	8001374 <exec_and+0x44>
	{
		*res = a &= op;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <exec_and+0x58>)
 8001356:	f993 2000 	ldrsb.w	r2, [r3]
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4013      	ands	r3, r2
 8001360:	b25a      	sxtb	r2, r3
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <exec_and+0x58>)
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <exec_and+0x58>)
 8001368:	f993 2000 	ldrsb.w	r2, [r3]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	701a      	strb	r2, [r3, #0]
		return 1;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <exec_and+0x46>
	}
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20001130 	.word	0x20001130
 8001388:	20001120 	.word	0x20001120

0800138c <exec_eor>:

bool exec_eor(uint8_t ins, int8_t *res)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_eor))
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	f107 000f 	add.w	r0, r7, #15
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <exec_eor+0x50>)
 80013a4:	490e      	ldr	r1, [pc, #56]	@ (80013e0 <exec_eor+0x54>)
 80013a6:	f7ff fe5b 	bl	8001060 <get_operand>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00f      	beq.n	80013d0 <exec_eor+0x44>
	{
		*res = a ^= op;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <exec_eor+0x58>)
 80013b2:	f993 2000 	ldrsb.w	r2, [r3]
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4053      	eors	r3, r2
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <exec_eor+0x58>)
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <exec_eor+0x58>)
 80013c4:	f993 2000 	ldrsb.w	r2, [r3]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
		return 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <exec_eor+0x46>
	}
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000018 	.word	0x20000018
 80013e0:	20001130 	.word	0x20001130
 80013e4:	20001120 	.word	0x20001120

080013e8 <setCV>:

int8_t setCV(int8_t a, int8_t b, bool sub)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	460b      	mov	r3, r1
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	4613      	mov	r3, r2
 80013f8:	717b      	strb	r3, [r7, #5]
	int8_t res = a + (sub ? ~b : b) + fC;
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <setCV+0x20>
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	43db      	mvns	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e000      	b.n	800140a <setCV+0x22>
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <setCV+0xac>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	4413      	add	r3, r2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	73fb      	strb	r3, [r7, #15]
	if (sub)
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <setCV+0x40>
		b = -b;
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	425b      	negs	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	71bb      	strb	r3, [r7, #6]
	uint8_t ua = a, ub = b, ur = res;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	73bb      	strb	r3, [r7, #14]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	737b      	strb	r3, [r7, #13]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	733b      	strb	r3, [r7, #12]
	fC = fC ? (ur <= ua) : (ur < ua);
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <setCV+0xac>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <setCV+0x64>
 800143c:	7b3a      	ldrb	r2, [r7, #12]
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	429a      	cmp	r2, r3
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e006      	b.n	800145a <setCV+0x72>
 800144c:	7b3a      	ldrb	r2, [r7, #12]
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	429a      	cmp	r2, r3
 8001452:	bf34      	ite	cc
 8001454:	2301      	movcc	r3, #1
 8001456:	2300      	movcs	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <setCV+0xac>)
 800145c:	7013      	strb	r3, [r2, #0]
	fV = (ua ^ ur) & (ub ^ ur) & (1 << 7);
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	4053      	eors	r3, r2
 8001464:	b2da      	uxtb	r2, r3
 8001466:	7b79      	ldrb	r1, [r7, #13]
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	404b      	eors	r3, r1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4013      	ands	r3, r2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf14      	ite	ne
 800147a:	2301      	movne	r3, #1
 800147c:	2300      	moveq	r3, #0
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <setCV+0xb0>)
 8001482:	701a      	strb	r2, [r3, #0]
	return res;
 8001484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20001129 	.word	0x20001129
 8001498:	20001124 	.word	0x20001124

0800149c <exec_adc>:

bool exec_adc(uint8_t ins, int8_t *res)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_adc))
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	f107 000f 	add.w	r0, r7, #15
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <exec_adc+0x58>)
 80014b4:	4910      	ldr	r1, [pc, #64]	@ (80014f8 <exec_adc+0x5c>)
 80014b6:	f7ff fdd3 	bl	8001060 <get_operand>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <exec_adc+0x4c>
	{
		*res = a = setCV(a, op, 0);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <exec_adc+0x60>)
 80014c2:	f993 3000 	ldrsb.w	r3, [r3]
 80014c6:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80014ca:	2200      	movs	r2, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff8b 	bl	80013e8 <setCV>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <exec_adc+0x60>)
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <exec_adc+0x60>)
 80014dc:	f993 2000 	ldrsb.w	r2, [r3]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	701a      	strb	r2, [r3, #0]
		return 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <exec_adc+0x4e>
	}
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000024 	.word	0x20000024
 80014f8:	20001130 	.word	0x20001130
 80014fc:	20001120 	.word	0x20001120

08001500 <exec_sbc>:

bool exec_sbc(uint8_t ins, int8_t *res)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_sbc))
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	f107 000f 	add.w	r0, r7, #15
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <exec_sbc+0x58>)
 8001518:	4910      	ldr	r1, [pc, #64]	@ (800155c <exec_sbc+0x5c>)
 800151a:	f7ff fda1 	bl	8001060 <get_operand>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <exec_sbc+0x4c>
	{
		*res = a = setCV(a, op, 1);
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <exec_sbc+0x60>)
 8001526:	f993 3000 	ldrsb.w	r3, [r3]
 800152a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800152e:	2201      	movs	r2, #1
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff59 	bl	80013e8 <setCV>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <exec_sbc+0x60>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <exec_sbc+0x60>)
 8001540:	f993 2000 	ldrsb.w	r2, [r3]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	701a      	strb	r2, [r3, #0]
		return 1;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <exec_sbc+0x4e>
	}
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000030 	.word	0x20000030
 800155c:	20001130 	.word	0x20001130
 8001560:	20001120 	.word	0x20001120

08001564 <exec_cmp>:

bool exec_cmp(uint8_t ins, int8_t *res)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cmp))
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	f107 000f 	add.w	r0, r7, #15
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <exec_cmp+0x68>)
 800157c:	4914      	ldr	r1, [pc, #80]	@ (80015d0 <exec_cmp+0x6c>)
 800157e:	f7ff fd6f 	bl	8001060 <get_operand>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01b      	beq.n	80015c0 <exec_cmp+0x5c>
	{
		*res = a - op;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <exec_cmp+0x70>)
 800158a:	f993 3000 	ldrsb.w	r3, [r3]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	b25a      	sxtb	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)a >= (uint8_t)op;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <exec_cmp+0x70>)
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	429a      	cmp	r2, r3
 80015b0:	bf2c      	ite	cs
 80015b2:	2301      	movcs	r3, #1
 80015b4:	2300      	movcc	r3, #0
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <exec_cmp+0x74>)
 80015ba:	701a      	strb	r2, [r3, #0]
		return 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <exec_cmp+0x5e>
	}
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000003c 	.word	0x2000003c
 80015d0:	20001130 	.word	0x20001130
 80015d4:	20001120 	.word	0x20001120
 80015d8:	20001129 	.word	0x20001129

080015dc <exec_cpx>:

bool exec_cpx(uint8_t ins, int8_t *res)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpx))
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	f107 000f 	add.w	r0, r7, #15
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <exec_cpx+0x68>)
 80015f4:	4914      	ldr	r1, [pc, #80]	@ (8001648 <exec_cpx+0x6c>)
 80015f6:	f7ff fd33 	bl	8001060 <get_operand>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <exec_cpx+0x5c>
	{
		*res = x - op;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <exec_cpx+0x70>)
 8001602:	f993 3000 	ldrsb.w	r3, [r3]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b25a      	sxtb	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)x >= (uint8_t)op;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <exec_cpx+0x70>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	429a      	cmp	r2, r3
 8001628:	bf2c      	ite	cs
 800162a:	2301      	movcs	r3, #1
 800162c:	2300      	movcc	r3, #0
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <exec_cpx+0x74>)
 8001632:	701a      	strb	r2, [r3, #0]
		return 1;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <exec_cpx+0x5e>
	}
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000048 	.word	0x20000048
 8001648:	20001130 	.word	0x20001130
 800164c:	20001121 	.word	0x20001121
 8001650:	20001129 	.word	0x20001129

08001654 <exec_cpy>:

bool exec_cpy(uint8_t ins, int8_t *res)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_cpy))
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	f107 000f 	add.w	r0, r7, #15
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <exec_cpy+0x68>)
 800166c:	4914      	ldr	r1, [pc, #80]	@ (80016c0 <exec_cpy+0x6c>)
 800166e:	f7ff fcf7 	bl	8001060 <get_operand>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <exec_cpy+0x5c>
	{
		*res = y - op;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <exec_cpy+0x70>)
 800167a:	f993 3000 	ldrsb.w	r3, [r3]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b25a      	sxtb	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	701a      	strb	r2, [r3, #0]
		fC = (uint8_t)y >= (uint8_t)op;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <exec_cpy+0x70>)
 8001692:	f993 3000 	ldrsb.w	r3, [r3]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	429a      	cmp	r2, r3
 80016a0:	bf2c      	ite	cs
 80016a2:	2301      	movcs	r3, #1
 80016a4:	2300      	movcc	r3, #0
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <exec_cpy+0x74>)
 80016aa:	701a      	strb	r2, [r3, #0]
		return 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <exec_cpy+0x5e>
	}
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000054 	.word	0x20000054
 80016c0:	20001130 	.word	0x20001130
 80016c4:	20001122 	.word	0x20001122
 80016c8:	20001129 	.word	0x20001129

080016cc <exec_dec>:

bool exec_dec(uint8_t ins, int8_t *res)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_dec))
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	f107 010c 	add.w	r1, r7, #12
 80016e6:	f107 000f 	add.w	r0, r7, #15
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <exec_dec+0x58>)
 80016ec:	f7ff fcb8 	bl	8001060 <get_operand>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d011      	beq.n	800171a <exec_dec+0x4e>
	{
		mem_write(op_addr, *res = op - 1);
 80016f6:	89ba      	ldrh	r2, [r7, #12]
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b259      	sxtb	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	7019      	strb	r1, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f993 3000 	ldrsb.w	r3, [r3]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f001 fa25 	bl	8002b60 <mem_write>
		return 1;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <exec_dec+0x50>
	}
	return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000060 	.word	0x20000060

08001728 <exec_inc>:

bool exec_inc(uint8_t ins, int8_t *res)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_inc))
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	f107 000f 	add.w	r0, r7, #15
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <exec_inc+0x58>)
 8001748:	f7ff fc8a 	bl	8001060 <get_operand>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <exec_inc+0x4e>
	{
		mem_write(op_addr, *res = op + 1);
 8001752:	89ba      	ldrh	r2, [r7, #12]
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b259      	sxtb	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7019      	strb	r1, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f001 f9f7 	bl	8002b60 <mem_write>
		return 1;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <exec_inc+0x50>
	}
	return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000006c 	.word	0x2000006c

08001784 <exec_asl>:

bool exec_asl(uint8_t ins, int8_t *res)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_asl))
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	f107 010c 	add.w	r1, r7, #12
 800179e:	f107 000f 	add.w	r0, r7, #15
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <exec_asl+0x6c>)
 80017a4:	f7ff fc5c 	bl	8001060 <get_operand>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01b      	beq.n	80017e6 <exec_asl+0x62>
	{
		fC = op >> 7;
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	11db      	asrs	r3, r3, #7
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <exec_asl+0x70>)
 80017c2:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op << 1);
 80017c4:	89ba      	ldrh	r2, [r7, #12]
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	b259      	sxtb	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	7019      	strb	r1, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f993 3000 	ldrsb.w	r3, [r3]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f001 f9bf 	bl	8002b60 <mem_write>
		return 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <exec_asl+0x64>
	}
	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000078 	.word	0x20000078
 80017f4:	20001129 	.word	0x20001129

080017f8 <exec_rol>:

bool exec_rol(uint8_t ins, int8_t *res)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_rol))
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	f107 010c 	add.w	r1, r7, #12
 8001812:	f107 000e 	add.w	r0, r7, #14
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <exec_rol+0x78>)
 8001818:	f7ff fc22 	bl	8001060 <get_operand>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d021      	beq.n	8001866 <exec_rol+0x6e>
	{
		bool c_in = fC;
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <exec_rol+0x7c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	73fb      	strb	r3, [r7, #15]
		fC = op >> 7;
 8001828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800182c:	11db      	asrs	r3, r3, #7
 800182e:	b25b      	sxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <exec_rol+0x7c>)
 800183c:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op << 1) | (uint8_t)c_in);
 800183e:	89b8      	ldrh	r0, [r7, #12]
 8001840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	b25a      	sxtb	r2, r3
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4313      	orrs	r3, r2
 8001850:	b25a      	sxtb	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f993 3000 	ldrsb.w	r3, [r3]
 800185c:	4619      	mov	r1, r3
 800185e:	f001 f97f 	bl	8002b60 <mem_write>
		return 1;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <exec_rol+0x70>
	}
	return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000084 	.word	0x20000084
 8001874:	20001129 	.word	0x20001129

08001878 <exec_lsr>:

bool exec_lsr(uint8_t ins, int8_t *res)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_lsr))
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	f107 010c 	add.w	r1, r7, #12
 8001892:	f107 000f 	add.w	r0, r7, #15
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <exec_lsr+0x70>)
 8001898:	f7ff fbe2 	bl	8001060 <get_operand>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01d      	beq.n	80018de <exec_lsr+0x66>
	{
		fC = op & 1;
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <exec_lsr+0x74>)
 80018b8:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = (uint8_t)op >> 1);
 80018ba:	89ba      	ldrh	r2, [r7, #12]
 80018bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b259      	sxtb	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	7019      	strb	r1, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f993 3000 	ldrsb.w	r3, [r3]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f001 f943 	bl	8002b60 <mem_write>
		return 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <exec_lsr+0x68>
	}
	return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000090 	.word	0x20000090
 80018ec:	20001129 	.word	0x20001129

080018f0 <exec_ror>:

bool exec_ror(uint8_t ins, int8_t *res)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73bb      	strb	r3, [r7, #14]
	uint16_t op_addr = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_ror))
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	f107 010c 	add.w	r1, r7, #12
 800190a:	f107 000e 	add.w	r0, r7, #14
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <exec_ror+0x80>)
 8001910:	f7ff fba6 	bl	8001060 <get_operand>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <exec_ror+0x74>
	{
		bool c_in = fC;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <exec_ror+0x84>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	73fb      	strb	r3, [r7, #15]
		fC = op & 1;
 8001920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <exec_ror+0x84>)
 8001936:	701a      	strb	r2, [r3, #0]
		mem_write(op_addr, *res = ((uint8_t)op >> 1) | ((uint8_t)c_in << 7));
 8001938:	89b8      	ldrh	r0, [r7, #12]
 800193a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	b25a      	sxtb	r2, r3
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	01db      	lsls	r3, r3, #7
 800194a:	b25b      	sxtb	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b25a      	sxtb	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	4619      	mov	r1, r3
 800195c:	f001 f900 	bl	8002b60 <mem_write>
		return 1;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <exec_ror+0x76>
	}
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000009c 	.word	0x2000009c
 8001974:	20001129 	.word	0x20001129

08001978 <exec_lda>:

bool exec_lda(uint8_t ins, int8_t *res)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_lda))
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	f107 000f 	add.w	r0, r7, #15
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <exec_lda+0x44>)
 8001990:	490b      	ldr	r1, [pc, #44]	@ (80019c0 <exec_lda+0x48>)
 8001992:	f7ff fb65 	bl	8001060 <get_operand>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <exec_lda+0x3a>
	{
		*res = a = op;
 800199c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <exec_lda+0x4c>)
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <exec_lda+0x4c>)
 80019a6:	f993 2000 	ldrsb.w	r2, [r3]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	701a      	strb	r2, [r3, #0]
		return 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <exec_lda+0x3c>
	}
	return 0;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000a8 	.word	0x200000a8
 80019c0:	20001130 	.word	0x20001130
 80019c4:	20001120 	.word	0x20001120

080019c8 <exec_sta>:

bool exec_sta(uint8_t ins, int8_t *res)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sta))
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	f107 010c 	add.w	r1, r7, #12
 80019e2:	f107 000f 	add.w	r0, r7, #15
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <exec_sta+0x48>)
 80019e8:	f7ff fb3a 	bl	8001060 <get_operand>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <exec_sta+0x3e>
	{
		mem_write(op_addr, a);
 80019f2:	89bb      	ldrh	r3, [r7, #12]
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <exec_sta+0x4c>)
 80019f6:	f992 2000 	ldrsb.w	r2, [r2]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 f8af 	bl	8002b60 <mem_write>
		return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <exec_sta+0x40>
	}
	return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200000b4 	.word	0x200000b4
 8001a14:	20001120 	.word	0x20001120

08001a18 <exec_ldx>:

bool exec_ldx(uint8_t ins, int8_t *res)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldx))
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	f107 000f 	add.w	r0, r7, #15
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <exec_ldx+0x44>)
 8001a30:	490b      	ldr	r1, [pc, #44]	@ (8001a60 <exec_ldx+0x48>)
 8001a32:	f7ff fb15 	bl	8001060 <get_operand>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00a      	beq.n	8001a52 <exec_ldx+0x3a>
	{
		*res = x = op;
 8001a3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <exec_ldx+0x4c>)
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <exec_ldx+0x4c>)
 8001a46:	f993 2000 	ldrsb.w	r2, [r3]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	701a      	strb	r2, [r3, #0]
		return 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <exec_ldx+0x3c>
	}
	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000c0 	.word	0x200000c0
 8001a60:	20001130 	.word	0x20001130
 8001a64:	20001121 	.word	0x20001121

08001a68 <exec_stx>:

bool exec_stx(uint8_t ins, int8_t *res)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_stx))
 8001a7c:	79fa      	ldrb	r2, [r7, #7]
 8001a7e:	f107 010c 	add.w	r1, r7, #12
 8001a82:	f107 000f 	add.w	r0, r7, #15
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <exec_stx+0x48>)
 8001a88:	f7ff faea 	bl	8001060 <get_operand>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <exec_stx+0x3e>
	{
		mem_write(op_addr, x);
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <exec_stx+0x4c>)
 8001a96:	f992 2000 	ldrsb.w	r2, [r2]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 f85f 	bl	8002b60 <mem_write>
		return 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <exec_stx+0x40>
	}
	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000cc 	.word	0x200000cc
 8001ab4:	20001121 	.word	0x20001121

08001ab8 <exec_ldy>:

bool exec_ldy(uint8_t ins, int8_t *res)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
	if (get_operand(&op, &useless_addr, ins, v_ldy))
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	f107 000f 	add.w	r0, r7, #15
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <exec_ldy+0x44>)
 8001ad0:	490b      	ldr	r1, [pc, #44]	@ (8001b00 <exec_ldy+0x48>)
 8001ad2:	f7ff fac5 	bl	8001060 <get_operand>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <exec_ldy+0x3a>
	{
		*res = y = op;
 8001adc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <exec_ldy+0x4c>)
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <exec_ldy+0x4c>)
 8001ae6:	f993 2000 	ldrsb.w	r2, [r3]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
		return 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <exec_ldy+0x3c>
	}
	return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000d8 	.word	0x200000d8
 8001b00:	20001130 	.word	0x20001130
 8001b04:	20001122 	.word	0x20001122

08001b08 <exec_sty>:

bool exec_sty(uint8_t ins, int8_t *res)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
	int8_t op = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
	uint16_t op_addr = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	81bb      	strh	r3, [r7, #12]
	if (get_operand(&op, &op_addr, ins, v_sty))
 8001b1c:	79fa      	ldrb	r2, [r7, #7]
 8001b1e:	f107 010c 	add.w	r1, r7, #12
 8001b22:	f107 000f 	add.w	r0, r7, #15
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <exec_sty+0x48>)
 8001b28:	f7ff fa9a 	bl	8001060 <get_operand>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <exec_sty+0x3e>
	{
		mem_write(op_addr, y);
 8001b32:	89bb      	ldrh	r3, [r7, #12]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <exec_sty+0x4c>)
 8001b36:	f992 2000 	ldrsb.w	r2, [r2]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 f80f 	bl	8002b60 <mem_write>
		return 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <exec_sty+0x40>
	}
	return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200000e4 	.word	0x200000e4
 8001b54:	20001122 	.word	0x20001122

08001b58 <exec_ins>:

void exec_ins()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
	uint8_t ins = (uint8_t)mem_read(pc);
 8001b5e:	4bab      	ldr	r3, [pc, #684]	@ (8001e0c <exec_ins+0x2b4>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 ff1c 	bl	80029a0 <mem_read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73bb      	strb	r3, [r7, #14]
	int8_t res = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	71fb      	strb	r3, [r7, #7]
	bool skipZN = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]

	if (exec_ora(ins, &res))
 8001b74:	1dfa      	adds	r2, r7, #7
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fbaa 	bl	80012d4 <exec_ora>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 85e7 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_and(ins, &res))
 8001b88:	1dfa      	adds	r2, r7, #7
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbce 	bl	8001330 <exec_and>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 85dd 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_eor(ins, &res))
 8001b9c:	1dfa      	adds	r2, r7, #7
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fbf2 	bl	800138c <exec_eor>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 85d3 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_adc(ins, &res))
 8001bb0:	1dfa      	adds	r2, r7, #7
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc70 	bl	800149c <exec_adc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 85c9 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_sbc(ins, &res))
 8001bc4:	1dfa      	adds	r2, r7, #7
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc98 	bl	8001500 <exec_sbc>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 85bf 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_cmp(ins, &res))
 8001bd8:	1dfa      	adds	r2, r7, #7
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fcc0 	bl	8001564 <exec_cmp>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 85b5 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_cpx(ins, &res))
 8001bec:	1dfa      	adds	r2, r7, #7
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fcf2 	bl	80015dc <exec_cpx>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 85ab 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_cpy(ins, &res))
 8001c00:	1dfa      	adds	r2, r7, #7
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd24 	bl	8001654 <exec_cpy>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 85a1 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_dec(ins, &res))
 8001c14:	1dfa      	adds	r2, r7, #7
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fd56 	bl	80016cc <exec_dec>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8597 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (ins == 0xca)
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	2bca      	cmp	r3, #202	@ 0xca
 8001c2c:	d114      	bne.n	8001c58 <exec_ins+0x100>
	{
		res = --x;
 8001c2e:	4b78      	ldr	r3, [pc, #480]	@ (8001e10 <exec_ins+0x2b8>)
 8001c30:	f993 3000 	ldrsb.w	r3, [r3]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	b25a      	sxtb	r2, r3
 8001c3c:	4b74      	ldr	r3, [pc, #464]	@ (8001e10 <exec_ins+0x2b8>)
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b73      	ldr	r3, [pc, #460]	@ (8001e10 <exec_ins+0x2b8>)
 8001c42:	f993 3000 	ldrsb.w	r3, [r3]
 8001c46:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001c48:	4b70      	ldr	r3, [pc, #448]	@ (8001e0c <exec_ins+0x2b4>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b6e      	ldr	r3, [pc, #440]	@ (8001e0c <exec_ins+0x2b4>)
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	f000 bd7f 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x88)
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	2b88      	cmp	r3, #136	@ 0x88
 8001c5c:	d114      	bne.n	8001c88 <exec_ins+0x130>
	{
		res = --y;
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e14 <exec_ins+0x2bc>)
 8001c60:	f993 3000 	ldrsb.w	r3, [r3]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	4b69      	ldr	r3, [pc, #420]	@ (8001e14 <exec_ins+0x2bc>)
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <exec_ins+0x2bc>)
 8001c72:	f993 3000 	ldrsb.w	r3, [r3]
 8001c76:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001c78:	4b64      	ldr	r3, [pc, #400]	@ (8001e0c <exec_ins+0x2b4>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b62      	ldr	r3, [pc, #392]	@ (8001e0c <exec_ins+0x2b4>)
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	f000 bd67 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (exec_inc(ins, &res))
 8001c88:	1dfa      	adds	r2, r7, #7
 8001c8a:	7bbb      	ldrb	r3, [r7, #14]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd4a 	bl	8001728 <exec_inc>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 855d 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (ins == 0xe8)
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	2be8      	cmp	r3, #232	@ 0xe8
 8001ca0:	d114      	bne.n	8001ccc <exec_ins+0x174>
	{
		res = ++x;
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e10 <exec_ins+0x2b8>)
 8001ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	4b57      	ldr	r3, [pc, #348]	@ (8001e10 <exec_ins+0x2b8>)
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	4b56      	ldr	r3, [pc, #344]	@ (8001e10 <exec_ins+0x2b8>)
 8001cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cba:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <exec_ins+0x2b4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b51      	ldr	r3, [pc, #324]	@ (8001e0c <exec_ins+0x2b4>)
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	f000 bd45 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xc8)
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2bc8      	cmp	r3, #200	@ 0xc8
 8001cd0:	d114      	bne.n	8001cfc <exec_ins+0x1a4>
	{
		res = ++y;
 8001cd2:	4b50      	ldr	r3, [pc, #320]	@ (8001e14 <exec_ins+0x2bc>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e14 <exec_ins+0x2bc>)
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <exec_ins+0x2bc>)
 8001ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cea:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001cec:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <exec_ins+0x2b4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b45      	ldr	r3, [pc, #276]	@ (8001e0c <exec_ins+0x2b4>)
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	f000 bd2d 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x0a)
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d120      	bne.n	8001d44 <exec_ins+0x1ec>
	{
		fC = (uint8_t)a >> 7;
 8001d02:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <exec_ins+0x2c0>)
 8001d04:	f993 3000 	ldrsb.w	r3, [r3]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	09db      	lsrs	r3, r3, #7
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <exec_ins+0x2c4>)
 8001d1a:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a << 1;
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <exec_ins+0x2c0>)
 8001d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <exec_ins+0x2c0>)
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <exec_ins+0x2c0>)
 8001d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d32:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001d34:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <exec_ins+0x2b4>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <exec_ins+0x2b4>)
 8001d3e:	801a      	strh	r2, [r3, #0]
 8001d40:	f000 bd09 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (exec_asl(ins, &res))
 8001d44:	1dfa      	adds	r2, r7, #7
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fd1a 	bl	8001784 <exec_asl>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 84ff 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (ins == 0x2a)
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d5c:	d127      	bne.n	8001dae <exec_ins+0x256>
	{
		bool c_in = fC;
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <exec_ins+0x2c4>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	723b      	strb	r3, [r7, #8]
		fC = (uint8_t)a >> 7;
 8001d64:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <exec_ins+0x2c0>)
 8001d66:	f993 3000 	ldrsb.w	r3, [r3]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	09db      	lsrs	r3, r3, #7
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <exec_ins+0x2c4>)
 8001d7c:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a << 1) | (uint8_t)c_in;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <exec_ins+0x2c0>)
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b25a      	sxtb	r2, r3
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <exec_ins+0x2c0>)
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <exec_ins+0x2c0>)
 8001d98:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9c:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <exec_ins+0x2b4>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <exec_ins+0x2b4>)
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	f000 bcd4 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (exec_rol(ins, &res))
 8001dae:	1dfa      	adds	r2, r7, #7
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fd1f 	bl	80017f8 <exec_rol>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 84ca 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (ins == 0x4a)
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b4a      	cmp	r3, #74	@ 0x4a
 8001dc6:	d12b      	bne.n	8001e20 <exec_ins+0x2c8>
	{
		fC = (uint8_t)a & 1;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <exec_ins+0x2c0>)
 8001dca:	f993 3000 	ldrsb.w	r3, [r3]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <exec_ins+0x2c4>)
 8001de0:	701a      	strb	r2, [r3, #0]
		res = a = (uint8_t)a >> 1;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <exec_ins+0x2c0>)
 8001de4:	f993 3000 	ldrsb.w	r3, [r3]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <exec_ins+0x2c0>)
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <exec_ins+0x2c0>)
 8001df6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dfa:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <exec_ins+0x2b4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b01      	ldr	r3, [pc, #4]	@ (8001e0c <exec_ins+0x2b4>)
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	f000 bca5 	b.w	8002756 <exec_ins+0xbfe>
 8001e0c:	2000111e 	.word	0x2000111e
 8001e10:	20001121 	.word	0x20001121
 8001e14:	20001122 	.word	0x20001122
 8001e18:	20001120 	.word	0x20001120
 8001e1c:	20001129 	.word	0x20001129
	}
	else if (exec_lsr(ins, &res))
 8001e20:	1dfa      	adds	r2, r7, #7
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fd26 	bl	8001878 <exec_lsr>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8491 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (ins == 0x6a)
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	2b6a      	cmp	r3, #106	@ 0x6a
 8001e38:	d129      	bne.n	8001e8e <exec_ins+0x336>
	{
		bool c_in = fC;
 8001e3a:	4b88      	ldr	r3, [pc, #544]	@ (800205c <exec_ins+0x504>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	727b      	strb	r3, [r7, #9]
		fC = (uint8_t)a & 1;
 8001e40:	4b87      	ldr	r3, [pc, #540]	@ (8002060 <exec_ins+0x508>)
 8001e42:	f993 3000 	ldrsb.w	r3, [r3]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b81      	ldr	r3, [pc, #516]	@ (800205c <exec_ins+0x504>)
 8001e58:	701a      	strb	r2, [r3, #0]
		res = a = ((uint8_t)a >> 1) | ((uint8_t)c_in << 7);
 8001e5a:	4b81      	ldr	r3, [pc, #516]	@ (8002060 <exec_ins+0x508>)
 8001e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	b25a      	sxtb	r2, r3
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	01db      	lsls	r3, r3, #7
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b25a      	sxtb	r2, r3
 8001e72:	4b7b      	ldr	r3, [pc, #492]	@ (8002060 <exec_ins+0x508>)
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b7a      	ldr	r3, [pc, #488]	@ (8002060 <exec_ins+0x508>)
 8001e78:	f993 3000 	ldrsb.w	r3, [r3]
 8001e7c:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001e7e:	4b79      	ldr	r3, [pc, #484]	@ (8002064 <exec_ins+0x50c>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b77      	ldr	r3, [pc, #476]	@ (8002064 <exec_ins+0x50c>)
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	f000 bc64 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (exec_ror(ins, &res))
 8001e8e:	1dfa      	adds	r2, r7, #7
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fd2b 	bl	80018f0 <exec_ror>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f040 845a 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_lda(ins, &res))
 8001ea2:	1dfa      	adds	r2, r7, #7
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fd65 	bl	8001978 <exec_lda>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 8450 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_sta(ins, &res))
 8001eb6:	1dfa      	adds	r2, r7, #7
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fd83 	bl	80019c8 <exec_sta>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <exec_ins+0x378>
		skipZN = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	f000 bc43 	b.w	8002756 <exec_ins+0xbfe>
	else if (exec_ldx(ins, &res))
 8001ed0:	1dfa      	adds	r2, r7, #7
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd9e 	bl	8001a18 <exec_ldx>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8439 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_stx(ins, &res))
 8001ee4:	1dfa      	adds	r2, r7, #7
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fdbc 	bl	8001a68 <exec_stx>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <exec_ins+0x3a6>
		skipZN = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	f000 bc2c 	b.w	8002756 <exec_ins+0xbfe>
	else if (exec_ldy(ins, &res))
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fdd7 	bl	8001ab8 <exec_ldy>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 8422 	bne.w	8002756 <exec_ins+0xbfe>
		;
	else if (exec_sty(ins, &res))
 8001f12:	1dfa      	adds	r2, r7, #7
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fdf5 	bl	8001b08 <exec_sty>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <exec_ins+0x3d4>
		skipZN = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	f000 bc15 	b.w	8002756 <exec_ins+0xbfe>
	else if (ins == 0xaa)
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	2baa      	cmp	r3, #170	@ 0xaa
 8001f30:	d110      	bne.n	8001f54 <exec_ins+0x3fc>
	{
		res = x = a;
 8001f32:	4b4b      	ldr	r3, [pc, #300]	@ (8002060 <exec_ins+0x508>)
 8001f34:	f993 2000 	ldrsb.w	r2, [r3]
 8001f38:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <exec_ins+0x510>)
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <exec_ins+0x510>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001f44:	4b47      	ldr	r3, [pc, #284]	@ (8002064 <exec_ins+0x50c>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b45      	ldr	r3, [pc, #276]	@ (8002064 <exec_ins+0x50c>)
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	f000 bc01 	b.w	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x8a)
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	2b8a      	cmp	r3, #138	@ 0x8a
 8001f58:	d10f      	bne.n	8001f7a <exec_ins+0x422>
	{
		res = a = x;
 8001f5a:	4b43      	ldr	r3, [pc, #268]	@ (8002068 <exec_ins+0x510>)
 8001f5c:	f993 2000 	ldrsb.w	r2, [r3]
 8001f60:	4b3f      	ldr	r3, [pc, #252]	@ (8002060 <exec_ins+0x508>)
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <exec_ins+0x508>)
 8001f66:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6a:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002064 <exec_ins+0x50c>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <exec_ins+0x50c>)
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e3ed      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xa8)
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	2ba8      	cmp	r3, #168	@ 0xa8
 8001f7e:	d10f      	bne.n	8001fa0 <exec_ins+0x448>
	{
		res = y = a;
 8001f80:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <exec_ins+0x508>)
 8001f82:	f993 2000 	ldrsb.w	r2, [r3]
 8001f86:	4b39      	ldr	r3, [pc, #228]	@ (800206c <exec_ins+0x514>)
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <exec_ins+0x514>)
 8001f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f90:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001f92:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <exec_ins+0x50c>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b32      	ldr	r3, [pc, #200]	@ (8002064 <exec_ins+0x50c>)
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	e3da      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x98)
 8001fa0:	7bbb      	ldrb	r3, [r7, #14]
 8001fa2:	2b98      	cmp	r3, #152	@ 0x98
 8001fa4:	d10f      	bne.n	8001fc6 <exec_ins+0x46e>
	{
		res = a = y;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	@ (800206c <exec_ins+0x514>)
 8001fa8:	f993 2000 	ldrsb.w	r2, [r3]
 8001fac:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <exec_ins+0x508>)
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <exec_ins+0x508>)
 8001fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb6:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <exec_ins+0x50c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <exec_ins+0x50c>)
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e3c7      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xba)
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2bba      	cmp	r3, #186	@ 0xba
 8001fca:	d10f      	bne.n	8001fec <exec_ins+0x494>
	{
		res = x = stack_pointer;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <exec_ins+0x518>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <exec_ins+0x510>)
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <exec_ins+0x510>)
 8001fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fdc:	71fb      	strb	r3, [r7, #7]
		pc++;
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <exec_ins+0x50c>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <exec_ins+0x50c>)
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	e3b4      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x9a)
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	2b9a      	cmp	r3, #154	@ 0x9a
 8001ff0:	d10e      	bne.n	8002010 <exec_ins+0x4b8>
	{
		stack_pointer = x;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <exec_ins+0x510>)
 8001ff4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <exec_ins+0x518>)
 8001ffc:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002002:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <exec_ins+0x50c>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <exec_ins+0x50c>)
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	e3a2      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x68)
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	2b68      	cmp	r3, #104	@ 0x68
 8002014:	d110      	bne.n	8002038 <exec_ins+0x4e0>
	{
		res = a = s_pop();
 8002016:	f7fe ff97 	bl	8000f48 <s_pop>
 800201a:	4603      	mov	r3, r0
 800201c:	b25a      	sxtb	r2, r3
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <exec_ins+0x508>)
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <exec_ins+0x508>)
 8002024:	f993 3000 	ldrsb.w	r3, [r3]
 8002028:	71fb      	strb	r3, [r7, #7]
		pc++;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <exec_ins+0x50c>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <exec_ins+0x50c>)
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	e38e      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x48)
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	2b48      	cmp	r3, #72	@ 0x48
 800203c:	d11a      	bne.n	8002074 <exec_ins+0x51c>
	{
		s_push(a);
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <exec_ins+0x508>)
 8002040:	f993 3000 	ldrsb.w	r3, [r3]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe ff97 	bl	8000f78 <s_push>
		skipZN = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
		pc++;
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <exec_ins+0x50c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <exec_ins+0x50c>)
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e37c      	b.n	8002756 <exec_ins+0xbfe>
 800205c:	20001129 	.word	0x20001129
 8002060:	20001120 	.word	0x20001120
 8002064:	2000111e 	.word	0x2000111e
 8002068:	20001121 	.word	0x20001121
 800206c:	20001122 	.word	0x20001122
 8002070:	2000112a 	.word	0x2000112a
	}
	else if (ins == 0x28)
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	2b28      	cmp	r3, #40	@ 0x28
 8002078:	d148      	bne.n	800210c <exec_ins+0x5b4>
	{
		uint8_t status = s_pop();
 800207a:	f7fe ff65 	bl	8000f48 <s_pop>
 800207e:	4603      	mov	r3, r0
 8002080:	72bb      	strb	r3, [r7, #10]
		fN = status & (1 << 7);
 8002082:	7abb      	ldrb	r3, [r7, #10]
 8002084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b8d      	ldr	r3, [pc, #564]	@ (80022c8 <exec_ins+0x770>)
 8002094:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 8002096:	7abb      	ldrb	r3, [r7, #10]
 8002098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b89      	ldr	r3, [pc, #548]	@ (80022cc <exec_ins+0x774>)
 80020a8:	701a      	strb	r2, [r3, #0]
		fD = status & (1 << 3);
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b85      	ldr	r3, [pc, #532]	@ (80022d0 <exec_ins+0x778>)
 80020bc:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b81      	ldr	r3, [pc, #516]	@ (80022d4 <exec_ins+0x77c>)
 80020d0:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 80020d2:	7abb      	ldrb	r3, [r7, #10]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b7d      	ldr	r3, [pc, #500]	@ (80022d8 <exec_ins+0x780>)
 80020e4:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b79      	ldr	r3, [pc, #484]	@ (80022dc <exec_ins+0x784>)
 80020f8:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
		pc++;
 80020fe:	4b78      	ldr	r3, [pc, #480]	@ (80022e0 <exec_ins+0x788>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <exec_ins+0x788>)
 8002108:	801a      	strh	r2, [r3, #0]
 800210a:	e324      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x08)
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	2b08      	cmp	r3, #8
 8002110:	d135      	bne.n	800217e <exec_ins+0x626>
	{
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 8002112:	4b6d      	ldr	r3, [pc, #436]	@ (80022c8 <exec_ins+0x770>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	b25a      	sxtb	r2, r3
 800211a:	4b6c      	ldr	r3, [pc, #432]	@ (80022cc <exec_ins+0x774>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	019b      	lsls	r3, r3, #6
 8002120:	b25b      	sxtb	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b25b      	sxtb	r3, r3
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	b25a      	sxtb	r2, r3
 800212c:	4b6d      	ldr	r3, [pc, #436]	@ (80022e4 <exec_ins+0x78c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	b25b      	sxtb	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b25a      	sxtb	r2, r3
 8002138:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <exec_ins+0x778>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	b25b      	sxtb	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b25a      	sxtb	r2, r3
 8002144:	4b63      	ldr	r3, [pc, #396]	@ (80022d4 <exec_ins+0x77c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b25a      	sxtb	r2, r3
 8002150:	4b61      	ldr	r3, [pc, #388]	@ (80022d8 <exec_ins+0x780>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	b25b      	sxtb	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b25a      	sxtb	r2, r3
 800215c:	4b5f      	ldr	r3, [pc, #380]	@ (80022dc <exec_ins+0x784>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b25b      	sxtb	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff06 	bl	8000f78 <s_push>
		skipZN = 1;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002170:	4b5b      	ldr	r3, [pc, #364]	@ (80022e0 <exec_ins+0x788>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b59      	ldr	r3, [pc, #356]	@ (80022e0 <exec_ins+0x788>)
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e2eb      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x10)
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	2b10      	cmp	r3, #16
 8002182:	d11e      	bne.n	80021c2 <exec_ins+0x66a>
	{
		if (!fN)
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <exec_ins+0x770>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <exec_ins+0x658>
			pc += mem_read(pc + 1);
 8002192:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <exec_ins+0x788>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fc00 	bl	80029a0 <mem_read>
 80021a0:	4603      	mov	r3, r0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <exec_ins+0x788>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <exec_ins+0x788>)
 80021ae:	801a      	strh	r2, [r3, #0]
		pc += 2;
 80021b0:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <exec_ins+0x788>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	3302      	adds	r3, #2
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <exec_ins+0x788>)
 80021ba:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e2c9      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x30)
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	2b30      	cmp	r3, #48	@ 0x30
 80021c6:	d11b      	bne.n	8002200 <exec_ins+0x6a8>
	{
		if (fN)
 80021c8:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <exec_ins+0x770>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <exec_ins+0x696>
			pc += mem_read(pc + 1);
 80021d0:	4b43      	ldr	r3, [pc, #268]	@ (80022e0 <exec_ins+0x788>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fbe1 	bl	80029a0 <mem_read>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <exec_ins+0x788>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <exec_ins+0x788>)
 80021ec:	801a      	strh	r2, [r3, #0]
		pc += 2;
 80021ee:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <exec_ins+0x788>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	3302      	adds	r3, #2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <exec_ins+0x788>)
 80021f8:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e2aa      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x50)
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	2b50      	cmp	r3, #80	@ 0x50
 8002204:	d11e      	bne.n	8002244 <exec_ins+0x6ec>
	{
		if (!fV)
 8002206:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <exec_ins+0x774>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <exec_ins+0x6da>
			pc += mem_read(pc + 1);
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <exec_ins+0x788>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fbbf 	bl	80029a0 <mem_read>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <exec_ins+0x788>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <exec_ins+0x788>)
 8002230:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8002232:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <exec_ins+0x788>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	3302      	adds	r3, #2
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <exec_ins+0x788>)
 800223c:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e288      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x70)
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	2b70      	cmp	r3, #112	@ 0x70
 8002248:	d11b      	bne.n	8002282 <exec_ins+0x72a>
	{
		if (fV)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <exec_ins+0x774>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00e      	beq.n	8002270 <exec_ins+0x718>
			pc += mem_read(pc + 1);
 8002252:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <exec_ins+0x788>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fba0 	bl	80029a0 <mem_read>
 8002260:	4603      	mov	r3, r0
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <exec_ins+0x788>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4413      	add	r3, r2
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <exec_ins+0x788>)
 800226e:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <exec_ins+0x788>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	3302      	adds	r3, #2
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <exec_ins+0x788>)
 800227a:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e269      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x90)
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	2b90      	cmp	r3, #144	@ 0x90
 8002286:	d12f      	bne.n	80022e8 <exec_ins+0x790>
	{
		if (!fC)
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <exec_ins+0x784>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00e      	beq.n	80022b4 <exec_ins+0x75c>
			pc += mem_read(pc + 1);
 8002296:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <exec_ins+0x788>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb7e 	bl	80029a0 <mem_read>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <exec_ins+0x788>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <exec_ins+0x788>)
 80022b2:	801a      	strh	r2, [r3, #0]
		pc += 2;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <exec_ins+0x788>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	3302      	adds	r3, #2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <exec_ins+0x788>)
 80022be:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e247      	b.n	8002756 <exec_ins+0xbfe>
 80022c6:	bf00      	nop
 80022c8:	20001123 	.word	0x20001123
 80022cc:	20001124 	.word	0x20001124
 80022d0:	20001126 	.word	0x20001126
 80022d4:	20001127 	.word	0x20001127
 80022d8:	20001128 	.word	0x20001128
 80022dc:	20001129 	.word	0x20001129
 80022e0:	2000111e 	.word	0x2000111e
 80022e4:	20001125 	.word	0x20001125
	}
	else if (ins == 0xb0)
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	2bb0      	cmp	r3, #176	@ 0xb0
 80022ec:	d11b      	bne.n	8002326 <exec_ins+0x7ce>
	{
		if (fC)
 80022ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002568 <exec_ins+0xa10>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <exec_ins+0x7bc>
			pc += mem_read(pc + 1);
 80022f6:	4b9d      	ldr	r3, [pc, #628]	@ (800256c <exec_ins+0xa14>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb4e 	bl	80029a0 <mem_read>
 8002304:	4603      	mov	r3, r0
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b98      	ldr	r3, [pc, #608]	@ (800256c <exec_ins+0xa14>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	4413      	add	r3, r2
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b96      	ldr	r3, [pc, #600]	@ (800256c <exec_ins+0xa14>)
 8002312:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8002314:	4b95      	ldr	r3, [pc, #596]	@ (800256c <exec_ins+0xa14>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	3302      	adds	r3, #2
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b93      	ldr	r3, [pc, #588]	@ (800256c <exec_ins+0xa14>)
 800231e:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e217      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xd0)
 8002326:	7bbb      	ldrb	r3, [r7, #14]
 8002328:	2bd0      	cmp	r3, #208	@ 0xd0
 800232a:	d11e      	bne.n	800236a <exec_ins+0x812>
	{
		if (!fZ)
 800232c:	4b90      	ldr	r3, [pc, #576]	@ (8002570 <exec_ins+0xa18>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <exec_ins+0x800>
			pc += mem_read(pc + 1);
 800233a:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <exec_ins+0xa14>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fb2c 	bl	80029a0 <mem_read>
 8002348:	4603      	mov	r3, r0
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b87      	ldr	r3, [pc, #540]	@ (800256c <exec_ins+0xa14>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	4413      	add	r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b85      	ldr	r3, [pc, #532]	@ (800256c <exec_ins+0xa14>)
 8002356:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8002358:	4b84      	ldr	r3, [pc, #528]	@ (800256c <exec_ins+0xa14>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	3302      	adds	r3, #2
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b82      	ldr	r3, [pc, #520]	@ (800256c <exec_ins+0xa14>)
 8002362:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e1f5      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xf0)
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	2bf0      	cmp	r3, #240	@ 0xf0
 800236e:	d11b      	bne.n	80023a8 <exec_ins+0x850>
	{
		if (fZ)
 8002370:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <exec_ins+0xa18>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00e      	beq.n	8002396 <exec_ins+0x83e>
			pc += mem_read(pc + 1);
 8002378:	4b7c      	ldr	r3, [pc, #496]	@ (800256c <exec_ins+0xa14>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fb0d 	bl	80029a0 <mem_read>
 8002386:	4603      	mov	r3, r0
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b78      	ldr	r3, [pc, #480]	@ (800256c <exec_ins+0xa14>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b76      	ldr	r3, [pc, #472]	@ (800256c <exec_ins+0xa14>)
 8002394:	801a      	strh	r2, [r3, #0]
		pc += 2;
 8002396:	4b75      	ldr	r3, [pc, #468]	@ (800256c <exec_ins+0xa14>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	3302      	adds	r3, #2
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b73      	ldr	r3, [pc, #460]	@ (800256c <exec_ins+0xa14>)
 80023a0:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e1d6      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x00)
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d144      	bne.n	8002438 <exec_ins+0x8e0>
	{
		s_push16(pc + 1);
 80023ae:	4b6f      	ldr	r3, [pc, #444]	@ (800256c <exec_ins+0xa14>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fe0f 	bl	8000fda <s_push16>
		fB = 1;
 80023bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002574 <exec_ins+0xa1c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
		s_push((fN << 7) | (fV << 6) | (1 << 5) | (fB << 4) | (fD << 3) | (fI << 2) | (fZ << 1) | (fC << 0));
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <exec_ins+0xa20>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	4b6c      	ldr	r3, [pc, #432]	@ (800257c <exec_ins+0xa24>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	b25a      	sxtb	r2, r3
 80023dc:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <exec_ins+0xa1c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b25a      	sxtb	r2, r3
 80023e8:	4b65      	ldr	r3, [pc, #404]	@ (8002580 <exec_ins+0xa28>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b25a      	sxtb	r2, r3
 80023f4:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <exec_ins+0xa2c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b25a      	sxtb	r2, r3
 8002400:	4b5b      	ldr	r3, [pc, #364]	@ (8002570 <exec_ins+0xa18>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b25a      	sxtb	r2, r3
 800240c:	4b56      	ldr	r3, [pc, #344]	@ (8002568 <exec_ins+0xa10>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b25b      	sxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b25b      	sxtb	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fdae 	bl	8000f78 <s_push>
		fI = 1;
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <exec_ins+0xa2c>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
		pc = mem_read16(0xfffe);
 8002422:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8002426:	f000 fb7d 	bl	8002b24 <mem_read16>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b4f      	ldr	r3, [pc, #316]	@ (800256c <exec_ins+0xa14>)
 8002430:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e18e      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x40)
 8002438:	7bbb      	ldrb	r3, [r7, #14]
 800243a:	2b40      	cmp	r3, #64	@ 0x40
 800243c:	d148      	bne.n	80024d0 <exec_ins+0x978>
	{
		uint8_t status = s_pop();
 800243e:	f7fe fd83 	bl	8000f48 <s_pop>
 8002442:	4603      	mov	r3, r0
 8002444:	72fb      	strb	r3, [r7, #11]
		fN = status & (1 << 7);
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b48      	ldr	r3, [pc, #288]	@ (8002578 <exec_ins+0xa20>)
 8002458:	701a      	strb	r2, [r3, #0]
		fV = status & (1 << 6);
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b44      	ldr	r3, [pc, #272]	@ (800257c <exec_ins+0xa24>)
 800246c:	701a      	strb	r2, [r3, #0]
		// fB = status & (1 << 4);
		fD = status & (1 << 3);
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <exec_ins+0xa28>)
 8002480:	701a      	strb	r2, [r3, #0]
		fI = status & (1 << 2);
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b3c      	ldr	r3, [pc, #240]	@ (8002584 <exec_ins+0xa2c>)
 8002494:	701a      	strb	r2, [r3, #0]
		fZ = status & (1 << 1);
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <exec_ins+0xa18>)
 80024a8:	701a      	strb	r2, [r3, #0]
		fC = status & (1 << 0);
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <exec_ins+0xa10>)
 80024bc:	701a      	strb	r2, [r3, #0]
		pc = s_pop16();
 80024be:	f7fe fd75 	bl	8000fac <s_pop16>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <exec_ins+0xa14>)
 80024c8:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e142      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x20)
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d114      	bne.n	8002500 <exec_ins+0x9a8>
	{
		s_push16(pc + 2);
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <exec_ins+0xa14>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	3302      	adds	r3, #2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fd7b 	bl	8000fda <s_push16>
		pc = mem_read16(pc + 1);
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <exec_ins+0xa14>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fb19 	bl	8002b24 <mem_read16>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <exec_ins+0xa14>)
 80024f8:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e12a      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x60)
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	2b60      	cmp	r3, #96	@ 0x60
 8002504:	d109      	bne.n	800251a <exec_ins+0x9c2>
	{
		pc = s_pop16() + 1;
 8002506:	f7fe fd51 	bl	8000fac <s_pop16>
 800250a:	4603      	mov	r3, r0
 800250c:	3301      	adds	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <exec_ins+0xa14>)
 8002512:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e11d      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x4c)
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	2b4c      	cmp	r3, #76	@ 0x4c
 800251e:	d10d      	bne.n	800253c <exec_ins+0x9e4>
	{
		pc = mem_read16(pc + 1);
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <exec_ins+0xa14>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fafb 	bl	8002b24 <mem_read16>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <exec_ins+0xa14>)
 8002534:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e10c      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x6c)
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	2b6c      	cmp	r3, #108	@ 0x6c
 8002540:	d122      	bne.n	8002588 <exec_ins+0xa30>
	{
		pc = mem_read16(mem_read16(pc + 1));
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <exec_ins+0xa14>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 faea 	bl	8002b24 <mem_read16>
 8002550:	4603      	mov	r3, r0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fae6 	bl	8002b24 <mem_read16>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <exec_ins+0xa14>)
 800255e:	801a      	strh	r2, [r3, #0]
		skipZN = 1;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e0f7      	b.n	8002756 <exec_ins+0xbfe>
 8002566:	bf00      	nop
 8002568:	20001129 	.word	0x20001129
 800256c:	2000111e 	.word	0x2000111e
 8002570:	20001128 	.word	0x20001128
 8002574:	20001125 	.word	0x20001125
 8002578:	20001123 	.word	0x20001123
 800257c:	20001124 	.word	0x20001124
 8002580:	20001126 	.word	0x20001126
 8002584:	20001127 	.word	0x20001127
	}
	else if (ins == 0x24)
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	2b24      	cmp	r3, #36	@ 0x24
 800258c:	d12f      	bne.n	80025ee <exec_ins+0xa96>
	{
		load_ins_buf(2);
 800258e:	2002      	movs	r0, #2
 8002590:	f7fe fd38 	bl	8001004 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read((uint8_t)ins_buf[1]);
 8002594:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <exec_ins+0xc3c>)
 8002596:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f9ff 	bl	80029a0 <mem_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	733b      	strb	r3, [r7, #12]
		fZ = (a & op) == 0;
 80025a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <exec_ins+0xc40>)
 80025a8:	f993 3000 	ldrsb.w	r3, [r3]
 80025ac:	461a      	mov	r2, r3
 80025ae:	7b3b      	ldrb	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b77      	ldr	r3, [pc, #476]	@ (800279c <exec_ins+0xc44>)
 80025be:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 80025c0:	7b3b      	ldrb	r3, [r7, #12]
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b73      	ldr	r3, [pc, #460]	@ (80027a0 <exec_ins+0xc48>)
 80025d2:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 80025d4:	7b3b      	ldrb	r3, [r7, #12]
 80025d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b6f      	ldr	r3, [pc, #444]	@ (80027a4 <exec_ins+0xc4c>)
 80025e6:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e0b3      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x2c)
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80025f2:	d139      	bne.n	8002668 <exec_ins+0xb10>
	{
		load_ins_buf(3);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7fe fd05 	bl	8001004 <load_ins_buf>
		uint8_t op = (uint8_t)mem_read(((uint16_t)(uint8_t)ins_buf[2] << 8) | (uint16_t)(uint8_t)ins_buf[1]);
 80025fa:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <exec_ins+0xc3c>)
 80025fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	b21a      	sxth	r2, r3
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <exec_ins+0xc3c>)
 8002608:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b21b      	sxth	r3, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	b21b      	sxth	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f9c2 	bl	80029a0 <mem_read>
 800261c:	4603      	mov	r3, r0
 800261e:	737b      	strb	r3, [r7, #13]
		fZ = (a & op) == 0;
 8002620:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <exec_ins+0xc40>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	461a      	mov	r2, r3
 8002628:	7b7b      	ldrb	r3, [r7, #13]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <exec_ins+0xc44>)
 8002638:	701a      	strb	r2, [r3, #0]
		fN = op & (1 << 7);
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b55      	ldr	r3, [pc, #340]	@ (80027a0 <exec_ins+0xc48>)
 800264c:	701a      	strb	r2, [r3, #0]
		fV = op & (1 << 6);
 800264e:	7b7b      	ldrb	r3, [r7, #13]
 8002650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b51      	ldr	r3, [pc, #324]	@ (80027a4 <exec_ins+0xc4c>)
 8002660:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e076      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x18)
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	2b18      	cmp	r3, #24
 800266c:	d10b      	bne.n	8002686 <exec_ins+0xb2e>
	{
		fC = 0;
 800266e:	4b4e      	ldr	r3, [pc, #312]	@ (80027a8 <exec_ins+0xc50>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002678:	4b4c      	ldr	r3, [pc, #304]	@ (80027ac <exec_ins+0xc54>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b4a      	ldr	r3, [pc, #296]	@ (80027ac <exec_ins+0xc54>)
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	e067      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x38)
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2b38      	cmp	r3, #56	@ 0x38
 800268a:	d10b      	bne.n	80026a4 <exec_ins+0xb4c>
	{
		fC = 1;
 800268c:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <exec_ins+0xc50>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002696:	4b45      	ldr	r3, [pc, #276]	@ (80027ac <exec_ins+0xc54>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <exec_ins+0xc54>)
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e058      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xd8)
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	2bd8      	cmp	r3, #216	@ 0xd8
 80026a8:	d10b      	bne.n	80026c2 <exec_ins+0xb6a>
	{
		fD = 0;
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <exec_ins+0xc58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
		pc++;
 80026b4:	4b3d      	ldr	r3, [pc, #244]	@ (80027ac <exec_ins+0xc54>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <exec_ins+0xc54>)
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e049      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xf8)
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	2bf8      	cmp	r3, #248	@ 0xf8
 80026c6:	d10b      	bne.n	80026e0 <exec_ins+0xb88>
	{
		fD = 1;
 80026c8:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <exec_ins+0xc58>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
		pc++;
 80026d2:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <exec_ins+0xc54>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <exec_ins+0xc54>)
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	e03a      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x58)
 80026e0:	7bbb      	ldrb	r3, [r7, #14]
 80026e2:	2b58      	cmp	r3, #88	@ 0x58
 80026e4:	d10b      	bne.n	80026fe <exec_ins+0xba6>
	{
		fI = 0;
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <exec_ins+0xc5c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
		pc++;
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <exec_ins+0xc54>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <exec_ins+0xc54>)
 80026fa:	801a      	strh	r2, [r3, #0]
 80026fc:	e02b      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0x78)
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	2b78      	cmp	r3, #120	@ 0x78
 8002702:	d10b      	bne.n	800271c <exec_ins+0xbc4>
	{
		fI = 1;
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <exec_ins+0xc5c>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
		pc++;
 800270e:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <exec_ins+0xc54>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <exec_ins+0xc54>)
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	e01c      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xb8)
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	2bb8      	cmp	r3, #184	@ 0xb8
 8002720:	d10b      	bne.n	800273a <exec_ins+0xbe2>
	{
		fV = 0;
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <exec_ins+0xc4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
		skipZN = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
		pc++;
 800272c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <exec_ins+0xc54>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <exec_ins+0xc54>)
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e00d      	b.n	8002756 <exec_ins+0xbfe>
	}
	else if (ins == 0xea)
 800273a:	7bbb      	ldrb	r3, [r7, #14]
 800273c:	2bea      	cmp	r3, #234	@ 0xea
 800273e:	d108      	bne.n	8002752 <exec_ins+0xbfa>
	{
		skipZN = 1;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
		pc++;
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <exec_ins+0xc54>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <exec_ins+0xc54>)
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e001      	b.n	8002756 <exec_ins+0xbfe>
	}
	else
	{
		reset();
 8002752:	f7fe fbab 	bl	8000eac <reset>
	}

	if (!skipZN)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <exec_ins+0xc32>
	{
		fZ = res == 0;
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <exec_ins+0xc44>)
 8002772:	701a      	strb	r2, [r3, #0]
		fN = res & (1 << 7);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <exec_ins+0xc48>)
 8002788:	701a      	strb	r2, [r3, #0]
	}
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000112c 	.word	0x2000112c
 8002798:	20001120 	.word	0x20001120
 800279c:	20001128 	.word	0x20001128
 80027a0:	20001123 	.word	0x20001123
 80027a4:	20001124 	.word	0x20001124
 80027a8:	20001129 	.word	0x20001129
 80027ac:	2000111e 	.word	0x2000111e
 80027b0:	20001126 	.word	0x20001126
 80027b4:	20001127 	.word	0x20001127

080027b8 <display_write>:

	display_clear();
}

void display_write(uint8_t data)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
	 gpio_set_level(PIN_LCD_D6, (data >> 6) & 1);
	 gpio_set_level(PIN_LCD_D7, (data >> 7) & 1);
	 gpio_set_level(PIN_LCD_WR, 0);
	 gpio_set_level(PIN_LCD_WR, 1);
	 */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <display_write16>:

void display_write16(uint16_t data)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	80fb      	strh	r3, [r7, #6]
	display_write(data >> 8);
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ffe9 	bl	80027b8 <display_write>
	display_write(data & 0xff);
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ffe4 	bl	80027b8 <display_write>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <display_write_c>:

void display_write_c(uint8_t command)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	// gpio_set_level(PIN_LCD_RS, 0);
	display_write(command);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ffd7 	bl	80027b8 <display_write>
	// gpio_set_level(PIN_LCD_RS, 1);
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <display_set_space>:
	display_write_c16(command);
	display_write16(data);
}

void display_set_space(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002812:	b590      	push	{r4, r7, lr}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	4604      	mov	r4, r0
 800281a:	4608      	mov	r0, r1
 800281c:	4611      	mov	r1, r2
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	80fb      	strh	r3, [r7, #6]
 8002824:	4603      	mov	r3, r0
 8002826:	80bb      	strh	r3, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	803b      	strh	r3, [r7, #0]
	display_write_c(0x2A);
 8002830:	202a      	movs	r0, #42	@ 0x2a
 8002832:	f7ff ffe1 	bl	80027f8 <display_write_c>
	display_write16(x1);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ffc8 	bl	80027ce <display_write16>
	display_write16(x2);
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ffc4 	bl	80027ce <display_write16>
	display_write_c(0x2B);
 8002846:	202b      	movs	r0, #43	@ 0x2b
 8002848:	f7ff ffd6 	bl	80027f8 <display_write_c>
	display_write16(y1);
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ffbd 	bl	80027ce <display_write16>
	display_write16(y2);
 8002854:	883b      	ldrh	r3, [r7, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ffb9 	bl	80027ce <display_write16>
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}

08002864 <display_write_pixel>:

void display_write_pixel(bool state)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	display_write16(state ? color_bright : color_dark);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <display_write_pixel+0x16>
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <display_write_pixel+0x48>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	e001      	b.n	800287e <display_write_pixel+0x1a>
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <display_write_pixel+0x4c>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ffa5 	bl	80027ce <display_write16>
	if (display_zoom)
 8002884:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <display_write_pixel+0x50>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <display_write_pixel+0x3e>
		display_write16(state ? color_bright : color_dark);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <display_write_pixel+0x34>
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <display_write_pixel+0x48>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	e001      	b.n	800289c <display_write_pixel+0x38>
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <display_write_pixel+0x4c>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff96 	bl	80027ce <display_write16>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200000f0 	.word	0x200000f0
 80028b0:	200000f2 	.word	0x200000f2
 80028b4:	20001132 	.word	0x20001132

080028b8 <display_init_write>:

bool display_init_write(uint16_t x, uint16_t y)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	460a      	mov	r2, r1
 80028c2:	80fb      	strh	r3, [r7, #6]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80bb      	strh	r3, [r7, #4]
	uint16_t x_off = display_zoom ? 0 : 80;
 80028c8:	4b34      	ldr	r3, [pc, #208]	@ (800299c <display_init_write+0xe4>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <display_init_write+0x1c>
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <display_init_write+0x1e>
 80028d4:	2350      	movs	r3, #80	@ 0x50
 80028d6:	81fb      	strh	r3, [r7, #14]
	uint16_t y_off = display_zoom ? 0 : 60;
 80028d8:	4b30      	ldr	r3, [pc, #192]	@ (800299c <display_init_write+0xe4>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <display_init_write+0x2c>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <display_init_write+0x2e>
 80028e4:	233c      	movs	r3, #60	@ 0x3c
 80028e6:	81bb      	strh	r3, [r7, #12]
	uint16_t factor = display_zoom ? 2 : 1;
 80028e8:	4b2c      	ldr	r3, [pc, #176]	@ (800299c <display_init_write+0xe4>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <display_init_write+0x3c>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e000      	b.n	80028f6 <display_init_write+0x3e>
 80028f4:	2301      	movs	r3, #1
 80028f6:	817b      	strh	r3, [r7, #10]
	uint16_t char_size = display_zoom ? 15 : 7;
 80028f8:	4b28      	ldr	r3, [pc, #160]	@ (800299c <display_init_write+0xe4>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <display_init_write+0x4c>
 8002900:	230f      	movs	r3, #15
 8002902:	e000      	b.n	8002906 <display_init_write+0x4e>
 8002904:	2307      	movs	r3, #7
 8002906:	813b      	strh	r3, [r7, #8]
	if (x * factor + x_off + char_size >= 480 || y * factor + y_off + char_size >= 320)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	897a      	ldrh	r2, [r7, #10]
 800290c:	fb03 f202 	mul.w	r2, r3, r2
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	441a      	add	r2, r3
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	4413      	add	r3, r2
 8002918:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800291c:	da0a      	bge.n	8002934 <display_init_write+0x7c>
 800291e:	88bb      	ldrh	r3, [r7, #4]
 8002920:	897a      	ldrh	r2, [r7, #10]
 8002922:	fb03 f202 	mul.w	r2, r3, r2
 8002926:	89bb      	ldrh	r3, [r7, #12]
 8002928:	441a      	add	r2, r3
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	4413      	add	r3, r2
 800292e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002932:	db01      	blt.n	8002938 <display_init_write+0x80>
		return false;
 8002934:	2300      	movs	r3, #0
 8002936:	e02c      	b.n	8002992 <display_init_write+0xda>
	display_set_space(x * factor + x_off, y * factor + y_off, x * factor + x_off + char_size, y * factor + y_off + char_size);
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	fb12 f303 	smulbb	r3, r2, r3
 8002940:	b29a      	uxth	r2, r3
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	4413      	add	r3, r2
 8002946:	b298      	uxth	r0, r3
 8002948:	88ba      	ldrh	r2, [r7, #4]
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	fb12 f303 	smulbb	r3, r2, r3
 8002950:	b29a      	uxth	r2, r3
 8002952:	89bb      	ldrh	r3, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	b299      	uxth	r1, r3
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	fb12 f303 	smulbb	r3, r2, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	4413      	add	r3, r2
 8002966:	b29a      	uxth	r2, r3
 8002968:	893b      	ldrh	r3, [r7, #8]
 800296a:	4413      	add	r3, r2
 800296c:	b29c      	uxth	r4, r3
 800296e:	88ba      	ldrh	r2, [r7, #4]
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	fb12 f303 	smulbb	r3, r2, r3
 8002976:	b29a      	uxth	r2, r3
 8002978:	89bb      	ldrh	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	b29a      	uxth	r2, r3
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	4622      	mov	r2, r4
 8002986:	f7ff ff44 	bl	8002812 <display_set_space>
	display_write_c(0x2C);
 800298a:	202c      	movs	r0, #44	@ 0x2c
 800298c:	f7ff ff34 	bl	80027f8 <display_write_c>
	return true;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	20001132 	.word	0x20001132

080029a0 <mem_read>:
int8_t basicram[38912];
uint8_t ram[4096] = {
	120, 162, 0, 160, 0, 200, 208, 253, 232, 208, 250, 108, 252, 255 };

int8_t mem_read(uint16_t addr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
	uint16_t addr_off = addr;
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2bff      	cmp	r3, #255	@ 0xff
 80029b2:	d803      	bhi.n	80029bc <mem_read+0x1c>
	{
		// zeropage
		return zeropage[addr];
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4a52      	ldr	r2, [pc, #328]	@ (8002b00 <mem_read+0x160>)
 80029b8:	56d3      	ldrsb	r3, [r2, r3]
 80029ba:	e09c      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0x0200)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c2:	d207      	bcs.n	80029d4 <mem_read+0x34>
	{
		addr_off -= 0x0100;
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029ca:	81fb      	strh	r3, [r7, #14]
		// stack
		return stack[addr_off];
 80029cc:	89fb      	ldrh	r3, [r7, #14]
 80029ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002b04 <mem_read+0x164>)
 80029d0:	56d3      	ldrsb	r3, [r2, r3]
 80029d2:	e090      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0x0400)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d207      	bcs.n	80029ec <mem_read+0x4c>
	{
		addr_off -= 0x0200;
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80029e2:	81fb      	strh	r3, [r7, #14]
		// sysvar
		return sysvar[addr_off];
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	4a48      	ldr	r2, [pc, #288]	@ (8002b08 <mem_read+0x168>)
 80029e8:	56d3      	ldrsb	r3, [r2, r3]
 80029ea:	e084      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0x0800)
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f2:	d207      	bcs.n	8002a04 <mem_read+0x64>
	{
		addr_off -= 0x0400;
 80029f4:	89fb      	ldrh	r3, [r7, #14]
 80029f6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80029fa:	81fb      	strh	r3, [r7, #14]
		// screen
		return screen[addr_off];
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	4a43      	ldr	r2, [pc, #268]	@ (8002b0c <mem_read+0x16c>)
 8002a00:	56d3      	ldrsb	r3, [r2, r3]
 8002a02:	e078      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0xa000)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002a0a:	d207      	bcs.n	8002a1c <mem_read+0x7c>
	{
		addr_off -= 0x0800;
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002a12:	81fb      	strh	r3, [r7, #14]
		// basic ram
		return basicram[addr_off];
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	4a3e      	ldr	r2, [pc, #248]	@ (8002b10 <mem_read+0x170>)
 8002a18:	56d3      	ldrsb	r3, [r2, r3]
 8002a1a:	e06c      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0xc000)
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a22:	d208      	bcs.n	8002a36 <mem_read+0x96>
	{
		addr_off -= 0xa000;
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8002a2a:	81fb      	strh	r3, [r7, #14]
		// basic rom
		return basic[addr_off];
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	4a39      	ldr	r2, [pc, #228]	@ (8002b14 <mem_read+0x174>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	e05f      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0xd000)
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 8002a3c:	d208      	bcs.n	8002a50 <mem_read+0xb0>
	{
		addr_off -= 0xc000;
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a44:	81fb      	strh	r3, [r7, #14]
		// free ram
		return ram[addr_off];
 8002a46:	89fb      	ldrh	r3, [r7, #14]
 8002a48:	4a33      	ldr	r2, [pc, #204]	@ (8002b18 <mem_read+0x178>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	e052      	b.n	8002af6 <mem_read+0x156>
	}
	else if (addr < 0xe000)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002a56:	d244      	bcs.n	8002ae2 <mem_read+0x142>
	{
		if (addr < 0xd400)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 8002a5e:	d209      	bcs.n	8002a74 <mem_read+0xd4>
		{
			addr_off -= 0xd000;
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002a66:	81fb      	strh	r3, [r7, #14]
			// vic registers
			return vic_read(addr_off);
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f99e 	bl	8002dac <vic_read>
 8002a70:	4603      	mov	r3, r0
 8002a72:	e040      	b.n	8002af6 <mem_read+0x156>
		}
		else if (addr < 0xd800)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8002a7a:	d204      	bcs.n	8002a86 <mem_read+0xe6>
		{
			addr_off -= 0xd400;
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002a82:	81fb      	strh	r3, [r7, #14]
 8002a84:	e036      	b.n	8002af4 <mem_read+0x154>
			// sid registers
		}
		else if (addr < 0xdc00)
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002a8c:	d204      	bcs.n	8002a98 <mem_read+0xf8>
		{
			addr_off -= 0xd800;
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002a94:	81fb      	strh	r3, [r7, #14]
 8002a96:	e02d      	b.n	8002af4 <mem_read+0x154>
			// color ram
		}
		else if (addr < 0xdd00)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 8002a9e:	d20d      	bcs.n	8002abc <mem_read+0x11c>
		{
			addr_off -= 0xdc00;
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002aa6:	81fb      	strh	r3, [r7, #14]
			return cia_read(addr_off % 16);
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f9ac 	bl	8000e10 <cia_read>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	e01c      	b.n	8002af6 <mem_read+0x156>
		}
		else if (addr < 0xde00)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 8002ac2:	d209      	bcs.n	8002ad8 <mem_read+0x138>
		{
			addr_off -= 0xdd00;
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8002aca:	81fb      	strh	r3, [r7, #14]
			// cia 2
			return cia2_reg[addr_off % 16];
 8002acc:	89fb      	ldrh	r3, [r7, #14]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <mem_read+0x17c>)
 8002ad4:	56d3      	ldrsb	r3, [r2, r3]
 8002ad6:	e00e      	b.n	8002af6 <mem_read+0x156>
		}
		else
		{
			addr_off -= 0xde00;
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8002ade:	81fb      	strh	r3, [r7, #14]
 8002ae0:	e008      	b.n	8002af4 <mem_read+0x154>
			// interface expansions
		}
	}
	else
	{
		addr_off -= 0xe000;
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ae8:	81fb      	strh	r3, [r7, #14]
		// kernal rom
		return kernal[addr_off];
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <mem_read+0x180>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	e000      	b.n	8002af6 <mem_read+0x156>
	}
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001134 	.word	0x20001134
 8002b04:	20001234 	.word	0x20001234
 8002b08:	20001334 	.word	0x20001334
 8002b0c:	20001534 	.word	0x20001534
 8002b10:	20001944 	.word	0x20001944
 8002b14:	08009268 	.word	0x08009268
 8002b18:	200000f4 	.word	0x200000f4
 8002b1c:	20001934 	.word	0x20001934
 8002b20:	0800c268 	.word	0x0800c268

08002b24 <mem_read16>:

uint16_t mem_read16(uint16_t addr0)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)(uint8_t)mem_read(addr0 + 1) << 8) | (uint16_t)(uint8_t)mem_read(addr0);
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff33 	bl	80029a0 <mem_read>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	b21c      	sxth	r4, r3
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff2b 	bl	80029a0 <mem_read>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	4323      	orrs	r3, r4
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	b29b      	uxth	r3, r3
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
	...

08002b60 <mem_write>:

void mem_write(uint16_t addr, int8_t d)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	460a      	mov	r2, r1
 8002b6a:	80fb      	strh	r3, [r7, #6]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	717b      	strb	r3, [r7, #5]
	uint16_t addr_off = addr;
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	81fb      	strh	r3, [r7, #14]
	if (addr < 0x0100)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d804      	bhi.n	8002b84 <mem_write+0x24>
	{
		// zeropage
		zeropage[addr] = d;
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	4981      	ldr	r1, [pc, #516]	@ (8002d84 <mem_write+0x224>)
 8002b7e:	797a      	ldrb	r2, [r7, #5]
 8002b80:	54ca      	strb	r2, [r1, r3]
	else
	{
		addr_off -= 0xe000;
		// kernal rom
	}
}
 8002b82:	e0fb      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0x0200)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8a:	d208      	bcs.n	8002b9e <mem_write+0x3e>
		addr_off -= 0x0100;
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b92:	81fb      	strh	r3, [r7, #14]
		stack[addr_off] = d;
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	497c      	ldr	r1, [pc, #496]	@ (8002d88 <mem_write+0x228>)
 8002b98:	797a      	ldrb	r2, [r7, #5]
 8002b9a:	54ca      	strb	r2, [r1, r3]
}
 8002b9c:	e0ee      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0x0400)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba4:	d208      	bcs.n	8002bb8 <mem_write+0x58>
		addr_off -= 0x0200;
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002bac:	81fb      	strh	r3, [r7, #14]
		sysvar[addr_off] = d;
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	4976      	ldr	r1, [pc, #472]	@ (8002d8c <mem_write+0x22c>)
 8002bb2:	797a      	ldrb	r2, [r7, #5]
 8002bb4:	54ca      	strb	r2, [r1, r3]
}
 8002bb6:	e0e1      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0x0800)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bbe:	d20f      	bcs.n	8002be0 <mem_write+0x80>
		addr_off -= 0x0400;
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002bc6:	81fb      	strh	r3, [r7, #14]
		screen[addr_off] = d;
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	4971      	ldr	r1, [pc, #452]	@ (8002d90 <mem_write+0x230>)
 8002bcc:	797a      	ldrb	r2, [r7, #5]
 8002bce:	54ca      	strb	r2, [r1, r3]
		vic_write_screen(addr_off, d);
 8002bd0:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8002bd4:	89fb      	ldrh	r3, [r7, #14]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f949 	bl	8002e70 <vic_write_screen>
}
 8002bde:	e0cd      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xa000)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002be6:	d208      	bcs.n	8002bfa <mem_write+0x9a>
		addr_off -= 0x0800;
 8002be8:	89fb      	ldrh	r3, [r7, #14]
 8002bea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002bee:	81fb      	strh	r3, [r7, #14]
		basicram[addr_off] = d;
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	4968      	ldr	r1, [pc, #416]	@ (8002d94 <mem_write+0x234>)
 8002bf4:	797a      	ldrb	r2, [r7, #5]
 8002bf6:	54ca      	strb	r2, [r1, r3]
}
 8002bf8:	e0c0      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xc000)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c00:	d204      	bcs.n	8002c0c <mem_write+0xac>
		addr_off -= 0xa000;
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8002c08:	81fb      	strh	r3, [r7, #14]
}
 8002c0a:	e0b7      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xd000)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 8002c12:	d261      	bcs.n	8002cd8 <mem_write+0x178>
		addr_off -= 0xc000;
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002c1a:	81fb      	strh	r3, [r7, #14]
		ram[addr_off] = d;
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	7979      	ldrb	r1, [r7, #5]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	@ (8002d98 <mem_write+0x238>)
 8002c22:	54d1      	strb	r1, [r2, r3]
		if (addr == 0xcff1)
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	f64c 72f1 	movw	r2, #53233	@ 0xcff1
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <mem_write+0xd4>
			display_zoom = d;
 8002c2e:	797a      	ldrb	r2, [r7, #5]
 8002c30:	4b5a      	ldr	r3, [pc, #360]	@ (8002d9c <mem_write+0x23c>)
 8002c32:	701a      	strb	r2, [r3, #0]
		if (addr == 0xcff2)
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f64c 72f2 	movw	r2, #53234	@ 0xcff2
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	f040 809e 	bne.w	8002d7c <mem_write+0x21c>
			if (d == 0)
 8002c40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <mem_write+0xfa>
				color_bright = (0b11001 << 11) | (0b111000 << 5) | 0b11111;
 8002c48:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <mem_write+0x240>)
 8002c4a:	f64c 721f 	movw	r2, #53023	@ 0xcf1f
 8002c4e:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00101 << 11) | (0b001000 << 5) | 0b11010;
 8002c50:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <mem_write+0x244>)
 8002c52:	f642 121a 	movw	r2, #10522	@ 0x291a
 8002c56:	801a      	strh	r2, [r3, #0]
}
 8002c58:	e090      	b.n	8002d7c <mem_write+0x21c>
			else if (d == 1)
 8002c5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <mem_write+0x114>
				color_bright = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 8002c62:	4b4f      	ldr	r3, [pc, #316]	@ (8002da0 <mem_write+0x240>)
 8002c64:	f645 4268 	movw	r2, #23656	@ 0x5c68
 8002c68:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <mem_write+0x244>)
 8002c6c:	f640 1244 	movw	r2, #2372	@ 0x944
 8002c70:	801a      	strh	r2, [r3, #0]
}
 8002c72:	e083      	b.n	8002d7c <mem_write+0x21c>
			else if (d == 2)
 8002c74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d108      	bne.n	8002c8e <mem_write+0x12e>
				color_bright = (0b00001 << 11) | (0b001010 << 5) | 0b00100;
 8002c7c:	4b48      	ldr	r3, [pc, #288]	@ (8002da0 <mem_write+0x240>)
 8002c7e:	f640 1244 	movw	r2, #2372	@ 0x944
 8002c82:	801a      	strh	r2, [r3, #0]
				color_dark = (0b01011 << 11) | (0b100011 << 5) | 0b01000;
 8002c84:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <mem_write+0x244>)
 8002c86:	f645 4268 	movw	r2, #23656	@ 0x5c68
 8002c8a:	801a      	strh	r2, [r3, #0]
}
 8002c8c:	e076      	b.n	8002d7c <mem_write+0x21c>
			else if (d == 3)
 8002c8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <mem_write+0x146>
				color_bright = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 8002c96:	4b42      	ldr	r3, [pc, #264]	@ (8002da0 <mem_write+0x240>)
 8002c98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c9c:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <mem_write+0x244>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	801a      	strh	r2, [r3, #0]
}
 8002ca4:	e06a      	b.n	8002d7c <mem_write+0x21c>
			else if (d == 4)
 8002ca6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <mem_write+0x15e>
				color_bright = (0b00000 << 11) | (0b000000 << 5) | 0b00000;
 8002cae:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <mem_write+0x240>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]
				color_dark = (0b11111 << 11) | (0b111111 << 5) | 0b11111;
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <mem_write+0x244>)
 8002cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cba:	801a      	strh	r2, [r3, #0]
}
 8002cbc:	e05e      	b.n	8002d7c <mem_write+0x21c>
			else if (d == 5)
 8002cbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d15a      	bne.n	8002d7c <mem_write+0x21c>
				color_bright = (0b01010 << 11) | (0b110000 << 5) | 0b11111;
 8002cc6:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <mem_write+0x240>)
 8002cc8:	f245 621f 	movw	r2, #22047	@ 0x561f
 8002ccc:	801a      	strh	r2, [r3, #0]
				color_dark = (0b00100 << 11) | (0b001000 << 5) | 0b00100;
 8002cce:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <mem_write+0x244>)
 8002cd0:	f242 1204 	movw	r2, #8452	@ 0x2104
 8002cd4:	801a      	strh	r2, [r3, #0]
}
 8002cd6:	e051      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xd400)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	f5b3 4f54 	cmp.w	r3, #54272	@ 0xd400
 8002cde:	d20b      	bcs.n	8002cf8 <mem_write+0x198>
		addr_off -= 0xd000;
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002ce6:	81fb      	strh	r3, [r7, #14]
		vic_write(addr_off, d);
 8002ce8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 f89b 	bl	8002e2c <vic_write>
}
 8002cf6:	e041      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xd800)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8002cfe:	d204      	bcs.n	8002d0a <mem_write+0x1aa>
		addr_off -= 0xd400;
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002d06:	81fb      	strh	r3, [r7, #14]
}
 8002d08:	e038      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xdc00)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002d10:	d204      	bcs.n	8002d1c <mem_write+0x1bc>
		addr_off -= 0xd800;
 8002d12:	89fb      	ldrh	r3, [r7, #14]
 8002d14:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002d18:	81fb      	strh	r3, [r7, #14]
}
 8002d1a:	e02f      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xdd00)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	f5b3 4f5d 	cmp.w	r3, #56576	@ 0xdd00
 8002d22:	d20f      	bcs.n	8002d44 <mem_write+0x1e4>
		addr_off -= 0xdc00;
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002d2a:	81fb      	strh	r3, [r7, #14]
		cia_write(addr_off % 16, d);
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f88f 	bl	8000e60 <cia_write>
}
 8002d42:	e01b      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xde00)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f5b3 4f5e 	cmp.w	r3, #56832	@ 0xde00
 8002d4a:	d20a      	bcs.n	8002d62 <mem_write+0x202>
		addr_off -= 0xdd00;
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
 8002d4e:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8002d52:	81fb      	strh	r3, [r7, #14]
		cia2_reg[addr_off % 16] = d;
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4913      	ldr	r1, [pc, #76]	@ (8002da8 <mem_write+0x248>)
 8002d5c:	797a      	ldrb	r2, [r7, #5]
 8002d5e:	54ca      	strb	r2, [r1, r3]
}
 8002d60:	e00c      	b.n	8002d7c <mem_write+0x21c>
	else if (addr < 0xe000)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002d68:	d204      	bcs.n	8002d74 <mem_write+0x214>
		addr_off -= 0xde00;
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8002d70:	81fb      	strh	r3, [r7, #14]
}
 8002d72:	e003      	b.n	8002d7c <mem_write+0x21c>
		addr_off -= 0xe000;
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d7a:	81fb      	strh	r3, [r7, #14]
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20001134 	.word	0x20001134
 8002d88:	20001234 	.word	0x20001234
 8002d8c:	20001334 	.word	0x20001334
 8002d90:	20001534 	.word	0x20001534
 8002d94:	20001944 	.word	0x20001944
 8002d98:	200000f4 	.word	0x200000f4
 8002d9c:	20001132 	.word	0x20001132
 8002da0:	200000f0 	.word	0x200000f0
 8002da4:	200000f2 	.word	0x200000f2
 8002da8:	20001934 	.word	0x20001934

08002dac <vic_read>:

uint8_t vic_reg[48];
uint8_t vic_line = 0;

int8_t vic_read(uint16_t addr_off)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
	if (addr_off == 0x12)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d114      	bne.n	8002de6 <vic_read+0x3a>
		return vic_line = (vic_line + 1) % 24;
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <vic_read+0x70>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4b17      	ldr	r3, [pc, #92]	@ (8002e20 <vic_read+0x74>)
 8002dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8002dc8:	1099      	asrs	r1, r3, #2
 8002dca:	17d3      	asrs	r3, r2, #31
 8002dcc:	1ac9      	subs	r1, r1, r3
 8002dce:	460b      	mov	r3, r1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1ad1      	subs	r1, r2, r3
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <vic_read+0x70>)
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <vic_read+0x70>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	e013      	b.n	8002e0e <vic_read+0x62>
	else if (addr_off == 0x19)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b19      	cmp	r3, #25
 8002dea:	d101      	bne.n	8002df0 <vic_read+0x44>
		return 0; // NTSC
 8002dec:	2300      	movs	r3, #0
 8002dee:	e00e      	b.n	8002e0e <vic_read+0x62>
	else
		return vic_reg[addr_off % 0x30];
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <vic_read+0x78>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	0959      	lsrs	r1, r3, #5
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <vic_read+0x7c>)
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	b25b      	sxtb	r3, r3
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000b174 	.word	0x2000b174
 8002e20:	2aaaaaab 	.word	0x2aaaaaab
 8002e24:	aaaaaaab 	.word	0xaaaaaaab
 8002e28:	2000b144 	.word	0x2000b144

08002e2c <vic_write>:

void vic_write(uint16_t addr_off, int8_t d)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	80fb      	strh	r3, [r7, #6]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	717b      	strb	r3, [r7, #5]
	vic_reg[addr_off % 0x30] = d;
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <vic_write+0x3c>)
 8002e40:	fba3 1302 	umull	r1, r3, r3, r2
 8002e44:	0959      	lsrs	r1, r3, #5
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	7979      	ldrb	r1, [r7, #5]
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <vic_write+0x40>)
 8002e58:	5499      	strb	r1, [r3, r2]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	aaaaaaab 	.word	0xaaaaaaab
 8002e6c:	2000b144 	.word	0x2000b144

08002e70 <vic_write_screen>:

void vic_write_screen(uint16_t addr_off, int8_t d)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	460a      	mov	r2, r1
 8002e7a:	80fb      	strh	r3, [r7, #6]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	717b      	strb	r3, [r7, #5]
	if (addr_off < 1000)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e86:	d25b      	bcs.n	8002f40 <vic_write_screen+0xd0>
	{
		uint16_t screen_x = addr_off % 40;
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f48 <vic_write_screen+0xd8>)
 8002e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e90:	0959      	lsrs	r1, r3, #5
 8002e92:	460b      	mov	r3, r1
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	82bb      	strh	r3, [r7, #20]
		uint16_t screen_y = addr_off / 40;
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <vic_write_screen+0xd8>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	827b      	strh	r3, [r7, #18]
		if (display_init_write(8 * screen_x, 8 * screen_y))
 8002eaa:	8abb      	ldrh	r3, [r7, #20]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	8a7b      	ldrh	r3, [r7, #18]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f7ff fcfd 	bl	80028b8 <display_init_write>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03d      	beq.n	8002f40 <vic_write_screen+0xd0>
		{
			for (uint8_t char_y = 0; char_y < 8; char_y++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
 8002ec8:	e037      	b.n	8002f3a <vic_write_screen+0xca>
			{
				uint16_t char_offset = (uint8_t)vic_reg[0x18] >> 1 ? 0x0000 : 0x0800;
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <vic_write_screen+0xdc>)
 8002ecc:	7e1b      	ldrb	r3, [r3, #24]
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <vic_write_screen+0x6a>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e001      	b.n	8002ede <vic_write_screen+0x6e>
 8002eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ede:	823b      	strh	r3, [r7, #16]
				uint8_t char_line = characters[(uint8_t)d * 8 + char_y + char_offset];
 8002ee0:	797b      	ldrb	r3, [r7, #5]
 8002ee2:	00da      	lsls	r2, r3, #3
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	441a      	add	r2, r3
 8002ee8:	8a3b      	ldrh	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <vic_write_screen+0xe0>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	73fb      	strb	r3, [r7, #15]
				for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75bb      	strb	r3, [r7, #22]
 8002ef6:	e013      	b.n	8002f20 <vic_write_screen+0xb0>
					display_write_pixel((char_line >> (7 - (char_x % 8))) & 1);
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	fa42 f303 	asr.w	r3, r2, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fca5 	bl	8002864 <display_write_pixel>
				for (uint8_t char_x = 0; char_x < (display_zoom ? 16 : 8); char_x++)
 8002f1a:	7dbb      	ldrb	r3, [r7, #22]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	75bb      	strb	r3, [r7, #22]
 8002f20:	7dbb      	ldrb	r3, [r7, #22]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <vic_write_screen+0xe4>)
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d001      	beq.n	8002f2e <vic_write_screen+0xbe>
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	e000      	b.n	8002f30 <vic_write_screen+0xc0>
 8002f2e:	2208      	movs	r2, #8
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dce1      	bgt.n	8002ef8 <vic_write_screen+0x88>
			for (uint8_t char_y = 0; char_y < 8; char_y++)
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	3301      	adds	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d9c4      	bls.n	8002eca <vic_write_screen+0x5a>
			}
		}
	}
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	cccccccd 	.word	0xcccccccd
 8002f4c:	2000b144 	.word	0x2000b144
 8002f50:	0800b268 	.word	0x0800b268
 8002f54:	20001132 	.word	0x20001132

08002f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b09e      	sub	sp, #120	@ 0x78
 8002f5c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f5e:	f001 f853 	bl	8004008 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f62:	f000 fb01 	bl	8003568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f66:	f000 fc97 	bl	8003898 <MX_GPIO_Init>
	MX_DMA_Init();
 8002f6a:	f000 fc77 	bl	800385c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002f6e:	f000 fc45 	bl	80037fc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002f72:	f000 fb7d 	bl	8003670 <MX_TIM2_Init>
	MX_DAC1_Init();
 8002f76:	f000 fb49 	bl	800360c <MX_DAC1_Init>
	MX_TIM4_Init();
 8002f7a:	f000 fbf1 	bl	8003760 <MX_TIM4_Init>
		 */
	}
#endif

#if PAL
	double line_period_us = 64.0;
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4bad      	ldr	r3, [pc, #692]	@ (8003238 <main+0x2e0>)
 8002f84:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double line_sync_us = 4.7;
 8002f88:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003210 <main+0x2b8>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double front_porch_us = 1.65;
 8002f92:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003218 <main+0x2c0>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double short_pulse_us = 2.35;
 8002f9c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003220 <main+0x2c8>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double long_pulse_us = 27.3;
 8002fa6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003228 <main+0x2d0>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double sample_time_us = (double)TIM4->ARR / (80.0 * PAL_TIME_CORRECTION);
 8002fb0:	4ba2      	ldr	r3, [pc, #648]	@ (800323c <main+0x2e4>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa49 	bl	800044c <__aeabi_ui2d>
 8002fba:	a39d      	add	r3, pc, #628	@ (adr r3, 8003230 <main+0x2d8>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f7fd fbe8 	bl	8000794 <__aeabi_ddiv>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint32_t one_us_sa = (uint32_t)(1.0 / sample_time_us + 0.5);
 8002fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	499a      	ldr	r1, [pc, #616]	@ (8003240 <main+0x2e8>)
 8002fd6:	f7fd fbdd 	bl	8000794 <__aeabi_ddiv>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	4b97      	ldr	r3, [pc, #604]	@ (8003244 <main+0x2ec>)
 8002fe8:	f7fd f8f4 	bl	80001d4 <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7fd fd66 	bl	8000ac4 <__aeabi_d2uiz>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t line_period_sa = (uint32_t)(line_period_us / sample_time_us + 0.5);
 8002ffc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003000:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003004:	f7fd fbc6 	bl	8000794 <__aeabi_ddiv>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	4b8b      	ldr	r3, [pc, #556]	@ (8003244 <main+0x2ec>)
 8003016:	f7fd f8dd 	bl	80001d4 <__adddf3>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fd4f 	bl	8000ac4 <__aeabi_d2uiz>
 8003026:	4603      	mov	r3, r0
 8003028:	623b      	str	r3, [r7, #32]
	uint32_t line_sync_sa = (uint32_t)(line_sync_us / sample_time_us + 0.5);
 800302a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800302e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003032:	f7fd fbaf 	bl	8000794 <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	4b80      	ldr	r3, [pc, #512]	@ (8003244 <main+0x2ec>)
 8003044:	f7fd f8c6 	bl	80001d4 <__adddf3>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fd38 	bl	8000ac4 <__aeabi_d2uiz>
 8003054:	4603      	mov	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
	uint32_t front_porch_sa = (uint32_t)(front_porch_us / sample_time_us + 0.5);
 8003058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800305c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003060:	f7fd fb98 	bl	8000794 <__aeabi_ddiv>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <main+0x2ec>)
 8003072:	f7fd f8af 	bl	80001d4 <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd21 	bl	8000ac4 <__aeabi_d2uiz>
 8003082:	4603      	mov	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
	uint32_t short_pulse_sa = (uint32_t)(short_pulse_us / sample_time_us + 0.5);
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800308a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800308e:	f7fd fb81 	bl	8000794 <__aeabi_ddiv>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	4b69      	ldr	r3, [pc, #420]	@ (8003244 <main+0x2ec>)
 80030a0:	f7fd f898 	bl	80001d4 <__adddf3>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7fd fd0a 	bl	8000ac4 <__aeabi_d2uiz>
 80030b0:	4603      	mov	r3, r0
 80030b2:	617b      	str	r3, [r7, #20]
	uint32_t long_pulse_sa = (uint32_t)(long_pulse_us / sample_time_us + 0.5);
 80030b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80030bc:	f7fd fb6a 	bl	8000794 <__aeabi_ddiv>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003244 <main+0x2ec>)
 80030ce:	f7fd f881 	bl	80001d4 <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	f7fd fcf3 	bl	8000ac4 <__aeabi_d2uiz>
 80030de:	4603      	mov	r3, r0
 80030e0:	613b      	str	r3, [r7, #16]
	pal_line_len = line_period_sa;
 80030e2:	4a59      	ldr	r2, [pc, #356]	@ (8003248 <main+0x2f0>)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	6013      	str	r3, [r2, #0]

	// clear all buffers
	for (uint32_t i = 0; i < 5; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030ec:	e014      	b.n	8003118 <main+0x1c0>
	{
		for (uint32_t j = 0; j < PAL_BUFFER_SIZE; j++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030f2:	e00a      	b.n	800310a <main+0x1b2>
		{
			pal_buffer[i][j] = PAL_ZERO;
 80030f4:	4a55      	ldr	r2, [pc, #340]	@ (800324c <main+0x2f4>)
 80030f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f8:	02db      	lsls	r3, r3, #11
 80030fa:	441a      	add	r2, r3
 80030fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030fe:	4413      	add	r3, r2
 8003100:	2217      	movs	r2, #23
 8003102:	701a      	strb	r2, [r3, #0]
		for (uint32_t j = 0; j < PAL_BUFFER_SIZE; j++)
 8003104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003106:	3301      	adds	r3, #1
 8003108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800310a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003110:	d3f0      	bcc.n	80030f4 <main+0x19c>
	for (uint32_t i = 0; i < 5; i++)
 8003112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003114:	3301      	adds	r3, #1
 8003116:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	2b04      	cmp	r3, #4
 800311c:	d9e7      	bls.n	80030ee <main+0x196>
		}
	}
	// sync
	for (uint32_t i1 = 0; i1 < line_period_sa * 5; i1++)
 800311e:	2300      	movs	r3, #0
 8003120:	667b      	str	r3, [r7, #100]	@ 0x64
 8003122:	e02c      	b.n	800317e <main+0x226>
	{
		uint32_t i = i1 % (line_period_sa / 2);
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	085a      	lsrs	r2, r3, #1
 8003128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800312a:	fbb3 f1f2 	udiv	r1, r3, r2
 800312e:	fb01 f202 	mul.w	r2, r1, r2
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	607b      	str	r3, [r7, #4]
		if (i1 * 2 < line_period_sa * 5)
 8003136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003138:	0059      	lsls	r1, r3, #1
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	4299      	cmp	r1, r3
 8003144:	d20c      	bcs.n	8003160 <main+0x208>
		{
			pal_buffer[0][i1] = i <= long_pulse_sa ? PAL_OFF : PAL_ZERO;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	429a      	cmp	r2, r3
 800314c:	d801      	bhi.n	8003152 <main+0x1fa>
 800314e:	2100      	movs	r1, #0
 8003150:	e000      	b.n	8003154 <main+0x1fc>
 8003152:	2117      	movs	r1, #23
 8003154:	4a3d      	ldr	r2, [pc, #244]	@ (800324c <main+0x2f4>)
 8003156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003158:	4413      	add	r3, r2
 800315a:	460a      	mov	r2, r1
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <main+0x220>
		}
		else
		{
			pal_buffer[0][i1] = i <= short_pulse_sa ? PAL_OFF : PAL_ZERO;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d801      	bhi.n	800316c <main+0x214>
 8003168:	2100      	movs	r1, #0
 800316a:	e000      	b.n	800316e <main+0x216>
 800316c:	2117      	movs	r1, #23
 800316e:	4a37      	ldr	r2, [pc, #220]	@ (800324c <main+0x2f4>)
 8003170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003172:	4413      	add	r3, r2
 8003174:	460a      	mov	r2, r1
 8003176:	701a      	strb	r2, [r3, #0]
	for (uint32_t i1 = 0; i1 < line_period_sa * 5; i1++)
 8003178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800317a:	3301      	adds	r3, #1
 800317c:	667b      	str	r3, [r7, #100]	@ 0x64
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003188:	429a      	cmp	r2, r3
 800318a:	d3cb      	bcc.n	8003124 <main+0x1cc>
		}
	}
	for (uint32_t i1 = 0; i1 < line_period_sa * 7; i1++)
 800318c:	2300      	movs	r3, #0
 800318e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003190:	e069      	b.n	8003266 <main+0x30e>
	{
		uint32_t i = i1 % (line_period_sa / 2);
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	085a      	lsrs	r2, r3, #1
 8003196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003198:	fbb3 f1f2 	udiv	r1, r3, r2
 800319c:	fb01 f202 	mul.w	r2, r1, r2
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
		if (i1 * 2 < line_period_sa * 5)
 80031a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031a6:	0059      	lsls	r1, r3, #1
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	4299      	cmp	r1, r3
 80031b2:	d20e      	bcs.n	80031d2 <main+0x27a>
		{
			pal_buffer[2][i1] = i <= short_pulse_sa ? PAL_OFF : PAL_ZERO;
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d801      	bhi.n	80031c0 <main+0x268>
 80031bc:	2100      	movs	r1, #0
 80031be:	e000      	b.n	80031c2 <main+0x26a>
 80031c0:	2117      	movs	r1, #23
 80031c2:	4a22      	ldr	r2, [pc, #136]	@ (800324c <main+0x2f4>)
 80031c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031cc:	460a      	mov	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e046      	b.n	8003260 <main+0x308>
		}
		else if (i1 < line_period_sa * 5)
 80031d2:	6a3a      	ldr	r2, [r7, #32]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031dc:	429a      	cmp	r2, r3
 80031de:	d20e      	bcs.n	80031fe <main+0x2a6>
		{
			pal_buffer[2][i1] = i <= long_pulse_sa ? PAL_OFF : PAL_ZERO;
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d801      	bhi.n	80031ec <main+0x294>
 80031e8:	2100      	movs	r1, #0
 80031ea:	e000      	b.n	80031ee <main+0x296>
 80031ec:	2117      	movs	r1, #23
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <main+0x2f4>)
 80031f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f8:	460a      	mov	r2, r1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e030      	b.n	8003260 <main+0x308>
		}
		else
		{
			pal_buffer[2][i1] = i <= short_pulse_sa ? PAL_OFF : PAL_ZERO;
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	429a      	cmp	r2, r3
 8003204:	d824      	bhi.n	8003250 <main+0x2f8>
 8003206:	2100      	movs	r1, #0
 8003208:	e023      	b.n	8003252 <main+0x2fa>
 800320a:	bf00      	nop
 800320c:	f3af 8000 	nop.w
 8003210:	cccccccd 	.word	0xcccccccd
 8003214:	4012cccc 	.word	0x4012cccc
 8003218:	66666666 	.word	0x66666666
 800321c:	3ffa6666 	.word	0x3ffa6666
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	4002cccc 	.word	0x4002cccc
 8003228:	cccccccd 	.word	0xcccccccd
 800322c:	403b4ccc 	.word	0x403b4ccc
 8003230:	e147ae14 	.word	0xe147ae14
 8003234:	4053147a 	.word	0x4053147a
 8003238:	40500000 	.word	0x40500000
 800323c:	40000800 	.word	0x40000800
 8003240:	3ff00000 	.word	0x3ff00000
 8003244:	3fe00000 	.word	0x3fe00000
 8003248:	2000b2f4 	.word	0x2000b2f4
 800324c:	2000b2fc 	.word	0x2000b2fc
 8003250:	2117      	movs	r1, #23
 8003252:	4a99      	ldr	r2, [pc, #612]	@ (80034b8 <main+0x560>)
 8003254:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003256:	4413      	add	r3, r2
 8003258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325c:	460a      	mov	r2, r1
 800325e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i1 = 0; i1 < line_period_sa * 7; i1++)
 8003260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003262:	3301      	adds	r3, #1
 8003264:	663b      	str	r3, [r7, #96]	@ 0x60
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003270:	429a      	cmp	r2, r3
 8003272:	d38e      	bcc.n	8003192 <main+0x23a>
		}
	}
	for (uint32_t i1 = 0; i1 < line_period_sa * 3; i1++)
 8003274:	2300      	movs	r3, #0
 8003276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003278:	e019      	b.n	80032ae <main+0x356>
	{
		uint32_t i = i1 % (line_period_sa / 2);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003280:	fbb3 f1f2 	udiv	r1, r3, r2
 8003284:	fb01 f202 	mul.w	r2, r1, r2
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
		pal_buffer[4][i1] = i <= short_pulse_sa ? PAL_OFF : PAL_ZERO;
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d801      	bhi.n	8003298 <main+0x340>
 8003294:	2100      	movs	r1, #0
 8003296:	e000      	b.n	800329a <main+0x342>
 8003298:	2117      	movs	r1, #23
 800329a:	4a87      	ldr	r2, [pc, #540]	@ (80034b8 <main+0x560>)
 800329c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800329e:	4413      	add	r3, r2
 80032a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032a4:	460a      	mov	r2, r1
 80032a6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i1 = 0; i1 < line_period_sa * 3; i1++)
 80032a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032aa:	3301      	adds	r3, #1
 80032ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ae:	6a3a      	ldr	r2, [r7, #32]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3de      	bcc.n	800327a <main+0x322>
	}
	// frames
	for (uint32_t i = 0; i < line_period_sa; i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032c0:	e10f      	b.n	80034e2 <main+0x58a>
	{
		// TODO: field blanking interval -> PAL_ZERO (not black) for first 25 lines and last 25 lines
		if (i < line_sync_sa)
 80032c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d20e      	bcs.n	80032e8 <main+0x390>
		{
			pal_buffer[1][i] = PAL_OFF;
 80032ca:	4a7b      	ldr	r2, [pc, #492]	@ (80034b8 <main+0x560>)
 80032cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
			pal_buffer[3][i] = PAL_OFF;
 80032d8:	4a77      	ldr	r2, [pc, #476]	@ (80034b8 <main+0x560>)
 80032da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032dc:	4413      	add	r3, r2
 80032de:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e0f9      	b.n	80034dc <main+0x584>
		}
		else if (i < 2 * line_sync_sa)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d20e      	bcs.n	8003310 <main+0x3b8>
		{
			pal_buffer[1][i] = PAL_ZERO;
 80032f2:	4a71      	ldr	r2, [pc, #452]	@ (80034b8 <main+0x560>)
 80032f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032fc:	2217      	movs	r2, #23
 80032fe:	701a      	strb	r2, [r3, #0]
			pal_buffer[3][i] = PAL_ZERO;
 8003300:	4a6d      	ldr	r2, [pc, #436]	@ (80034b8 <main+0x560>)
 8003302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003304:	4413      	add	r3, r2
 8003306:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 800330a:	2217      	movs	r2, #23
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e0e5      	b.n	80034dc <main+0x584>
		}
		else if (i < line_period_sa - one_us_sa - front_porch_sa)
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800331c:	429a      	cmp	r2, r3
 800331e:	f080 80ab 	bcs.w	8003478 <main+0x520>
		{
			pal_buffer[1][i] = PAL_BLACK + (int)(0.15 * 127 * (sin((i - 2 * line_sync_sa) * 0.15) + 1));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f88e 	bl	800044c <__aeabi_ui2d>
 8003330:	a35d      	add	r3, pc, #372	@ (adr r3, 80034a8 <main+0x550>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f903 	bl	8000540 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	ec43 2b17 	vmov	d7, r2, r3
 8003342:	eeb0 0a47 	vmov.f32	s0, s14
 8003346:	eef0 0a67 	vmov.f32	s1, s15
 800334a:	f004 ff51 	bl	80081f0 <sin>
 800334e:	ec51 0b10 	vmov	r0, r1, d0
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	4b59      	ldr	r3, [pc, #356]	@ (80034bc <main+0x564>)
 8003358:	f7fc ff3c 	bl	80001d4 <__adddf3>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	a352      	add	r3, pc, #328	@ (adr r3, 80034b0 <main+0x558>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd f8e9 	bl	8000540 <__aeabi_dmul>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fb7d 	bl	8000a74 <__aeabi_d2iz>
 800337a:	4603      	mov	r3, r0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3327      	adds	r3, #39	@ 0x27
 8003380:	b2d9      	uxtb	r1, r3
 8003382:	4a4d      	ldr	r2, [pc, #308]	@ (80034b8 <main+0x560>)
 8003384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003386:	4413      	add	r3, r2
 8003388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338c:	460a      	mov	r2, r1
 800338e:	701a      	strb	r2, [r3, #0]
			if (pal_buffer[1][i] < PAL_BLACK)
 8003390:	4a49      	ldr	r2, [pc, #292]	@ (80034b8 <main+0x560>)
 8003392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003394:	4413      	add	r3, r2
 8003396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b26      	cmp	r3, #38	@ 0x26
 800339e:	d806      	bhi.n	80033ae <main+0x456>
			{
				pal_buffer[1][i] = PAL_BLACK;
 80033a0:	4a45      	ldr	r2, [pc, #276]	@ (80034b8 <main+0x560>)
 80033a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033aa:	2227      	movs	r2, #39	@ 0x27
 80033ac:	701a      	strb	r2, [r3, #0]
			}
			if (pal_buffer[1][i] > PAL_WHITE)
 80033ae:	4a42      	ldr	r2, [pc, #264]	@ (80034b8 <main+0x560>)
 80033b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b4d      	cmp	r3, #77	@ 0x4d
 80033bc:	d906      	bls.n	80033cc <main+0x474>
			{
				pal_buffer[1][i] = PAL_WHITE;
 80033be:	4a3e      	ldr	r2, [pc, #248]	@ (80034b8 <main+0x560>)
 80033c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c8:	224d      	movs	r2, #77	@ 0x4d
 80033ca:	701a      	strb	r2, [r3, #0]
			}

			pal_buffer[3][i] = PAL_BLACK + (int)(0.15 * 127 * (cos((i - 2 * line_sync_sa) * 0.15) + 1));
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f839 	bl	800044c <__aeabi_ui2d>
 80033da:	a333      	add	r3, pc, #204	@ (adr r3, 80034a8 <main+0x550>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fd f8ae 	bl	8000540 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	ec43 2b17 	vmov	d7, r2, r3
 80033ec:	eeb0 0a47 	vmov.f32	s0, s14
 80033f0:	eef0 0a67 	vmov.f32	s1, s15
 80033f4:	f004 fea8 	bl	8008148 <cos>
 80033f8:	ec51 0b10 	vmov	r0, r1, d0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <main+0x564>)
 8003402:	f7fc fee7 	bl	80001d4 <__adddf3>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	a328      	add	r3, pc, #160	@ (adr r3, 80034b0 <main+0x558>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd f894 	bl	8000540 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fb28 	bl	8000a74 <__aeabi_d2iz>
 8003424:	4603      	mov	r3, r0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3327      	adds	r3, #39	@ 0x27
 800342a:	b2d9      	uxtb	r1, r3
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <main+0x560>)
 800342e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003430:	4413      	add	r3, r2
 8003432:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8003436:	460a      	mov	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]
			if (pal_buffer[3][i] < PAL_BLACK)
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <main+0x560>)
 800343c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800343e:	4413      	add	r3, r2
 8003440:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b26      	cmp	r3, #38	@ 0x26
 8003448:	d806      	bhi.n	8003458 <main+0x500>
			{
				pal_buffer[3][i] = PAL_BLACK;
 800344a:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <main+0x560>)
 800344c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800344e:	4413      	add	r3, r2
 8003450:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8003454:	2227      	movs	r2, #39	@ 0x27
 8003456:	701a      	strb	r2, [r3, #0]
			}
			if (pal_buffer[3][i] > PAL_WHITE)
 8003458:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <main+0x560>)
 800345a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800345c:	4413      	add	r3, r2
 800345e:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b4d      	cmp	r3, #77	@ 0x4d
 8003466:	d939      	bls.n	80034dc <main+0x584>
			{
				pal_buffer[3][i] = PAL_WHITE;
 8003468:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <main+0x560>)
 800346a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800346c:	4413      	add	r3, r2
 800346e:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8003472:	224d      	movs	r2, #77	@ 0x4d
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e031      	b.n	80034dc <main+0x584>
			}
		}
		else if (i < line_period_sa - front_porch_sa)
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003480:	429a      	cmp	r2, r3
 8003482:	d21d      	bcs.n	80034c0 <main+0x568>
		{
			pal_buffer[1][i] = PAL_BLACK;
 8003484:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <main+0x560>)
 8003486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003488:	4413      	add	r3, r2
 800348a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348e:	2227      	movs	r2, #39	@ 0x27
 8003490:	701a      	strb	r2, [r3, #0]
			pal_buffer[3][i] = PAL_BLACK;
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <main+0x560>)
 8003494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003496:	4413      	add	r3, r2
 8003498:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 800349c:	2227      	movs	r2, #39	@ 0x27
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e01c      	b.n	80034dc <main+0x584>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	33333333 	.word	0x33333333
 80034ac:	3fc33333 	.word	0x3fc33333
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	40330ccc 	.word	0x40330ccc
 80034b8:	2000b2fc 	.word	0x2000b2fc
 80034bc:	3ff00000 	.word	0x3ff00000
		}
		else
		{
			pal_buffer[1][i] = PAL_ZERO;
 80034c0:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <main+0x5f0>)
 80034c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ca:	2217      	movs	r2, #23
 80034cc:	701a      	strb	r2, [r3, #0]
			pal_buffer[3][i] = PAL_ZERO;
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <main+0x5f0>)
 80034d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 80034d8:	2217      	movs	r2, #23
 80034da:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < line_period_sa; i++)
 80034dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034de:	3301      	adds	r3, #1
 80034e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	f4ff aeeb 	bcc.w	80032c2 <main+0x36a>
		}
	}

	pal_state = 0;
 80034ec:	4b17      	ldr	r3, [pc, #92]	@ (800354c <main+0x5f4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
	pal_offset = 0;
 80034f2:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <main+0x5f8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
	PAL_DMA_WRITE_A(0, 0);
 80034f8:	2274      	movs	r2, #116	@ 0x74
 80034fa:	4913      	ldr	r1, [pc, #76]	@ (8003548 <main+0x5f0>)
 80034fc:	4815      	ldr	r0, [pc, #84]	@ (8003554 <main+0x5fc>)
 80034fe:	f004 fe13 	bl	8008128 <memcpy>
	PAL_DMA_WRITE_B();
 8003502:	4815      	ldr	r0, [pc, #84]	@ (8003558 <main+0x600>)
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <main+0x5f4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	02db      	lsls	r3, r3, #11
 800350a:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <main+0x5f0>)
 800350c:	441a      	add	r2, r3
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <main+0x5f8>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <main+0x604>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	3374      	adds	r3, #116	@ 0x74
 800351e:	4413      	add	r3, r2
 8003520:	2275      	movs	r2, #117	@ 0x75
 8003522:	4619      	mov	r1, r3
 8003524:	f004 fe00 	bl	8008128 <memcpy>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)pal_dma, pal_line_len, DAC_ALIGN_8B_R);
 8003528:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <main+0x604>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	9200      	str	r2, [sp, #0]
 8003530:	4a08      	ldr	r2, [pc, #32]	@ (8003554 <main+0x5fc>)
 8003532:	2100      	movs	r1, #0
 8003534:	480a      	ldr	r0, [pc, #40]	@ (8003560 <main+0x608>)
 8003536:	f000 ff3b 	bl	80043b0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim4);
 800353a:	480a      	ldr	r0, [pc, #40]	@ (8003564 <main+0x60c>)
 800353c:	f003 f960 	bl	8006800 <HAL_TIM_Base_Start>

	exec_ins();
 8003540:	f7fe fb0a 	bl	8001b58 <exec_ins>
#endif
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <main+0x5ec>
 8003548:	2000b2fc 	.word	0x2000b2fc
 800354c:	2000b2f8 	.word	0x2000b2f8
 8003550:	2000b2f9 	.word	0x2000b2f9
 8003554:	2000dafc 	.word	0x2000dafc
 8003558:	2000db70 	.word	0x2000db70
 800355c:	2000b2f4 	.word	0x2000b2f4
 8003560:	2000b178 	.word	0x2000b178
 8003564:	2000b220 	.word	0x2000b220

08003568 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b096      	sub	sp, #88	@ 0x58
 800356c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	2244      	movs	r2, #68	@ 0x44
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fda9 	bl	80080ce <memset>
		0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800357c:	463b      	mov	r3, r7
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	611a      	str	r2, [r3, #16]
		0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800358a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800358e:	f001 fdcd 	bl	800512c <HAL_PWREx_ControlVoltageScaling>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8003598:	f000 fb54 	bl	8003c44 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800359c:	2302      	movs	r3, #2
 800359e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035a6:	2310      	movs	r3, #16
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035aa:	2302      	movs	r3, #2
 80035ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035ae:	2302      	movs	r3, #2
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80035b6:	230a      	movs	r3, #10
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80035ba:	2307      	movs	r3, #7
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035be:	2302      	movs	r3, #2
 80035c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035c2:	2302      	movs	r3, #2
 80035c4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fe04 	bl	80051d8 <HAL_RCC_OscConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <SystemClock_Config+0x72>
	{
		Error_Handler();
 80035d6:	f000 fb35 	bl	8003c44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80035da:	230f      	movs	r3, #15
 80035dc:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035de:	2303      	movs	r3, #3
 80035e0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035ee:	463b      	mov	r3, r7
 80035f0:	2104      	movs	r1, #4
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 f9cc 	bl	8005990 <HAL_RCC_ClockConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80035fe:	f000 fb21 	bl	8003c44 <Error_Handler>
	}
}
 8003602:	bf00      	nop
 8003604:	3758      	adds	r7, #88	@ 0x58
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	2224      	movs	r2, #36	@ 0x24
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fd58 	bl	80080ce <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 800361e:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <MX_DAC1_Init+0x5c>)
 8003620:	4a12      	ldr	r2, [pc, #72]	@ (800366c <MX_DAC1_Init+0x60>)
 8003622:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003624:	4810      	ldr	r0, [pc, #64]	@ (8003668 <MX_DAC1_Init+0x5c>)
 8003626:	f000 fea0 	bl	800436a <HAL_DAC_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8003630:	f000 fb08 	bl	8003c44 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8003638:	232c      	movs	r3, #44	@ 0x2c
 800363a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800363c:	2302      	movs	r3, #2
 800363e:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	2200      	movs	r2, #0
 800364c:	4619      	mov	r1, r3
 800364e:	4806      	ldr	r0, [pc, #24]	@ (8003668 <MX_DAC1_Init+0x5c>)
 8003650:	f000 ffe8 	bl	8004624 <HAL_DAC_ConfigChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 800365a:	f000 faf3 	bl	8003c44 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	@ 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	2000b178 	.word	0x2000b178
 800366c:	40007400 	.word	0x40007400

08003670 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	@ 0x38
 8003674:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8003676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
		0 };
	TIM_OC_InitTypeDef sConfigOC = {
 8003690:	463b      	mov	r3, r7
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	619a      	str	r2, [r3, #24]
		0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80036a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036a8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80036aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b29      	ldr	r3, [pc, #164]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1600000;
 80036b6:	4b28      	ldr	r3, [pc, #160]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <MX_TIM2_Init+0xec>)
 80036ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036bc:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036c2:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c8:	4823      	ldr	r0, [pc, #140]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036ca:	f003 f841 	bl	8006750 <HAL_TIM_Base_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 80036d4:	f000 fab6 	bl	8003c44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036e2:	4619      	mov	r1, r3
 80036e4:	481c      	ldr	r0, [pc, #112]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036e6:	f003 fa69 	bl	8006bbc <HAL_TIM_ConfigClockSource>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80036f0:	f000 faa8 	bl	8003c44 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036f4:	4818      	ldr	r0, [pc, #96]	@ (8003758 <MX_TIM2_Init+0xe8>)
 80036f6:	f003 f8eb 	bl	80068d0 <HAL_TIM_PWM_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8003700:	f000 faa0 	bl	8003c44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800370c:	f107 031c 	add.w	r3, r7, #28
 8003710:	4619      	mov	r1, r3
 8003712:	4811      	ldr	r0, [pc, #68]	@ (8003758 <MX_TIM2_Init+0xe8>)
 8003714:	f003 ff32 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 800371e:	f000 fa91 	bl	8003c44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003722:	2370      	movs	r3, #112	@ 0x70
 8003724:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800372a:	2302      	movs	r3, #2
 800372c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003732:	463b      	mov	r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	4619      	mov	r1, r3
 8003738:	4807      	ldr	r0, [pc, #28]	@ (8003758 <MX_TIM2_Init+0xe8>)
 800373a:	f003 f92b 	bl	8006994 <HAL_TIM_PWM_ConfigChannel>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8003744:	f000 fa7e 	bl	8003c44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003748:	4803      	ldr	r0, [pc, #12]	@ (8003758 <MX_TIM2_Init+0xe8>)
 800374a:	f000 fb4b 	bl	8003de4 <HAL_TIM_MspPostInit>

}
 800374e:	bf00      	nop
 8003750:	3738      	adds	r7, #56	@ 0x38
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000b1d4 	.word	0x2000b1d4
 800375c:	00186a00 	.word	0x00186a00

08003760 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
		0 };
	TIM_MasterConfigTypeDef sMasterConfig = {
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
		0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800377e:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <MX_TIM4_Init+0x94>)
 8003780:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <MX_TIM4_Init+0x98>)
 8003782:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <MX_TIM4_Init+0x94>)
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <MX_TIM4_Init+0x94>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 21;
 8003790:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <MX_TIM4_Init+0x94>)
 8003792:	2215      	movs	r2, #21
 8003794:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <MX_TIM4_Init+0x94>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <MX_TIM4_Init+0x94>)
 800379e:	2280      	movs	r2, #128	@ 0x80
 80037a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037a2:	4814      	ldr	r0, [pc, #80]	@ (80037f4 <MX_TIM4_Init+0x94>)
 80037a4:	f002 ffd4 	bl	8006750 <HAL_TIM_Base_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 80037ae:	f000 fa49 	bl	8003c44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037b6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	4619      	mov	r1, r3
 80037be:	480d      	ldr	r0, [pc, #52]	@ (80037f4 <MX_TIM4_Init+0x94>)
 80037c0:	f003 f9fc 	bl	8006bbc <HAL_TIM_ConfigClockSource>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 80037ca:	f000 fa3b 	bl	8003c44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037ce:	2320      	movs	r3, #32
 80037d0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4806      	ldr	r0, [pc, #24]	@ (80037f4 <MX_TIM4_Init+0x94>)
 80037dc:	f003 fece 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 80037e6:	f000 fa2d 	bl	8003c44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000b220 	.word	0x2000b220
 80037f8:	40000800 	.word	0x40000800

080037fc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003802:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <MX_USART2_UART_Init+0x5c>)
 8003804:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003806:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800380c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <MX_USART2_UART_Init+0x58>)
 8003840:	f003 ff24 	bl	800768c <HAL_UART_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800384a:	f000 f9fb 	bl	8003c44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000b26c 	.word	0x2000b26c
 8003858:	40004400 	.word	0x40004400

0800385c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <MX_DMA_Init+0x38>)
 8003864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003866:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <MX_DMA_Init+0x38>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6493      	str	r3, [r2, #72]	@ 0x48
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <MX_DMA_Init+0x38>)
 8003870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	200d      	movs	r0, #13
 8003880:	f000 fd3d 	bl	80042fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003884:	200d      	movs	r0, #13
 8003886:	f000 fd56 	bl	8004336 <HAL_NVIC_EnableIRQ>

}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000

08003898 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	611a      	str	r2, [r3, #16]
		0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80038ae:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ba:	4b28      	ldr	r3, [pc, #160]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80038c6:	4b25      	ldr	r3, [pc, #148]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	4a24      	ldr	r2, [pc, #144]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d2:	4b22      	ldr	r3, [pc, #136]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b1f      	ldr	r3, [pc, #124]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	4a1e      	ldr	r2, [pc, #120]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ea:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	4b19      	ldr	r3, [pc, #100]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	4a18      	ldr	r2, [pc, #96]	@ (800395c <MX_GPIO_Init+0xc4>)
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003902:	4b16      	ldr	r3, [pc, #88]	@ (800395c <MX_GPIO_Init+0xc4>)
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800390e:	2200      	movs	r2, #0
 8003910:	2120      	movs	r1, #32
 8003912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003916:	f001 fbe3 	bl	80050e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800391a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800391e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003920:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003924:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	4619      	mov	r1, r3
 8003930:	480b      	ldr	r0, [pc, #44]	@ (8003960 <MX_GPIO_Init+0xc8>)
 8003932:	f001 fa2b 	bl	8004d8c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003936:	2320      	movs	r3, #32
 8003938:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4619      	mov	r1, r3
 800394c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003950:	f001 fa1c 	bl	8004d8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003954:	bf00      	nop
 8003956:	3728      	adds	r7, #40	@ 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	48000800 	.word	0x48000800

08003964 <HAL_DAC_ConvHalfCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	if (pal_state == 0)
 800396c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a64 <HAL_DAC_ConvHalfCpltCallbackCh1+0x100>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x44>
	{
		if (pal_offset + 1 >= 5)
 8003974:	4b3c      	ldr	r3, [pc, #240]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d905      	bls.n	8003988 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>
		{
			PAL_DMA_WRITE_A(1, 0);
 800397c:	2274      	movs	r2, #116	@ 0x74
 800397e:	493b      	ldr	r1, [pc, #236]	@ (8003a6c <HAL_DAC_ConvHalfCpltCallbackCh1+0x108>)
 8003980:	483b      	ldr	r0, [pc, #236]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 8003982:	f004 fbd1 	bl	8008128 <memcpy>
		else
		{
			PAL_DMA_WRITE_A(4, pal_offset + 1);
		}
	}
}
 8003986:	e068      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
			PAL_DMA_WRITE_A(0, pal_offset + 1);
 8003988:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	461a      	mov	r2, r3
 8003990:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_DAC_ConvHalfCpltCallbackCh1+0x110>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fb02 f303 	mul.w	r3, r2, r3
 8003998:	4a37      	ldr	r2, [pc, #220]	@ (8003a78 <HAL_DAC_ConvHalfCpltCallbackCh1+0x114>)
 800399a:	4413      	add	r3, r2
 800399c:	2274      	movs	r2, #116	@ 0x74
 800399e:	4619      	mov	r1, r3
 80039a0:	4833      	ldr	r0, [pc, #204]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 80039a2:	f004 fbc1 	bl	8008128 <memcpy>
}
 80039a6:	e058      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
	else if (pal_state == 1)
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <HAL_DAC_ConvHalfCpltCallbackCh1+0x100>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10a      	bne.n	80039c6 <HAL_DAC_ConvHalfCpltCallbackCh1+0x62>
		if (pal_line_counter + 1 >= 310)
 80039b0:	4b32      	ldr	r3, [pc, #200]	@ (8003a7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x118>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80039b8:	d94f      	bls.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
			PAL_DMA_WRITE_A(2, 0);
 80039ba:	2274      	movs	r2, #116	@ 0x74
 80039bc:	4930      	ldr	r1, [pc, #192]	@ (8003a80 <HAL_DAC_ConvHalfCpltCallbackCh1+0x11c>)
 80039be:	482c      	ldr	r0, [pc, #176]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 80039c0:	f004 fbb2 	bl	8008128 <memcpy>
}
 80039c4:	e049      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
	else if (pal_state == 2)
 80039c6:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_DAC_ConvHalfCpltCallbackCh1+0x100>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d119      	bne.n	8003a02 <HAL_DAC_ConvHalfCpltCallbackCh1+0x9e>
		if (pal_offset + 1 >= 7)
 80039ce:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d905      	bls.n	80039e2 <HAL_DAC_ConvHalfCpltCallbackCh1+0x7e>
			PAL_DMA_WRITE_A(3, 0);
 80039d6:	2274      	movs	r2, #116	@ 0x74
 80039d8:	492a      	ldr	r1, [pc, #168]	@ (8003a84 <HAL_DAC_ConvHalfCpltCallbackCh1+0x120>)
 80039da:	4825      	ldr	r0, [pc, #148]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 80039dc:	f004 fba4 	bl	8008128 <memcpy>
}
 80039e0:	e03b      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
			PAL_DMA_WRITE_A(2, pal_offset + 1);
 80039e2:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_DAC_ConvHalfCpltCallbackCh1+0x110>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a23      	ldr	r2, [pc, #140]	@ (8003a80 <HAL_DAC_ConvHalfCpltCallbackCh1+0x11c>)
 80039f4:	4413      	add	r3, r2
 80039f6:	2274      	movs	r2, #116	@ 0x74
 80039f8:	4619      	mov	r1, r3
 80039fa:	481d      	ldr	r0, [pc, #116]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 80039fc:	f004 fb94 	bl	8008128 <memcpy>
}
 8003a00:	e02b      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
	else if (pal_state == 3)
 8003a02:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <HAL_DAC_ConvHalfCpltCallbackCh1+0x100>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d10a      	bne.n	8003a20 <HAL_DAC_ConvHalfCpltCallbackCh1+0xbc>
		if (pal_line_counter + 1 >= 622)
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x118>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f5b3 7f1b 	cmp.w	r3, #620	@ 0x26c
 8003a12:	d922      	bls.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
			PAL_DMA_WRITE_A(4, 0);
 8003a14:	2274      	movs	r2, #116	@ 0x74
 8003a16:	491c      	ldr	r1, [pc, #112]	@ (8003a88 <HAL_DAC_ConvHalfCpltCallbackCh1+0x124>)
 8003a18:	4815      	ldr	r0, [pc, #84]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 8003a1a:	f004 fb85 	bl	8008128 <memcpy>
}
 8003a1e:	e01c      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
	else if (pal_state == 4)
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <HAL_DAC_ConvHalfCpltCallbackCh1+0x100>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d118      	bne.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
		if (pal_offset + 1 >= 3)
 8003a28:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d905      	bls.n	8003a3c <HAL_DAC_ConvHalfCpltCallbackCh1+0xd8>
			PAL_DMA_WRITE_A(0, 0);
 8003a30:	2274      	movs	r2, #116	@ 0x74
 8003a32:	4911      	ldr	r1, [pc, #68]	@ (8003a78 <HAL_DAC_ConvHalfCpltCallbackCh1+0x114>)
 8003a34:	480e      	ldr	r0, [pc, #56]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 8003a36:	f004 fb77 	bl	8008128 <memcpy>
}
 8003a3a:	e00e      	b.n	8003a5a <HAL_DAC_ConvHalfCpltCallbackCh1+0xf6>
			PAL_DMA_WRITE_A(4, pal_offset + 1);
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_DAC_ConvHalfCpltCallbackCh1+0x104>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_DAC_ConvHalfCpltCallbackCh1+0x110>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a88 <HAL_DAC_ConvHalfCpltCallbackCh1+0x124>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	2274      	movs	r2, #116	@ 0x74
 8003a52:	4619      	mov	r1, r3
 8003a54:	4806      	ldr	r0, [pc, #24]	@ (8003a70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x10c>)
 8003a56:	f004 fb67 	bl	8008128 <memcpy>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000b2f8 	.word	0x2000b2f8
 8003a68:	2000b2f9 	.word	0x2000b2f9
 8003a6c:	2000bafc 	.word	0x2000bafc
 8003a70:	2000dafc 	.word	0x2000dafc
 8003a74:	2000b2f4 	.word	0x2000b2f4
 8003a78:	2000b2fc 	.word	0x2000b2fc
 8003a7c:	2000b2fa 	.word	0x2000b2fa
 8003a80:	2000c2fc 	.word	0x2000c2fc
 8003a84:	2000cafc 	.word	0x2000cafc
 8003a88:	2000d2fc 	.word	0x2000d2fc

08003a8c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	pal_line_counter++;
 8003a94:	4b65      	ldr	r3, [pc, #404]	@ (8003c2c <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4b63      	ldr	r3, [pc, #396]	@ (8003c2c <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8003a9e:	801a      	strh	r2, [r3, #0]
	if (pal_state == 0)
 8003aa0:	4b63      	ldr	r3, [pc, #396]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d123      	bne.n	8003af0 <HAL_DAC_ConvCpltCallbackCh1+0x64>
	{
		pal_offset++;
 8003aa8:	4b62      	ldr	r3, [pc, #392]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b60      	ldr	r3, [pc, #384]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003ab2:	701a      	strb	r2, [r3, #0]
		if (pal_offset >= 5)
 8003ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d905      	bls.n	8003ac8 <HAL_DAC_ConvCpltCallbackCh1+0x3c>
		{
			pal_state = 1;
 8003abc:	4b5c      	ldr	r3, [pc, #368]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
			pal_offset = 0;
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
		}
		PAL_DMA_WRITE_B();
 8003ac8:	485b      	ldr	r0, [pc, #364]	@ (8003c38 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8003aca:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	02db      	lsls	r3, r3, #11
 8003ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c3c <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8003ad2:	441a      	add	r2, r3
 8003ad4:	4b57      	ldr	r3, [pc, #348]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4b59      	ldr	r3, [pc, #356]	@ (8003c40 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	3374      	adds	r3, #116	@ 0x74
 8003ae4:	4413      	add	r3, r2
 8003ae6:	2275      	movs	r2, #117	@ 0x75
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f004 fb1d 	bl	8008128 <memcpy>
			pal_offset = 0;
			pal_line_counter = 0;
		}
		PAL_DMA_WRITE_B();
	}
}
 8003aee:	e099      	b.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
	else if (pal_state == 1)
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11f      	bne.n	8003b38 <HAL_DAC_ConvCpltCallbackCh1+0xac>
		if (pal_line_counter >= 310)
 8003af8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c2c <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003b00:	f0c0 8090 	bcc.w	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
			pal_state = 2;
 8003b04:	4b4a      	ldr	r3, [pc, #296]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b06:	2202      	movs	r2, #2
 8003b08:	701a      	strb	r2, [r3, #0]
			pal_offset = 0;
 8003b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
			PAL_DMA_WRITE_B();
 8003b10:	4849      	ldr	r0, [pc, #292]	@ (8003c38 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	02db      	lsls	r3, r3, #11
 8003b18:	4a48      	ldr	r2, [pc, #288]	@ (8003c3c <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8003b1a:	441a      	add	r2, r3
 8003b1c:	4b45      	ldr	r3, [pc, #276]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	4b47      	ldr	r3, [pc, #284]	@ (8003c40 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	3374      	adds	r3, #116	@ 0x74
 8003b2c:	4413      	add	r3, r2
 8003b2e:	2275      	movs	r2, #117	@ 0x75
 8003b30:	4619      	mov	r1, r3
 8003b32:	f004 faf9 	bl	8008128 <memcpy>
}
 8003b36:	e075      	b.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
	else if (pal_state == 2)
 8003b38:	4b3d      	ldr	r3, [pc, #244]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d123      	bne.n	8003b88 <HAL_DAC_ConvCpltCallbackCh1+0xfc>
		pal_offset++;
 8003b40:	4b3c      	ldr	r3, [pc, #240]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	4b3a      	ldr	r3, [pc, #232]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b4a:	701a      	strb	r2, [r3, #0]
		if (pal_offset >= 7)
 8003b4c:	4b39      	ldr	r3, [pc, #228]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d905      	bls.n	8003b60 <HAL_DAC_ConvCpltCallbackCh1+0xd4>
			pal_state = 3;
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b56:	2203      	movs	r2, #3
 8003b58:	701a      	strb	r2, [r3, #0]
			pal_offset = 0;
 8003b5a:	4b36      	ldr	r3, [pc, #216]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
		PAL_DMA_WRITE_B();
 8003b60:	4835      	ldr	r0, [pc, #212]	@ (8003c38 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8003b62:	4b33      	ldr	r3, [pc, #204]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	02db      	lsls	r3, r3, #11
 8003b68:	4a34      	ldr	r2, [pc, #208]	@ (8003c3c <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	4b31      	ldr	r3, [pc, #196]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	4b33      	ldr	r3, [pc, #204]	@ (8003c40 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	3374      	adds	r3, #116	@ 0x74
 8003b7c:	4413      	add	r3, r2
 8003b7e:	2275      	movs	r2, #117	@ 0x75
 8003b80:	4619      	mov	r1, r3
 8003b82:	f004 fad1 	bl	8008128 <memcpy>
}
 8003b86:	e04d      	b.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
	else if (pal_state == 3)
 8003b88:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d11f      	bne.n	8003bd0 <HAL_DAC_ConvCpltCallbackCh1+0x144>
		if (pal_line_counter >= 622)
 8003b90:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f240 226d 	movw	r2, #621	@ 0x26d
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d943      	bls.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
			pal_state = 4;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	701a      	strb	r2, [r3, #0]
			pal_offset = 0;
 8003ba2:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
			PAL_DMA_WRITE_B();
 8003ba8:	4823      	ldr	r0, [pc, #140]	@ (8003c38 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8003baa:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	02db      	lsls	r3, r3, #11
 8003bb0:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8003bb2:	441a      	add	r2, r3
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	3374      	adds	r3, #116	@ 0x74
 8003bc4:	4413      	add	r3, r2
 8003bc6:	2275      	movs	r2, #117	@ 0x75
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f004 faad 	bl	8008128 <memcpy>
}
 8003bce:	e029      	b.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
	else if (pal_state == 4)
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d125      	bne.n	8003c24 <HAL_DAC_ConvCpltCallbackCh1+0x198>
		pal_offset++;
 8003bd8:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003be2:	701a      	strb	r2, [r3, #0]
		if (pal_offset >= 3)
 8003be4:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d908      	bls.n	8003bfe <HAL_DAC_ConvCpltCallbackCh1+0x172>
			pal_state = 0;
 8003bec:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
			pal_offset = 0;
 8003bf2:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
			pal_line_counter = 0;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
		PAL_DMA_WRITE_B();
 8003bfe:	480e      	ldr	r0, [pc, #56]	@ (8003c38 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	02db      	lsls	r3, r3, #11
 8003c06:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8003c08:	441a      	add	r2, r3
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4b0b      	ldr	r3, [pc, #44]	@ (8003c40 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	3374      	adds	r3, #116	@ 0x74
 8003c1a:	4413      	add	r3, r2
 8003c1c:	2275      	movs	r2, #117	@ 0x75
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f004 fa82 	bl	8008128 <memcpy>
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000b2fa 	.word	0x2000b2fa
 8003c30:	2000b2f8 	.word	0x2000b2f8
 8003c34:	2000b2f9 	.word	0x2000b2f9
 8003c38:	2000db70 	.word	0x2000db70
 8003c3c:	2000b2fc 	.word	0x2000b2fc
 8003c40:	2000b2f4 	.word	0x2000b2f4

08003c44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c48:	b672      	cpsid	i
}
 8003c4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <Error_Handler+0x8>

08003c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	4b0f      	ldr	r3, [pc, #60]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c62:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	4a08      	ldr	r2, [pc, #32]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7a:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <HAL_MspInit+0x44>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	@ 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d70 <HAL_DAC_MspInit+0xd8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d155      	bne.n	8003d66 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003cba:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003cc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cde:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_DAC_MspInit+0xdc>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003cea:	2310      	movs	r3, #16
 8003cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d00:	f001 f844 	bl	8004d8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003d04:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_DAC_MspInit+0xe4>)
 8003d08:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d0c:	2206      	movs	r2, #6
 8003d0e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d10:	4b19      	ldr	r3, [pc, #100]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d12:	2210      	movs	r2, #16
 8003d14:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d1c:	4b16      	ldr	r3, [pc, #88]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d1e:	2280      	movs	r2, #128	@ 0x80
 8003d20:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d22:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003d2e:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d30:	2220      	movs	r2, #32
 8003d32:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d34:	4b10      	ldr	r3, [pc, #64]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003d3a:	480f      	ldr	r0, [pc, #60]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d3c:	f000 fe2e 	bl	800499c <HAL_DMA_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8003d46:	f7ff ff7d 	bl	8003c44 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	4a09      	ldr	r2, [pc, #36]	@ (8003d78 <HAL_DAC_MspInit+0xe0>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2036      	movs	r0, #54	@ 0x36
 8003d5c:	f000 facf 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d60:	2036      	movs	r0, #54	@ 0x36
 8003d62:	f000 fae8 	bl	8004336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003d66:	bf00      	nop
 8003d68:	3728      	adds	r7, #40	@ 0x28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40007400 	.word	0x40007400
 8003d74:	40021000 	.word	0x40021000
 8003d78:	2000b18c 	.word	0x2000b18c
 8003d7c:	40020030 	.word	0x40020030

08003d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d10c      	bne.n	8003dac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d92:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4a11      	ldr	r2, [pc, #68]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003daa:	e010      	b.n	8003dce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0b      	ldr	r2, [pc, #44]	@ (8003de0 <HAL_TIM_Base_MspInit+0x60>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10b      	bne.n	8003dce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_TIM_Base_MspInit+0x5c>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40000800 	.word	0x40000800

08003de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e04:	d11d      	bne.n	8003e42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	4a10      	ldr	r2, [pc, #64]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2302      	movs	r3, #2
 8003e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e30:	2301      	movs	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e3e:	f000 ffa5 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e42:	bf00      	nop
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ac      	sub	sp, #176	@ 0xb0
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	2288      	movs	r2, #136	@ 0x88
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f004 f92c 	bl	80080ce <memset>
  if(huart->Instance==USART2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	@ (8003f00 <HAL_UART_MspInit+0xb0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d13b      	bne.n	8003ef8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e80:	2302      	movs	r3, #2
 8003e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e84:	2300      	movs	r3, #0
 8003e86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 ffa3 	bl	8005dd8 <HAL_RCCEx_PeriphCLKConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e98:	f7ff fed4 	bl	8003c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e9c:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea8:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb8:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ec0:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_UART_MspInit+0xb4>)
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ecc:	230c      	movs	r3, #12
 8003ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ee4:	2307      	movs	r3, #7
 8003ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ef4:	f000 ff4a 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ef8:	bf00      	nop
 8003efa:	37b0      	adds	r7, #176	@ 0xb0
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40004400 	.word	0x40004400
 8003f04:	40021000 	.word	0x40021000

08003f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <NMI_Handler+0x4>

08003f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <HardFault_Handler+0x4>

08003f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <MemManage_Handler+0x4>

08003f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <BusFault_Handler+0x4>

08003f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <UsageFault_Handler+0x4>

08003f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f5e:	f000 f8af 	bl	80040c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003f6c:	4802      	ldr	r0, [pc, #8]	@ (8003f78 <DMA1_Channel3_IRQHandler+0x10>)
 8003f6e:	f000 fe2d 	bl	8004bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000b18c 	.word	0x2000b18c

08003f7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003f80:	4802      	ldr	r0, [pc, #8]	@ (8003f8c <TIM6_DAC_IRQHandler+0x10>)
 8003f82:	f000 fae1 	bl	8004548 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000b178 	.word	0x2000b178

08003f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <SystemInit+0x20>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <SystemInit+0x20>)
 8003f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fb8:	f7ff ffea 	bl	8003f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fbc:	480c      	ldr	r0, [pc, #48]	@ (8003ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fbe:	490d      	ldr	r1, [pc, #52]	@ (8003ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <LoopForever+0xe>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc4:	e002      	b.n	8003fcc <LoopCopyDataInit>

08003fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fca:	3304      	adds	r3, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd0:	d3f9      	bcc.n	8003fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8004000 <LoopForever+0x16>)
  movs r3, #0
 8003fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd8:	e001      	b.n	8003fde <LoopFillZerobss>

08003fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fdc:	3204      	adds	r2, #4

08003fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe0:	d3fb      	bcc.n	8003fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe2:	f004 f87d 	bl	80080e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fe6:	f7fe ffb7 	bl	8002f58 <main>

08003fea <LoopForever>:

LoopForever:
    b LoopForever
 8003fea:	e7fe      	b.n	8003fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ff4:	20001100 	.word	0x20001100
  ldr r2, =_sidata
 8003ff8:	0800e498 	.word	0x0800e498
  ldr r2, =_sbss
 8003ffc:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8004000:	2000e300 	.word	0x2000e300

08004004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004004:	e7fe      	b.n	8004004 <ADC1_2_IRQHandler>
	...

08004008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004012:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_Init+0x3c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <HAL_Init+0x3c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401e:	2003      	movs	r0, #3
 8004020:	f000 f962 	bl	80042e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004024:	2000      	movs	r0, #0
 8004026:	f000 f80f 	bl	8004048 <HAL_InitTick>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	e001      	b.n	800403a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004036:	f7ff fe0b 	bl	8003c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800403a:	79fb      	ldrb	r3, [r7, #7]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40022000 	.word	0x40022000

08004048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004054:	4b17      	ldr	r3, [pc, #92]	@ (80040b4 <HAL_InitTick+0x6c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800405c:	4b16      	ldr	r3, [pc, #88]	@ (80040b8 <HAL_InitTick+0x70>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_InitTick+0x6c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800406a:	fbb3 f3f1 	udiv	r3, r3, r1
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f96d 	bl	8004352 <HAL_SYSTICK_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d809      	bhi.n	8004098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f000 f937 	bl	80042fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <HAL_InitTick+0x74>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e007      	b.n	80040a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e004      	b.n	80040a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e001      	b.n	80040a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200010fc 	.word	0x200010fc
 80040b8:	200010f4 	.word	0x200010f4
 80040bc:	200010f8 	.word	0x200010f8

080040c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_IncTick+0x20>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_IncTick+0x24>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	4a04      	ldr	r2, [pc, #16]	@ (80040e4 <HAL_IncTick+0x24>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	200010fc 	.word	0x200010fc
 80040e4:	2000e2fc 	.word	0x2000e2fc

080040e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return uwTick;
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <HAL_GetTick+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000e2fc 	.word	0x2000e2fc

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff ffee 	bl	80040e8 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d005      	beq.n	8004126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_Delay+0x44>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004126:	bf00      	nop
 8004128:	f7ff ffde 	bl	80040e8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d8f7      	bhi.n	8004128 <HAL_Delay+0x28>
  {
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200010fc 	.word	0x200010fc

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	@ (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db0a      	blt.n	8004212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	490c      	ldr	r1, [pc, #48]	@ (8004234 <__NVIC_SetPriority+0x4c>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	440b      	add	r3, r1
 800420c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004210:	e00a      	b.n	8004228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4908      	ldr	r1, [pc, #32]	@ (8004238 <__NVIC_SetPriority+0x50>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3b04      	subs	r3, #4
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	440b      	add	r3, r1
 8004226:	761a      	strb	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000e100 	.word	0xe000e100
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf28      	it	cs
 800425a:	2304      	movcs	r3, #4
 800425c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3304      	adds	r3, #4
 8004262:	2b06      	cmp	r3, #6
 8004264:	d902      	bls.n	800426c <NVIC_EncodePriority+0x30>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b03      	subs	r3, #3
 800426a:	e000      	b.n	800426e <NVIC_EncodePriority+0x32>
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	401a      	ands	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004284:	f04f 31ff 	mov.w	r1, #4294967295
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	4313      	orrs	r3, r2
         );
}
 8004296:	4618      	mov	r0, r3
 8004298:	3724      	adds	r7, #36	@ 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b4:	d301      	bcc.n	80042ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b6:	2301      	movs	r3, #1
 80042b8:	e00f      	b.n	80042da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ba:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <SysTick_Config+0x40>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c2:	210f      	movs	r1, #15
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	f7ff ff8e 	bl	80041e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042cc:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <SysTick_Config+0x40>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d2:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <SysTick_Config+0x40>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	e000e010 	.word	0xe000e010

080042e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff29 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004310:	f7ff ff3e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f7ff ff8e 	bl	800423c <NVIC_EncodePriority>
 8004320:	4602      	mov	r2, r0
 8004322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff5d 	bl	80041e8 <__NVIC_SetPriority>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff31 	bl	80041ac <__NVIC_EnableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ffa2 	bl	80042a4 <SysTick_Config>
 8004360:	4603      	mov	r3, r0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e014      	b.n	80043a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	791b      	ldrb	r3, [r3, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fc83 	bl	8003c98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	795b      	ldrb	r3, [r3, #5]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_DAC_Start_DMA+0x1e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0ab      	b.n	8004526 <HAL_DAC_Start_DMA+0x176>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2202      	movs	r2, #2
 80043d8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d12f      	bne.n	8004440 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a52      	ldr	r2, [pc, #328]	@ (8004530 <HAL_DAC_Start_DMA+0x180>)
 80043e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a51      	ldr	r2, [pc, #324]	@ (8004534 <HAL_DAC_Start_DMA+0x184>)
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a50      	ldr	r2, [pc, #320]	@ (8004538 <HAL_DAC_Start_DMA+0x188>)
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004406:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d013      	beq.n	8004436 <HAL_DAC_Start_DMA+0x86>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d845      	bhi.n	80044a0 <HAL_DAC_Start_DMA+0xf0>
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_DAC_Start_DMA+0x72>
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d005      	beq.n	800442c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004420:	e03e      	b.n	80044a0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	613b      	str	r3, [r7, #16]
        break;
 800442a:	e03c      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	613b      	str	r3, [r7, #16]
        break;
 8004434:	e037      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3310      	adds	r3, #16
 800443c:	613b      	str	r3, [r7, #16]
        break;
 800443e:	e032      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a3d      	ldr	r2, [pc, #244]	@ (800453c <HAL_DAC_Start_DMA+0x18c>)
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a3c      	ldr	r2, [pc, #240]	@ (8004540 <HAL_DAC_Start_DMA+0x190>)
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a3b      	ldr	r2, [pc, #236]	@ (8004544 <HAL_DAC_Start_DMA+0x194>)
 8004456:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004466:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d013      	beq.n	8004496 <HAL_DAC_Start_DMA+0xe6>
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d817      	bhi.n	80044a4 <HAL_DAC_Start_DMA+0xf4>
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_DAC_Start_DMA+0xd2>
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d005      	beq.n	800448c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004480:	e010      	b.n	80044a4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	613b      	str	r3, [r7, #16]
        break;
 800448a:	e00c      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3318      	adds	r3, #24
 8004492:	613b      	str	r3, [r7, #16]
        break;
 8004494:	e007      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	331c      	adds	r3, #28
 800449c:	613b      	str	r3, [r7, #16]
        break;
 800449e:	e002      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80044a4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6898      	ldr	r0, [r3, #8]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	f000 fb21 	bl	8004b0c <HAL_DMA_Start_IT>
 80044ca:	4603      	mov	r3, r0
 80044cc:	75fb      	strb	r3, [r7, #23]
 80044ce:	e010      	b.n	80044f2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80044de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68d8      	ldr	r0, [r3, #12]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	f000 fb0f 	bl	8004b0c <HAL_DMA_Start_IT>
 80044ee:	4603      	mov	r3, r0
 80044f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e005      	b.n	8004524 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004524:	7dfb      	ldrb	r3, [r7, #23]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	08004873 	.word	0x08004873
 8004534:	08004895 	.word	0x08004895
 8004538:	080048b1 	.word	0x080048b1
 800453c:	0800492f 	.word	0x0800492f
 8004540:	08004951 	.word	0x08004951
 8004544:	0800496d 	.word	0x0800496d

08004548 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455e:	d120      	bne.n	80045a2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456e:	d118      	bne.n	80045a2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f837 	bl	8004610 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045b0:	d120      	bne.n	80045f4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c0:	d118      	bne.n	80045f4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f043 0202 	orr.w	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80045ec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f993 	bl	800491a <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	795b      	ldrb	r3, [r3, #5]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_DAC_ConfigChannel+0x1c>
 800463c:	2302      	movs	r3, #2
 800463e:	e114      	b.n	800486a <HAL_DAC_ConfigChannel+0x246>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	f040 8081 	bne.w	8004758 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004656:	f7ff fd47 	bl	80040e8 <HAL_GetTick>
 800465a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d140      	bne.n	80046e4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004662:	e018      	b.n	8004696 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004664:	f7ff fd40 	bl	80040e8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d911      	bls.n	8004696 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f043 0208 	orr.w	r2, r3, #8
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2203      	movs	r2, #3
 8004690:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0e9      	b.n	800486a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1df      	bne.n	8004664 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7ff fd2b 	bl	8004100 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	6992      	ldr	r2, [r2, #24]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80046b4:	e023      	b.n	80046fe <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046b6:	f7ff fd17 	bl	80040e8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d90f      	bls.n	80046e4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da0a      	bge.n	80046e4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f043 0208 	orr.w	r2, r3, #8
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2203      	movs	r2, #3
 80046de:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0c2      	b.n	800486a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dbe3      	blt.n	80046b6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80046ee:	2001      	movs	r0, #1
 80046f0:	f7ff fd06 	bl	8004100 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	6992      	ldr	r2, [r2, #24]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	ea02 0103 	and.w	r1, r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	21ff      	movs	r1, #255	@ 0xff
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	ea02 0103 	and.w	r1, r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d11d      	bne.n	800479c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	221f      	movs	r2, #31
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2207      	movs	r2, #7
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	400a      	ands	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	22c0      	movs	r2, #192	@ 0xc0
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	400a      	ands	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff f903 	bl	8003a8c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	711a      	strb	r2, [r3, #4]
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff f85e 	bl	8003964 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fe96 	bl	80045fc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	711a      	strb	r2, [r3, #4]
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff ffce 	bl	80048de <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	711a      	strb	r2, [r3, #4]
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ffc7 	bl	80048f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ffbd 	bl	8004906 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	711a      	strb	r2, [r3, #4]
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e098      	b.n	8004ae0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <HAL_DMA_Init+0x150>)
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d80f      	bhi.n	80049da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_DMA_Init+0x154>)
 80049c2:	4413      	add	r3, r2
 80049c4:	4a4b      	ldr	r2, [pc, #300]	@ (8004af4 <HAL_DMA_Init+0x158>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a48      	ldr	r2, [pc, #288]	@ (8004af8 <HAL_DMA_Init+0x15c>)
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80049d8:	e00e      	b.n	80049f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <HAL_DMA_Init+0x160>)
 80049e2:	4413      	add	r3, r2
 80049e4:	4a43      	ldr	r2, [pc, #268]	@ (8004af4 <HAL_DMA_Init+0x158>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	009a      	lsls	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a42      	ldr	r2, [pc, #264]	@ (8004b00 <HAL_DMA_Init+0x164>)
 80049f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a52:	d039      	beq.n	8004ac8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <HAL_DMA_Init+0x15c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d11a      	bne.n	8004a94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a5e:	4b29      	ldr	r3, [pc, #164]	@ (8004b04 <HAL_DMA_Init+0x168>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	f003 031c 	and.w	r3, r3, #28
 8004a6a:	210f      	movs	r1, #15
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	4924      	ldr	r1, [pc, #144]	@ (8004b04 <HAL_DMA_Init+0x168>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a78:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <HAL_DMA_Init+0x168>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a84:	f003 031c 	and.w	r3, r3, #28
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	491d      	ldr	r1, [pc, #116]	@ (8004b04 <HAL_DMA_Init+0x168>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
 8004a92:	e019      	b.n	8004ac8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a94:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <HAL_DMA_Init+0x16c>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9c:	f003 031c 	and.w	r3, r3, #28
 8004aa0:	210f      	movs	r1, #15
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <HAL_DMA_Init+0x16c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004aae:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <HAL_DMA_Init+0x16c>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	f003 031c 	and.w	r3, r3, #28
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	4911      	ldr	r1, [pc, #68]	@ (8004b08 <HAL_DMA_Init+0x16c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40020407 	.word	0x40020407
 8004af0:	bffdfff8 	.word	0xbffdfff8
 8004af4:	cccccccd 	.word	0xcccccccd
 8004af8:	40020000 	.word	0x40020000
 8004afc:	bffdfbf8 	.word	0xbffdfbf8
 8004b00:	40020400 	.word	0x40020400
 8004b04:	400200a8 	.word	0x400200a8
 8004b08:	400204a8 	.word	0x400204a8

08004b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_DMA_Start_IT+0x20>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e04b      	b.n	8004bc4 <HAL_DMA_Start_IT+0xb8>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d13a      	bne.n	8004bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f8e0 	bl	8004d2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 020e 	orr.w	r2, r2, #14
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e00f      	b.n	8004ba4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 020a 	orr.w	r2, r2, #10
 8004ba2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e005      	b.n	8004bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be8:	f003 031c 	and.w	r3, r3, #28
 8004bec:	2204      	movs	r2, #4
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d026      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x7a>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	f003 021c 	and.w	r2, r3, #28
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	2104      	movs	r1, #4
 8004c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d071      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c44:	e06c      	b.n	8004d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	f003 031c 	and.w	r3, r3, #28
 8004c4e:	2202      	movs	r2, #2
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02e      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xec>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d029      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 020a 	bic.w	r2, r2, #10
 8004c80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	f003 021c 	and.w	r2, r3, #28
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	2102      	movs	r1, #2
 8004c98:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d038      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004cb6:	e033      	b.n	8004d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	f003 031c 	and.w	r3, r3, #28
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02a      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x156>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d025      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 020e 	bic.w	r2, r2, #14
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f003 021c 	and.w	r2, r3, #28
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
}
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3c:	f003 021c 	and.w	r2, r3, #28
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d108      	bne.n	8004d6e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d6c:	e007      	b.n	8004d7e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d9a:	e17f      	b.n	800509c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8171 	beq.w	8005096 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d005      	beq.n	8004dcc <HAL_GPIO_Init+0x40>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d130      	bne.n	8004e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e02:	2201      	movs	r2, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0201 	and.w	r2, r3, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d118      	bne.n	8004e6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e40:	2201      	movs	r2, #1
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	08db      	lsrs	r3, r3, #3
 8004e56:	f003 0201 	and.w	r2, r3, #1
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d017      	beq.n	8004ea8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d123      	bne.n	8004efc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	08da      	lsrs	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3208      	adds	r2, #8
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	220f      	movs	r2, #15
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	08da      	lsrs	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3208      	adds	r2, #8
 8004ef6:	6939      	ldr	r1, [r7, #16]
 8004ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	2203      	movs	r2, #3
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0203 	and.w	r2, r3, #3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80ac 	beq.w	8005096 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80050bc <HAL_GPIO_Init+0x330>)
 8004f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f42:	4a5e      	ldr	r2, [pc, #376]	@ (80050bc <HAL_GPIO_Init+0x330>)
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80050bc <HAL_GPIO_Init+0x330>)
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f56:	4a5a      	ldr	r2, [pc, #360]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	089b      	lsrs	r3, r3, #2
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	220f      	movs	r2, #15
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f80:	d025      	beq.n	8004fce <HAL_GPIO_Init+0x242>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a4f      	ldr	r2, [pc, #316]	@ (80050c4 <HAL_GPIO_Init+0x338>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <HAL_GPIO_Init+0x23e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80050c8 <HAL_GPIO_Init+0x33c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d019      	beq.n	8004fc6 <HAL_GPIO_Init+0x23a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a4d      	ldr	r2, [pc, #308]	@ (80050cc <HAL_GPIO_Init+0x340>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_GPIO_Init+0x236>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80050d0 <HAL_GPIO_Init+0x344>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00d      	beq.n	8004fbe <HAL_GPIO_Init+0x232>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80050d4 <HAL_GPIO_Init+0x348>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <HAL_GPIO_Init+0x22e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4a      	ldr	r2, [pc, #296]	@ (80050d8 <HAL_GPIO_Init+0x34c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_GPIO_Init+0x22a>
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	e00c      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	e00a      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fba:	2305      	movs	r3, #5
 8004fbc:	e008      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	e006      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e004      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e002      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <HAL_GPIO_Init+0x244>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	f002 0203 	and.w	r2, r2, #3
 8004fd6:	0092      	lsls	r2, r2, #2
 8004fd8:	4093      	lsls	r3, r2
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fe0:	4937      	ldr	r1, [pc, #220]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	3302      	adds	r3, #2
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fee:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <HAL_GPIO_Init+0x350>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005012:	4a32      	ldr	r2, [pc, #200]	@ (80050dc <HAL_GPIO_Init+0x350>)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005018:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <HAL_GPIO_Init+0x350>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_GPIO_Init+0x350>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005042:	4b26      	ldr	r3, [pc, #152]	@ (80050dc <HAL_GPIO_Init+0x350>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	43db      	mvns	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005066:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <HAL_GPIO_Init+0x350>)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_GPIO_Init+0x350>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	43db      	mvns	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005090:	4a12      	ldr	r2, [pc, #72]	@ (80050dc <HAL_GPIO_Init+0x350>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f47f ae78 	bne.w	8004d9c <HAL_GPIO_Init+0x10>
  }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40010000 	.word	0x40010000
 80050c4:	48000400 	.word	0x48000400
 80050c8:	48000800 	.word	0x48000800
 80050cc:	48000c00 	.word	0x48000c00
 80050d0:	48001000 	.word	0x48001000
 80050d4:	48001400 	.word	0x48001400
 80050d8:	48001800 	.word	0x48001800
 80050dc:	40010400 	.word	0x40010400

080050e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
 80050ec:	4613      	mov	r3, r2
 80050ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050f0:	787b      	ldrb	r3, [r7, #1]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050f6:	887a      	ldrh	r2, [r7, #2]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050fc:	e002      	b.n	8005104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <HAL_PWREx_GetVoltageRange+0x18>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40007000 	.word	0x40007000

0800512c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513a:	d130      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800513c:	4b23      	ldr	r3, [pc, #140]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d038      	beq.n	80051bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800514a:	4b20      	ldr	r3, [pc, #128]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005152:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005154:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800515a:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2232      	movs	r2, #50	@ 0x32
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0c9b      	lsrs	r3, r3, #18
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005170:	e002      	b.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3b01      	subs	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005178:	4b14      	ldr	r3, [pc, #80]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005184:	d102      	bne.n	800518c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f2      	bne.n	8005172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800518c:	4b0f      	ldr	r3, [pc, #60]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005198:	d110      	bne.n	80051bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e00f      	b.n	80051be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d007      	beq.n	80051bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ac:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051b4:	4a05      	ldr	r2, [pc, #20]	@ (80051cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40007000 	.word	0x40007000
 80051d0:	200010f4 	.word	0x200010f4
 80051d4:	431bde83 	.word	0x431bde83

080051d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e3ca      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ea:	4b97      	ldr	r3, [pc, #604]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f4:	4b94      	ldr	r3, [pc, #592]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80e4 	beq.w	80053d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_RCC_OscConfig+0x4a>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	f040 808b 	bne.w	8005330 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 8087 	bne.w	8005330 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005222:	4b89      	ldr	r3, [pc, #548]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_RCC_OscConfig+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e3a2      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	4b82      	ldr	r3, [pc, #520]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_RCC_OscConfig+0x7c>
 800524a:	4b7f      	ldr	r3, [pc, #508]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005252:	e005      	b.n	8005260 <HAL_RCC_OscConfig+0x88>
 8005254:	4b7c      	ldr	r3, [pc, #496]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005260:	4293      	cmp	r3, r2
 8005262:	d223      	bcs.n	80052ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fd55 	bl	8005d18 <RCC_SetFlashLatencyFromMSIRange>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e383      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005278:	4b73      	ldr	r3, [pc, #460]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a72      	ldr	r2, [pc, #456]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800527e:	f043 0308 	orr.w	r3, r3, #8
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b70      	ldr	r3, [pc, #448]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	496d      	ldr	r1, [pc, #436]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005296:	4b6c      	ldr	r3, [pc, #432]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4968      	ldr	r1, [pc, #416]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	604b      	str	r3, [r1, #4]
 80052aa:	e025      	b.n	80052f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ac:	4b66      	ldr	r3, [pc, #408]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a65      	ldr	r2, [pc, #404]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052b2:	f043 0308 	orr.w	r3, r3, #8
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4960      	ldr	r1, [pc, #384]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	495b      	ldr	r1, [pc, #364]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fd15 	bl	8005d18 <RCC_SetFlashLatencyFromMSIRange>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e343      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f8:	f000 fc4a 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b52      	ldr	r3, [pc, #328]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	4950      	ldr	r1, [pc, #320]	@ (800544c <HAL_RCC_OscConfig+0x274>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	4a4e      	ldr	r2, [pc, #312]	@ (8005450 <HAL_RCC_OscConfig+0x278>)
 8005316:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005318:	4b4e      	ldr	r3, [pc, #312]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fe93 	bl	8004048 <HAL_InitTick>
 8005322:	4603      	mov	r3, r0
 8005324:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d052      	beq.n	80053d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	e327      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d032      	beq.n	800539e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005338:	4b43      	ldr	r3, [pc, #268]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a42      	ldr	r2, [pc, #264]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005344:	f7fe fed0 	bl	80040e8 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800534c:	f7fe fecc 	bl	80040e8 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e310      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800535e:	4b3a      	ldr	r3, [pc, #232]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800536a:	4b37      	ldr	r3, [pc, #220]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a36      	ldr	r2, [pc, #216]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005370:	f043 0308 	orr.w	r3, r3, #8
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	4b34      	ldr	r3, [pc, #208]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4931      	ldr	r1, [pc, #196]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005388:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	492c      	ldr	r1, [pc, #176]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	e01a      	b.n	80053d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800539e:	4b2a      	ldr	r3, [pc, #168]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a29      	ldr	r2, [pc, #164]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053aa:	f7fe fe9d 	bl	80040e8 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b2:	f7fe fe99 	bl	80040e8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e2dd      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053c4:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCC_OscConfig+0x1da>
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d074      	beq.n	80054ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x21a>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d10e      	bne.n	800540a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d10b      	bne.n	800540a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f2:	4b15      	ldr	r3, [pc, #84]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d064      	beq.n	80054c8 <HAL_RCC_OscConfig+0x2f0>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d160      	bne.n	80054c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e2ba      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x24a>
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0b      	ldr	r2, [pc, #44]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800541a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e026      	b.n	8005470 <HAL_RCC_OscConfig+0x298>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800542a:	d115      	bne.n	8005458 <HAL_RCC_OscConfig+0x280>
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a05      	ldr	r2, [pc, #20]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 8005432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a02      	ldr	r2, [pc, #8]	@ (8005448 <HAL_RCC_OscConfig+0x270>)
 800543e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e014      	b.n	8005470 <HAL_RCC_OscConfig+0x298>
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	0800e268 	.word	0x0800e268
 8005450:	200010f4 	.word	0x200010f4
 8005454:	200010f8 	.word	0x200010f8
 8005458:	4ba0      	ldr	r3, [pc, #640]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a9f      	ldr	r2, [pc, #636]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b9d      	ldr	r3, [pc, #628]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a9c      	ldr	r2, [pc, #624]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fe fe36 	bl	80040e8 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005480:	f7fe fe32 	bl	80040e8 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e276      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005492:	4b92      	ldr	r3, [pc, #584]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x2a8>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fe fe22 	bl	80040e8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fe fe1e 	bl	80040e8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	@ 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e262      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ba:	4b88      	ldr	r3, [pc, #544]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x2d0>
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d060      	beq.n	8005598 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_OscConfig+0x310>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d119      	bne.n	8005516 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d116      	bne.n	8005516 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e8:	4b7c      	ldr	r3, [pc, #496]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_OscConfig+0x328>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e23f      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b76      	ldr	r3, [pc, #472]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4973      	ldr	r1, [pc, #460]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005514:	e040      	b.n	8005598 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d023      	beq.n	8005566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551e:	4b6f      	ldr	r3, [pc, #444]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a6e      	ldr	r2, [pc, #440]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552a:	f7fe fddd 	bl	80040e8 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005532:	f7fe fdd9 	bl	80040e8 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e21d      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005544:	4b65      	ldr	r3, [pc, #404]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005550:	4b62      	ldr	r3, [pc, #392]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	061b      	lsls	r3, r3, #24
 800555e:	495f      	ldr	r1, [pc, #380]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005560:	4313      	orrs	r3, r2
 8005562:	604b      	str	r3, [r1, #4]
 8005564:	e018      	b.n	8005598 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005566:	4b5d      	ldr	r3, [pc, #372]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5c      	ldr	r2, [pc, #368]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800556c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fe fdb9 	bl	80040e8 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557a:	f7fe fdb5 	bl	80040e8 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e1f9      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800558c:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f0      	bne.n	800557a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03c      	beq.n	800561e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01c      	beq.n	80055e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ac:	4b4b      	ldr	r3, [pc, #300]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b2:	4a4a      	ldr	r2, [pc, #296]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fe fd94 	bl	80040e8 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fe fd90 	bl	80040e8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1d4      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d6:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80055d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ef      	beq.n	80055c4 <HAL_RCC_OscConfig+0x3ec>
 80055e4:	e01b      	b.n	800561e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e6:	4b3d      	ldr	r3, [pc, #244]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80055e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ec:	4a3b      	ldr	r2, [pc, #236]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f6:	f7fe fd77 	bl	80040e8 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fe:	f7fe fd73 	bl	80040e8 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e1b7      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005610:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ef      	bne.n	80055fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80a6 	beq.w	8005778 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562c:	2300      	movs	r3, #0
 800562e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005630:	4b2a      	ldr	r3, [pc, #168]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10d      	bne.n	8005658 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563c:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005640:	4a26      	ldr	r2, [pc, #152]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005646:	6593      	str	r3, [r2, #88]	@ 0x58
 8005648:	4b24      	ldr	r3, [pc, #144]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005658:	4b21      	ldr	r3, [pc, #132]	@ (80056e0 <HAL_RCC_OscConfig+0x508>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d118      	bne.n	8005696 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005664:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <HAL_RCC_OscConfig+0x508>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1d      	ldr	r2, [pc, #116]	@ (80056e0 <HAL_RCC_OscConfig+0x508>)
 800566a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800566e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005670:	f7fe fd3a 	bl	80040e8 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fe fd36 	bl	80040e8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e17a      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568a:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <HAL_RCC_OscConfig+0x508>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_RCC_OscConfig+0x4d8>
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a4:	4a0d      	ldr	r2, [pc, #52]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056ae:	e029      	b.n	8005704 <HAL_RCC_OscConfig+0x52c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d115      	bne.n	80056e4 <HAL_RCC_OscConfig+0x50c>
 80056b8:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056be:	4a07      	ldr	r2, [pc, #28]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056c0:	f043 0304 	orr.w	r3, r3, #4
 80056c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056c8:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	4a03      	ldr	r2, [pc, #12]	@ (80056dc <HAL_RCC_OscConfig+0x504>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d8:	e014      	b.n	8005704 <HAL_RCC_OscConfig+0x52c>
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40007000 	.word	0x40007000
 80056e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a9b      	ldr	r2, [pc, #620]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f4:	4b98      	ldr	r3, [pc, #608]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	4a97      	ldr	r2, [pc, #604]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d016      	beq.n	800573a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fe fcec 	bl	80040e8 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fe fce8 	bl	80040e8 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e12a      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572a:	4b8b      	ldr	r3, [pc, #556]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ed      	beq.n	8005714 <HAL_RCC_OscConfig+0x53c>
 8005738:	e015      	b.n	8005766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fe fcd5 	bl	80040e8 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fe fcd1 	bl	80040e8 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e113      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005758:	4b7f      	ldr	r3, [pc, #508]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1ed      	bne.n	8005742 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576c:	4b7a      	ldr	r3, [pc, #488]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	4a79      	ldr	r2, [pc, #484]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005776:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80fe 	beq.w	800597e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	2b02      	cmp	r3, #2
 8005788:	f040 80d0 	bne.w	800592c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800578c:	4b72      	ldr	r3, [pc, #456]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f003 0203 	and.w	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d130      	bne.n	8005802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	3b01      	subs	r3, #1
 80057ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d127      	bne.n	8005802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057be:	429a      	cmp	r2, r3
 80057c0:	d11f      	bne.n	8005802 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057cc:	2a07      	cmp	r2, #7
 80057ce:	bf14      	ite	ne
 80057d0:	2201      	movne	r2, #1
 80057d2:	2200      	moveq	r2, #0
 80057d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d113      	bne.n	8005802 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d109      	bne.n	8005802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	3b01      	subs	r3, #1
 80057fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d06e      	beq.n	80058e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d069      	beq.n	80058dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005808:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005814:	4b50      	ldr	r3, [pc, #320]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0ad      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005824:	4b4c      	ldr	r3, [pc, #304]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a4b      	ldr	r2, [pc, #300]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800582e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005830:	f7fe fc5a 	bl	80040e8 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fe fc56 	bl	80040e8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e09a      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584a:	4b43      	ldr	r3, [pc, #268]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005856:	4b40      	ldr	r3, [pc, #256]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	4b40      	ldr	r3, [pc, #256]	@ (800595c <HAL_RCC_OscConfig+0x784>)
 800585c:	4013      	ands	r3, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005866:	3a01      	subs	r2, #1
 8005868:	0112      	lsls	r2, r2, #4
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005870:	0212      	lsls	r2, r2, #8
 8005872:	4311      	orrs	r1, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005878:	0852      	lsrs	r2, r2, #1
 800587a:	3a01      	subs	r2, #1
 800587c:	0552      	lsls	r2, r2, #21
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005884:	0852      	lsrs	r2, r2, #1
 8005886:	3a01      	subs	r2, #1
 8005888:	0652      	lsls	r2, r2, #25
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005890:	0912      	lsrs	r2, r2, #4
 8005892:	0452      	lsls	r2, r2, #17
 8005894:	430a      	orrs	r2, r1
 8005896:	4930      	ldr	r1, [pc, #192]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005898:	4313      	orrs	r3, r2
 800589a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800589c:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058b4:	f7fe fc18 	bl	80040e8 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058bc:	f7fe fc14 	bl	80040e8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e058      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	4b22      	ldr	r3, [pc, #136]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058da:	e050      	b.n	800597e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e04f      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d148      	bne.n	800597e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058f8:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a16      	ldr	r2, [pc, #88]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 80058fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005902:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005904:	f7fe fbf0 	bl	80040e8 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fe fbec 	bl	80040e8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e030      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591e:	4b0e      	ldr	r3, [pc, #56]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0x734>
 800592a:	e028      	b.n	800597e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b0c      	cmp	r3, #12
 8005930:	d023      	beq.n	800597a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a08      	ldr	r2, [pc, #32]	@ (8005958 <HAL_RCC_OscConfig+0x780>)
 8005938:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fe fbd3 	bl	80040e8 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005944:	e00c      	b.n	8005960 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fe fbcf 	bl	80040e8 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d905      	bls.n	8005960 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e013      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
 8005958:	40021000 	.word	0x40021000
 800595c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005960:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_RCC_OscConfig+0x7b0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ec      	bne.n	8005946 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800596c:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <HAL_RCC_OscConfig+0x7b0>)
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	4905      	ldr	r1, [pc, #20]	@ (8005988 <HAL_RCC_OscConfig+0x7b0>)
 8005972:	4b06      	ldr	r3, [pc, #24]	@ (800598c <HAL_RCC_OscConfig+0x7b4>)
 8005974:	4013      	ands	r3, r2
 8005976:	60cb      	str	r3, [r1, #12]
 8005978:	e001      	b.n	800597e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000
 800598c:	feeefffc 	.word	0xfeeefffc

08005990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0e7      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a4:	4b75      	ldr	r3, [pc, #468]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d910      	bls.n	80059d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b72      	ldr	r3, [pc, #456]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0207 	bic.w	r2, r3, #7
 80059ba:	4970      	ldr	r1, [pc, #448]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0cf      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	4b66      	ldr	r3, [pc, #408]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d908      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b63      	ldr	r3, [pc, #396]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4960      	ldr	r1, [pc, #384]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d04c      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a16:	4b5a      	ldr	r3, [pc, #360]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d121      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0a6      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2e:	4b54      	ldr	r3, [pc, #336]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d115      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e09a      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a46:	4b4e      	ldr	r3, [pc, #312]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e08e      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a56:	4b4a      	ldr	r3, [pc, #296]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e086      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a66:	4b46      	ldr	r3, [pc, #280]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 0203 	bic.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4943      	ldr	r1, [pc, #268]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a78:	f7fe fb36 	bl	80040e8 <HAL_GetTick>
 8005a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7e:	e00a      	b.n	8005a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a80:	f7fe fb32 	bl	80040e8 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e06e      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	4b3a      	ldr	r3, [pc, #232]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 020c 	and.w	r2, r3, #12
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d1eb      	bne.n	8005a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d208      	bcs.n	8005ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	492b      	ldr	r1, [pc, #172]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad6:	4b29      	ldr	r3, [pc, #164]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d210      	bcs.n	8005b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae4:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 0207 	bic.w	r2, r3, #7
 8005aec:	4923      	ldr	r1, [pc, #140]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af4:	4b21      	ldr	r3, [pc, #132]	@ (8005b7c <HAL_RCC_ClockConfig+0x1ec>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e036      	b.n	8005b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4918      	ldr	r1, [pc, #96]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b30:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4910      	ldr	r1, [pc, #64]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b44:	f000 f824 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	490b      	ldr	r1, [pc, #44]	@ (8005b84 <HAL_RCC_ClockConfig+0x1f4>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b60:	4a09      	ldr	r2, [pc, #36]	@ (8005b88 <HAL_RCC_ClockConfig+0x1f8>)
 8005b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCC_ClockConfig+0x1fc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fa6d 	bl	8004048 <HAL_InitTick>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40022000 	.word	0x40022000
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800e268 	.word	0x0800e268
 8005b88:	200010f4 	.word	0x200010f4
 8005b8c:	200010f8 	.word	0x200010f8

08005b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b089      	sub	sp, #36	@ 0x24
 8005b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d121      	bne.n	8005c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d11e      	bne.n	8005c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bc4:	4b34      	ldr	r3, [pc, #208]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bd0:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e005      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005be0:	4b2d      	ldr	r3, [pc, #180]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bec:	4a2b      	ldr	r2, [pc, #172]	@ (8005c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10d      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d102      	bne.n	8005c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c08:	4b25      	ldr	r3, [pc, #148]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e004      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c14:	4b23      	ldr	r3, [pc, #140]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2b0c      	cmp	r3, #12
 8005c1c:	d134      	bne.n	8005c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d003      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0xac>
 8005c34:	e005      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c38:	617b      	str	r3, [r7, #20]
      break;
 8005c3a:	e005      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c3e:	617b      	str	r3, [r7, #20]
      break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	617b      	str	r3, [r7, #20]
      break;
 8005c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	3301      	adds	r3, #1
 8005c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c56:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	fb03 f202 	mul.w	r2, r3, r2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	0e5b      	lsrs	r3, r3, #25
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	3301      	adds	r3, #1
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c88:	69bb      	ldr	r3, [r7, #24]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	0800e280 	.word	0x0800e280
 8005ca0:	00f42400 	.word	0x00f42400
 8005ca4:	007a1200 	.word	0x007a1200

08005ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cac:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	200010f4 	.word	0x200010f4

08005cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cc4:	f7ff fff0 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4904      	ldr	r1, [pc, #16]	@ (8005ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	0800e278 	.word	0x0800e278

08005cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cf0:	f7ff ffda 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0adb      	lsrs	r3, r3, #11
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4904      	ldr	r1, [pc, #16]	@ (8005d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800e278 	.word	0x0800e278

08005d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d24:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d30:	f7ff f9ee 	bl	8005110 <HAL_PWREx_GetVoltageRange>
 8005d34:	6178      	str	r0, [r7, #20]
 8005d36:	e014      	b.n	8005d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d38:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3c:	4a24      	ldr	r2, [pc, #144]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d44:	4b22      	ldr	r3, [pc, #136]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d50:	f7ff f9de 	bl	8005110 <HAL_PWREx_GetVoltageRange>
 8005d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d56:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d68:	d10b      	bne.n	8005d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b80      	cmp	r3, #128	@ 0x80
 8005d6e:	d919      	bls.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d74:	d902      	bls.n	8005d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d76:	2302      	movs	r3, #2
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	e013      	b.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e010      	b.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b80      	cmp	r3, #128	@ 0x80
 8005d86:	d902      	bls.n	8005d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d88:	2303      	movs	r3, #3
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e00a      	b.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b80      	cmp	r3, #128	@ 0x80
 8005d92:	d102      	bne.n	8005d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d94:	2302      	movs	r3, #2
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e004      	b.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b70      	cmp	r3, #112	@ 0x70
 8005d9e:	d101      	bne.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005da0:	2301      	movs	r3, #1
 8005da2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f023 0207 	bic.w	r2, r3, #7
 8005dac:	4909      	ldr	r1, [pc, #36]	@ (8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005db4:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	40022000 	.word	0x40022000

08005dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005de0:	2300      	movs	r3, #0
 8005de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005de4:	2300      	movs	r3, #0
 8005de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d041      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005dfc:	d02a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005dfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e02:	d824      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e08:	d008      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e0e:	d81e      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e18:	d010      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e1a:	e018      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e1c:	4b86      	ldr	r3, [pc, #536]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4a85      	ldr	r2, [pc, #532]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e28:	e015      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fabb 	bl	80063ac <RCCEx_PLLSAI1_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e3a:	e00c      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3320      	adds	r3, #32
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fba6 	bl	8006594 <RCCEx_PLLSAI2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	74fb      	strb	r3, [r7, #19]
      break;
 8005e52:	e000      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e5c:	4b76      	ldr	r3, [pc, #472]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6a:	4973      	ldr	r1, [pc, #460]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005e72:	e001      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d041      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e8c:	d02a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e92:	d824      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e98:	d008      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e9e:	d81e      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ea8:	d010      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eaa:	e018      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005eac:	4b62      	ldr	r3, [pc, #392]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a61      	ldr	r2, [pc, #388]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fa73 	bl	80063ac <RCCEx_PLLSAI1_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eca:	e00c      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3320      	adds	r3, #32
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fb5e 	bl	8006594 <RCCEx_PLLSAI2_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005eec:	4b52      	ldr	r3, [pc, #328]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005efa:	494f      	ldr	r1, [pc, #316]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f02:	e001      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80a0 	beq.w	8006056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f16:	2300      	movs	r3, #0
 8005f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f1a:	4b47      	ldr	r3, [pc, #284]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f30:	4b41      	ldr	r3, [pc, #260]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	4a40      	ldr	r2, [pc, #256]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3a      	ldr	r2, [pc, #232]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f58:	f7fe f8c6 	bl	80040e8 <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f5e:	e009      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f60:	f7fe f8c2 	bl	80040e8 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d902      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	74fb      	strb	r3, [r7, #19]
        break;
 8005f72:	e005      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f74:	4b31      	ldr	r3, [pc, #196]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ef      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d15c      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f86:	4b2c      	ldr	r3, [pc, #176]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d019      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fa4:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fb0:	4b21      	ldr	r3, [pc, #132]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	4a20      	ldr	r2, [pc, #128]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fd0:	4a19      	ldr	r2, [pc, #100]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fe f881 	bl	80040e8 <HAL_GetTick>
 8005fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe8:	e00b      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fe f87d 	bl	80040e8 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d902      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8006000:	e006      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006002:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0ec      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006010:	7cfb      	ldrb	r3, [r7, #19]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006016:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006026:	4904      	ldr	r1, [pc, #16]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800602e:	e009      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006030:	7cfb      	ldrb	r3, [r7, #19]
 8006032:	74bb      	strb	r3, [r7, #18]
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000
 800603c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006044:	7c7b      	ldrb	r3, [r7, #17]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d105      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800604a:	4b9e      	ldr	r3, [pc, #632]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604e:	4a9d      	ldr	r2, [pc, #628]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006062:	4b98      	ldr	r3, [pc, #608]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006068:	f023 0203 	bic.w	r2, r3, #3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	4994      	ldr	r1, [pc, #592]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006084:	4b8f      	ldr	r3, [pc, #572]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608a:	f023 020c 	bic.w	r2, r3, #12
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006092:	498c      	ldr	r1, [pc, #560]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060a6:	4b87      	ldr	r3, [pc, #540]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	4983      	ldr	r1, [pc, #524]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c8:	4b7e      	ldr	r3, [pc, #504]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	497b      	ldr	r1, [pc, #492]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060ea:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f8:	4972      	ldr	r1, [pc, #456]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800610c:	4b6d      	ldr	r3, [pc, #436]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006112:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	496a      	ldr	r1, [pc, #424]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612e:	4b65      	ldr	r3, [pc, #404]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613c:	4961      	ldr	r1, [pc, #388]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006150:	4b5c      	ldr	r3, [pc, #368]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615e:	4959      	ldr	r1, [pc, #356]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006172:	4b54      	ldr	r3, [pc, #336]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006178:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006180:	4950      	ldr	r1, [pc, #320]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006194:	4b4b      	ldr	r3, [pc, #300]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	4948      	ldr	r1, [pc, #288]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061b6:	4b43      	ldr	r3, [pc, #268]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c4:	493f      	ldr	r1, [pc, #252]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d028      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061d8:	4b3a      	ldr	r3, [pc, #232]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e6:	4937      	ldr	r1, [pc, #220]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f6:	d106      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f8:	4b32      	ldr	r3, [pc, #200]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4a31      	ldr	r2, [pc, #196]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006202:	60d3      	str	r3, [r2, #12]
 8006204:	e011      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800620a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800620e:	d10c      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	2101      	movs	r1, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f8c8 	bl	80063ac <RCCEx_PLLSAI1_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006226:	7cfb      	ldrb	r3, [r7, #19]
 8006228:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d028      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006236:	4b23      	ldr	r3, [pc, #140]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006244:	491f      	ldr	r1, [pc, #124]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006254:	d106      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006256:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4a1a      	ldr	r2, [pc, #104]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006260:	60d3      	str	r3, [r2, #12]
 8006262:	e011      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800626c:	d10c      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3304      	adds	r3, #4
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f899 	bl	80063ac <RCCEx_PLLSAI1_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006284:	7cfb      	ldrb	r3, [r7, #19]
 8006286:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02b      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006294:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a2:	4908      	ldr	r1, [pc, #32]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062b2:	d109      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b4:	4b03      	ldr	r3, [pc, #12]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a02      	ldr	r2, [pc, #8]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062be:	60d3      	str	r3, [r2, #12]
 80062c0:	e014      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062c2:	bf00      	nop
 80062c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f867 	bl	80063ac <RCCEx_PLLSAI1_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02f      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062f8:	4b2b      	ldr	r3, [pc, #172]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006306:	4928      	ldr	r1, [pc, #160]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006316:	d10d      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f844 	bl	80063ac <RCCEx_PLLSAI1_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d014      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	74bb      	strb	r3, [r7, #18]
 8006332:	e011      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633c:	d10c      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3320      	adds	r3, #32
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f925 	bl	8006594 <RCCEx_PLLSAI2_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006364:	4b10      	ldr	r3, [pc, #64]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006372:	490d      	ldr	r1, [pc, #52]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006386:	4b08      	ldr	r3, [pc, #32]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006396:	4904      	ldr	r1, [pc, #16]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800639e:	7cbb      	ldrb	r3, [r7, #18]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40021000 	.word	0x40021000

080063ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063ba:	4b75      	ldr	r3, [pc, #468]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063c6:	4b72      	ldr	r3, [pc, #456]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0203 	and.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d10d      	bne.n	80063f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
       ||
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063de:	4b6c      	ldr	r3, [pc, #432]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
       ||
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d047      	beq.n	8006482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
 80063f6:	e044      	b.n	8006482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d018      	beq.n	8006432 <RCCEx_PLLSAI1_Config+0x86>
 8006400:	2b03      	cmp	r3, #3
 8006402:	d825      	bhi.n	8006450 <RCCEx_PLLSAI1_Config+0xa4>
 8006404:	2b01      	cmp	r3, #1
 8006406:	d002      	beq.n	800640e <RCCEx_PLLSAI1_Config+0x62>
 8006408:	2b02      	cmp	r3, #2
 800640a:	d009      	beq.n	8006420 <RCCEx_PLLSAI1_Config+0x74>
 800640c:	e020      	b.n	8006450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800640e:	4b60      	ldr	r3, [pc, #384]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11d      	bne.n	8006456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800641e:	e01a      	b.n	8006456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006420:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006428:	2b00      	cmp	r3, #0
 800642a:	d116      	bne.n	800645a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006430:	e013      	b.n	800645a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006432:	4b57      	ldr	r3, [pc, #348]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10f      	bne.n	800645e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800643e:	4b54      	ldr	r3, [pc, #336]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800644e:	e006      	b.n	800645e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e004      	b.n	8006460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800645e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10d      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006466:	4b4a      	ldr	r3, [pc, #296]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6819      	ldr	r1, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	430b      	orrs	r3, r1
 800647c:	4944      	ldr	r1, [pc, #272]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d17d      	bne.n	8006584 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006488:	4b41      	ldr	r3, [pc, #260]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a40      	ldr	r2, [pc, #256]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800648e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006494:	f7fd fe28 	bl	80040e8 <HAL_GetTick>
 8006498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800649a:	e009      	b.n	80064b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800649c:	f7fd fe24 	bl	80040e8 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d902      	bls.n	80064b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	73fb      	strb	r3, [r7, #15]
        break;
 80064ae:	e005      	b.n	80064bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064b0:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ef      	bne.n	800649c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d160      	bne.n	8006584 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d111      	bne.n	80064ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064c8:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6892      	ldr	r2, [r2, #8]
 80064d8:	0211      	lsls	r1, r2, #8
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68d2      	ldr	r2, [r2, #12]
 80064de:	0912      	lsrs	r2, r2, #4
 80064e0:	0452      	lsls	r2, r2, #17
 80064e2:	430a      	orrs	r2, r1
 80064e4:	492a      	ldr	r1, [pc, #168]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]
 80064ea:	e027      	b.n	800653c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d112      	bne.n	8006518 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f2:	4b27      	ldr	r3, [pc, #156]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80064fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	0211      	lsls	r1, r2, #8
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6912      	ldr	r2, [r2, #16]
 8006508:	0852      	lsrs	r2, r2, #1
 800650a:	3a01      	subs	r2, #1
 800650c:	0552      	lsls	r2, r2, #21
 800650e:	430a      	orrs	r2, r1
 8006510:	491f      	ldr	r1, [pc, #124]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006512:	4313      	orrs	r3, r2
 8006514:	610b      	str	r3, [r1, #16]
 8006516:	e011      	b.n	800653c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006518:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6892      	ldr	r2, [r2, #8]
 8006528:	0211      	lsls	r1, r2, #8
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6952      	ldr	r2, [r2, #20]
 800652e:	0852      	lsrs	r2, r2, #1
 8006530:	3a01      	subs	r2, #1
 8006532:	0652      	lsls	r2, r2, #25
 8006534:	430a      	orrs	r2, r1
 8006536:	4916      	ldr	r1, [pc, #88]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006538:	4313      	orrs	r3, r2
 800653a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800653c:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a13      	ldr	r2, [pc, #76]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006542:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fd fdce 	bl	80040e8 <HAL_GetTick>
 800654c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800654e:	e009      	b.n	8006564 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006550:	f7fd fdca 	bl	80040e8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d902      	bls.n	8006564 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	73fb      	strb	r3, [r7, #15]
          break;
 8006562:	e005      	b.n	8006570 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ef      	beq.n	8006550 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006576:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	4904      	ldr	r1, [pc, #16]	@ (8006590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006580:	4313      	orrs	r3, r2
 8006582:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000

08006594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065a2:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065ae:	4b67      	ldr	r3, [pc, #412]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0203 	and.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d10d      	bne.n	80065da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
       ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065c6:	4b61      	ldr	r3, [pc, #388]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
       ||
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d047      	beq.n	800666a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
 80065de:	e044      	b.n	800666a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d018      	beq.n	800661a <RCCEx_PLLSAI2_Config+0x86>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d825      	bhi.n	8006638 <RCCEx_PLLSAI2_Config+0xa4>
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <RCCEx_PLLSAI2_Config+0x62>
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d009      	beq.n	8006608 <RCCEx_PLLSAI2_Config+0x74>
 80065f4:	e020      	b.n	8006638 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065f6:	4b55      	ldr	r3, [pc, #340]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d11d      	bne.n	800663e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006606:	e01a      	b.n	800663e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006608:	4b50      	ldr	r3, [pc, #320]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d116      	bne.n	8006642 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006618:	e013      	b.n	8006642 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800661a:	4b4c      	ldr	r3, [pc, #304]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10f      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006626:	4b49      	ldr	r3, [pc, #292]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006636:	e006      	b.n	8006646 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
      break;
 800663c:	e004      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800663e:	bf00      	nop
 8006640:	e002      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006642:	bf00      	nop
 8006644:	e000      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006646:	bf00      	nop
    }

    if(status == HAL_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10d      	bne.n	800666a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800664e:	4b3f      	ldr	r3, [pc, #252]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	3b01      	subs	r3, #1
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	430b      	orrs	r3, r1
 8006664:	4939      	ldr	r1, [pc, #228]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006666:	4313      	orrs	r3, r2
 8006668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d167      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006670:	4b36      	ldr	r3, [pc, #216]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a35      	ldr	r2, [pc, #212]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667c:	f7fd fd34 	bl	80040e8 <HAL_GetTick>
 8006680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006682:	e009      	b.n	8006698 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006684:	f7fd fd30 	bl	80040e8 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d902      	bls.n	8006698 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	73fb      	strb	r3, [r7, #15]
        break;
 8006696:	e005      	b.n	80066a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006698:	4b2c      	ldr	r3, [pc, #176]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1ef      	bne.n	8006684 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d14a      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d111      	bne.n	80066d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066b0:	4b26      	ldr	r3, [pc, #152]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80066b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6892      	ldr	r2, [r2, #8]
 80066c0:	0211      	lsls	r1, r2, #8
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68d2      	ldr	r2, [r2, #12]
 80066c6:	0912      	lsrs	r2, r2, #4
 80066c8:	0452      	lsls	r2, r2, #17
 80066ca:	430a      	orrs	r2, r1
 80066cc:	491f      	ldr	r1, [pc, #124]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	614b      	str	r3, [r1, #20]
 80066d2:	e011      	b.n	80066f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066d4:	4b1d      	ldr	r3, [pc, #116]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80066dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6892      	ldr	r2, [r2, #8]
 80066e4:	0211      	lsls	r1, r2, #8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6912      	ldr	r2, [r2, #16]
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0652      	lsls	r2, r2, #25
 80066f0:	430a      	orrs	r2, r1
 80066f2:	4916      	ldr	r1, [pc, #88]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066f8:	4b14      	ldr	r3, [pc, #80]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a13      	ldr	r2, [pc, #76]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fd fcf0 	bl	80040e8 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800670a:	e009      	b.n	8006720 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800670c:	f7fd fcec 	bl	80040e8 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d902      	bls.n	8006720 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	73fb      	strb	r3, [r7, #15]
          break;
 800671e:	e005      	b.n	800672c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ef      	beq.n	800670c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006732:	4b06      	ldr	r3, [pc, #24]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	4904      	ldr	r1, [pc, #16]	@ (800674c <RCCEx_PLLSAI2_Config+0x1b8>)
 800673c:	4313      	orrs	r3, r2
 800673e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000

08006750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e049      	b.n	80067f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fd fb02 	bl	8003d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fade 	bl	8006d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e047      	b.n	80068a8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	@ (80068b4 <HAL_TIM_Base_Start+0xb4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01d      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006832:	d018      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	@ (80068b8 <HAL_TIM_Base_Start+0xb8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <HAL_TIM_Base_Start+0xbc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	@ (80068c0 <HAL_TIM_Base_Start+0xc0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	@ (80068c4 <HAL_TIM_Base_Start+0xc4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <HAL_TIM_Base_Start+0xc8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d115      	bne.n	8006892 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	4b17      	ldr	r3, [pc, #92]	@ (80068cc <HAL_TIM_Base_Start+0xcc>)
 800686e:	4013      	ands	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d015      	beq.n	80068a4 <HAL_TIM_Base_Start+0xa4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800687e:	d011      	beq.n	80068a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	e008      	b.n	80068a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e049      	b.n	8006976 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f841 	bl	800697e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f000 fa1e 	bl	8006d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e0ff      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b14      	cmp	r3, #20
 80069be:	f200 80f0 	bhi.w	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069c2:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006ba3 	.word	0x08006ba3
 80069d0:	08006ba3 	.word	0x08006ba3
 80069d4:	08006ba3 	.word	0x08006ba3
 80069d8:	08006a5d 	.word	0x08006a5d
 80069dc:	08006ba3 	.word	0x08006ba3
 80069e0:	08006ba3 	.word	0x08006ba3
 80069e4:	08006ba3 	.word	0x08006ba3
 80069e8:	08006a9f 	.word	0x08006a9f
 80069ec:	08006ba3 	.word	0x08006ba3
 80069f0:	08006ba3 	.word	0x08006ba3
 80069f4:	08006ba3 	.word	0x08006ba3
 80069f8:	08006adf 	.word	0x08006adf
 80069fc:	08006ba3 	.word	0x08006ba3
 8006a00:	08006ba3 	.word	0x08006ba3
 8006a04:	08006ba3 	.word	0x08006ba3
 8006a08:	08006b21 	.word	0x08006b21
 8006a0c:	08006ba3 	.word	0x08006ba3
 8006a10:	08006ba3 	.word	0x08006ba3
 8006a14:	08006ba3 	.word	0x08006ba3
 8006a18:	08006b61 	.word	0x08006b61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fa3a 	bl	8006e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0208 	orr.w	r2, r2, #8
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0204 	bic.w	r2, r2, #4
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	619a      	str	r2, [r3, #24]
      break;
 8006a5a:	e0a5      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 faaa 	bl	8006fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6999      	ldr	r1, [r3, #24]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	021a      	lsls	r2, r3, #8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	619a      	str	r2, [r3, #24]
      break;
 8006a9c:	e084      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fb13 	bl	80070d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0208 	orr.w	r2, r2, #8
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0204 	bic.w	r2, r2, #4
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	61da      	str	r2, [r3, #28]
      break;
 8006adc:	e064      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fb7b 	bl	80071e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69da      	ldr	r2, [r3, #28]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	61da      	str	r2, [r3, #28]
      break;
 8006b1e:	e043      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fbc4 	bl	80072b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0208 	orr.w	r2, r2, #8
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0204 	bic.w	r2, r2, #4
 8006b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b5e:	e023      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc08 	bl	800737c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ba0:	e002      	b.n	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e0b6      	b.n	8006d46 <HAL_TIM_ConfigClockSource+0x18a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c14:	d03e      	beq.n	8006c94 <HAL_TIM_ConfigClockSource+0xd8>
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c1a:	f200 8087 	bhi.w	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c22:	f000 8086 	beq.w	8006d32 <HAL_TIM_ConfigClockSource+0x176>
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c2a:	d87f      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c2c:	2b70      	cmp	r3, #112	@ 0x70
 8006c2e:	d01a      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0xaa>
 8006c30:	2b70      	cmp	r3, #112	@ 0x70
 8006c32:	d87b      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c34:	2b60      	cmp	r3, #96	@ 0x60
 8006c36:	d050      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x11e>
 8006c38:	2b60      	cmp	r3, #96	@ 0x60
 8006c3a:	d877      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c3c:	2b50      	cmp	r3, #80	@ 0x50
 8006c3e:	d03c      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0xfe>
 8006c40:	2b50      	cmp	r3, #80	@ 0x50
 8006c42:	d873      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	d058      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x13e>
 8006c48:	2b40      	cmp	r3, #64	@ 0x40
 8006c4a:	d86f      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c4c:	2b30      	cmp	r3, #48	@ 0x30
 8006c4e:	d064      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x15e>
 8006c50:	2b30      	cmp	r3, #48	@ 0x30
 8006c52:	d86b      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d060      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x15e>
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d867      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d05c      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x15e>
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d05a      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x15e>
 8006c64:	e062      	b.n	8006d2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c76:	f000 fc61 	bl	800753c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	609a      	str	r2, [r3, #8]
      break;
 8006c92:	e04f      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ca4:	f000 fc4a 	bl	800753c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cb6:	609a      	str	r2, [r3, #8]
      break;
 8006cb8:	e03c      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fbbe 	bl	8007448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2150      	movs	r1, #80	@ 0x50
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fc17 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e02c      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f000 fbdd 	bl	80074a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2160      	movs	r1, #96	@ 0x60
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc07 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006cf8:	e01c      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d06:	461a      	mov	r2, r3
 8006d08:	f000 fb9e 	bl	8007448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2140      	movs	r1, #64	@ 0x40
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fbf7 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006d18:	e00c      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f000 fbee 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006d2a:	e003      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e000      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a46      	ldr	r2, [pc, #280]	@ (8006e7c <TIM_Base_SetConfig+0x12c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6e:	d00f      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a43      	ldr	r2, [pc, #268]	@ (8006e80 <TIM_Base_SetConfig+0x130>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a42      	ldr	r2, [pc, #264]	@ (8006e84 <TIM_Base_SetConfig+0x134>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a41      	ldr	r2, [pc, #260]	@ (8006e88 <TIM_Base_SetConfig+0x138>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a40      	ldr	r2, [pc, #256]	@ (8006e8c <TIM_Base_SetConfig+0x13c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d108      	bne.n	8006da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <TIM_Base_SetConfig+0x12c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a32      	ldr	r2, [pc, #200]	@ (8006e80 <TIM_Base_SetConfig+0x130>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a31      	ldr	r2, [pc, #196]	@ (8006e84 <TIM_Base_SetConfig+0x134>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a30      	ldr	r2, [pc, #192]	@ (8006e88 <TIM_Base_SetConfig+0x138>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8006e8c <TIM_Base_SetConfig+0x13c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006e90 <TIM_Base_SetConfig+0x140>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8006e94 <TIM_Base_SetConfig+0x144>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e98 <TIM_Base_SetConfig+0x148>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a16      	ldr	r2, [pc, #88]	@ (8006e7c <TIM_Base_SetConfig+0x12c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <TIM_Base_SetConfig+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <TIM_Base_SetConfig+0x140>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <TIM_Base_SetConfig+0x144>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a15      	ldr	r2, [pc, #84]	@ (8006e98 <TIM_Base_SetConfig+0x148>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d103      	bne.n	8006e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d105      	bne.n	8006e6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f023 0201 	bic.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40013400 	.word	0x40013400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40014400 	.word	0x40014400
 8006e98:	40014800 	.word	0x40014800

08006e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f023 0201 	bic.w	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0302 	bic.w	r3, r3, #2
 8006ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa8 <TIM_OC1_SetConfig+0x10c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00f      	beq.n	8006f1c <TIM_OC1_SetConfig+0x80>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a2b      	ldr	r2, [pc, #172]	@ (8006fac <TIM_OC1_SetConfig+0x110>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_OC1_SetConfig+0x80>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb0 <TIM_OC1_SetConfig+0x114>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_OC1_SetConfig+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a29      	ldr	r2, [pc, #164]	@ (8006fb4 <TIM_OC1_SetConfig+0x118>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_OC1_SetConfig+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a28      	ldr	r2, [pc, #160]	@ (8006fb8 <TIM_OC1_SetConfig+0x11c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10c      	bne.n	8006f36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0308 	bic.w	r3, r3, #8
 8006f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa8 <TIM_OC1_SetConfig+0x10c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00f      	beq.n	8006f5e <TIM_OC1_SetConfig+0xc2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1a      	ldr	r2, [pc, #104]	@ (8006fac <TIM_OC1_SetConfig+0x110>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC1_SetConfig+0xc2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a19      	ldr	r2, [pc, #100]	@ (8006fb0 <TIM_OC1_SetConfig+0x114>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC1_SetConfig+0xc2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a18      	ldr	r2, [pc, #96]	@ (8006fb4 <TIM_OC1_SetConfig+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC1_SetConfig+0xc2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <TIM_OC1_SetConfig+0x11c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d111      	bne.n	8006f82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40013400 	.word	0x40013400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40014400 	.word	0x40014400
 8006fb8:	40014800 	.word	0x40014800

08006fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f023 0210 	bic.w	r2, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0320 	bic.w	r3, r3, #32
 800700a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a28      	ldr	r2, [pc, #160]	@ (80070bc <TIM_OC2_SetConfig+0x100>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_OC2_SetConfig+0x6c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a27      	ldr	r2, [pc, #156]	@ (80070c0 <TIM_OC2_SetConfig+0x104>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1d      	ldr	r2, [pc, #116]	@ (80070bc <TIM_OC2_SetConfig+0x100>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00f      	beq.n	800706c <TIM_OC2_SetConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <TIM_OC2_SetConfig+0x104>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_OC2_SetConfig+0xb0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1b      	ldr	r2, [pc, #108]	@ (80070c4 <TIM_OC2_SetConfig+0x108>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_OC2_SetConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1a      	ldr	r2, [pc, #104]	@ (80070c8 <TIM_OC2_SetConfig+0x10c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC2_SetConfig+0xb0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a19      	ldr	r2, [pc, #100]	@ (80070cc <TIM_OC2_SetConfig+0x110>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d113      	bne.n	8007094 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800707a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800711c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a27      	ldr	r2, [pc, #156]	@ (80071cc <TIM_OC3_SetConfig+0xfc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC3_SetConfig+0x6a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a26      	ldr	r2, [pc, #152]	@ (80071d0 <TIM_OC3_SetConfig+0x100>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d10d      	bne.n	8007156 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1c      	ldr	r2, [pc, #112]	@ (80071cc <TIM_OC3_SetConfig+0xfc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <TIM_OC3_SetConfig+0xae>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <TIM_OC3_SetConfig+0x100>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00b      	beq.n	800717e <TIM_OC3_SetConfig+0xae>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1a      	ldr	r2, [pc, #104]	@ (80071d4 <TIM_OC3_SetConfig+0x104>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <TIM_OC3_SetConfig+0xae>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <TIM_OC3_SetConfig+0x108>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_OC3_SetConfig+0xae>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <TIM_OC3_SetConfig+0x10c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d113      	bne.n	80071a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800718c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400
 80071dc:	40014800 	.word	0x40014800

080071e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800721a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800722e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	031b      	lsls	r3, r3, #12
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a18      	ldr	r2, [pc, #96]	@ (80072a0 <TIM_OC4_SetConfig+0xc0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00f      	beq.n	8007264 <TIM_OC4_SetConfig+0x84>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a17      	ldr	r2, [pc, #92]	@ (80072a4 <TIM_OC4_SetConfig+0xc4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00b      	beq.n	8007264 <TIM_OC4_SetConfig+0x84>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a16      	ldr	r2, [pc, #88]	@ (80072a8 <TIM_OC4_SetConfig+0xc8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_OC4_SetConfig+0x84>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a15      	ldr	r2, [pc, #84]	@ (80072ac <TIM_OC4_SetConfig+0xcc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC4_SetConfig+0x84>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a14      	ldr	r2, [pc, #80]	@ (80072b0 <TIM_OC4_SetConfig+0xd0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d109      	bne.n	8007278 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800726a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	019b      	lsls	r3, r3, #6
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40013400 	.word	0x40013400
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800

080072b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <TIM_OC5_SetConfig+0xb4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00f      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a16      	ldr	r2, [pc, #88]	@ (800736c <TIM_OC5_SetConfig+0xb8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00b      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a15      	ldr	r2, [pc, #84]	@ (8007370 <TIM_OC5_SetConfig+0xbc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d007      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <TIM_OC5_SetConfig+0xc0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a13      	ldr	r2, [pc, #76]	@ (8007378 <TIM_OC5_SetConfig+0xc4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d109      	bne.n	8007342 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	621a      	str	r2, [r3, #32]
}
 800735c:	bf00      	nop
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	051b      	lsls	r3, r3, #20
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a18      	ldr	r2, [pc, #96]	@ (8007434 <TIM_OC6_SetConfig+0xb8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a17      	ldr	r2, [pc, #92]	@ (8007438 <TIM_OC6_SetConfig+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a16      	ldr	r2, [pc, #88]	@ (800743c <TIM_OC6_SetConfig+0xc0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <TIM_OC6_SetConfig+0xc4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a14      	ldr	r2, [pc, #80]	@ (8007444 <TIM_OC6_SetConfig+0xc8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d109      	bne.n	800740c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800

08007448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 030a 	bic.w	r3, r3, #10
 8007484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f023 0210 	bic.w	r2, r3, #16
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800751c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	f043 0307 	orr.w	r3, r3, #7
 8007528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	431a      	orrs	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007590:	2302      	movs	r3, #2
 8007592:	e068      	b.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d01d      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007606:	d018      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1b      	ldr	r2, [pc, #108]	@ (800767c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1a      	ldr	r2, [pc, #104]	@ (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00e      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a18      	ldr	r2, [pc, #96]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a13      	ldr	r2, [pc, #76]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10c      	bne.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4313      	orrs	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40013400 	.word	0x40013400
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40014000 	.word	0x40014000

0800768c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e040      	b.n	8007720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc fbce 	bl	8003e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2224      	movs	r2, #36	@ 0x24
 80076b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fae0 	bl	8007c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f825 	bl	8007728 <UART_SetConfig>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e01b      	b.n	8007720 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb5f 	bl	8007ddc <UART_CheckIdleState>
 800771e:	4603      	mov	r3, r0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800772c:	b08a      	sub	sp, #40	@ 0x28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	431a      	orrs	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	4313      	orrs	r3, r2
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4ba4      	ldr	r3, [pc, #656]	@ (80079e8 <UART_SetConfig+0x2c0>)
 8007758:	4013      	ands	r3, r2
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007760:	430b      	orrs	r3, r1
 8007762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a99      	ldr	r2, [pc, #612]	@ (80079ec <UART_SetConfig+0x2c4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007790:	4313      	orrs	r3, r2
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a4:	430a      	orrs	r2, r1
 80077a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a90      	ldr	r2, [pc, #576]	@ (80079f0 <UART_SetConfig+0x2c8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d126      	bne.n	8007800 <UART_SetConfig+0xd8>
 80077b2:	4b90      	ldr	r3, [pc, #576]	@ (80079f4 <UART_SetConfig+0x2cc>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d81b      	bhi.n	80077f8 <UART_SetConfig+0xd0>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <UART_SetConfig+0xa0>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077e9 	.word	0x080077e9
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077de:	e116      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077e0:	2302      	movs	r3, #2
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e6:	e112      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ee:	e10e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077f0:	2308      	movs	r3, #8
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f6:	e10a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fe:	e106      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7c      	ldr	r2, [pc, #496]	@ (80079f8 <UART_SetConfig+0x2d0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d138      	bne.n	800787c <UART_SetConfig+0x154>
 800780a:	4b7a      	ldr	r3, [pc, #488]	@ (80079f4 <UART_SetConfig+0x2cc>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b0c      	cmp	r3, #12
 8007816:	d82d      	bhi.n	8007874 <UART_SetConfig+0x14c>
 8007818:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <UART_SetConfig+0xf8>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007855 	.word	0x08007855
 8007824:	08007875 	.word	0x08007875
 8007828:	08007875 	.word	0x08007875
 800782c:	08007875 	.word	0x08007875
 8007830:	08007865 	.word	0x08007865
 8007834:	08007875 	.word	0x08007875
 8007838:	08007875 	.word	0x08007875
 800783c:	08007875 	.word	0x08007875
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007875 	.word	0x08007875
 8007848:	08007875 	.word	0x08007875
 800784c:	08007875 	.word	0x08007875
 8007850:	0800786d 	.word	0x0800786d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785a:	e0d8      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800785c:	2302      	movs	r3, #2
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007862:	e0d4      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007864:	2304      	movs	r3, #4
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786a:	e0d0      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800786c:	2308      	movs	r3, #8
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007872:	e0cc      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787a:	e0c8      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a5e      	ldr	r2, [pc, #376]	@ (80079fc <UART_SetConfig+0x2d4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d125      	bne.n	80078d2 <UART_SetConfig+0x1aa>
 8007886:	4b5b      	ldr	r3, [pc, #364]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d016      	beq.n	80078c2 <UART_SetConfig+0x19a>
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d818      	bhi.n	80078ca <UART_SetConfig+0x1a2>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d00a      	beq.n	80078b2 <UART_SetConfig+0x18a>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d814      	bhi.n	80078ca <UART_SetConfig+0x1a2>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <UART_SetConfig+0x182>
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d008      	beq.n	80078ba <UART_SetConfig+0x192>
 80078a8:	e00f      	b.n	80078ca <UART_SetConfig+0x1a2>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b0:	e0ad      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078b2:	2302      	movs	r3, #2
 80078b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b8:	e0a9      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078ba:	2304      	movs	r3, #4
 80078bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c0:	e0a5      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078c2:	2308      	movs	r3, #8
 80078c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c8:	e0a1      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078ca:	2310      	movs	r3, #16
 80078cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d0:	e09d      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007a00 <UART_SetConfig+0x2d8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d125      	bne.n	8007928 <UART_SetConfig+0x200>
 80078dc:	4b45      	ldr	r3, [pc, #276]	@ (80079f4 <UART_SetConfig+0x2cc>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80078e8:	d016      	beq.n	8007918 <UART_SetConfig+0x1f0>
 80078ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80078ec:	d818      	bhi.n	8007920 <UART_SetConfig+0x1f8>
 80078ee:	2b80      	cmp	r3, #128	@ 0x80
 80078f0:	d00a      	beq.n	8007908 <UART_SetConfig+0x1e0>
 80078f2:	2b80      	cmp	r3, #128	@ 0x80
 80078f4:	d814      	bhi.n	8007920 <UART_SetConfig+0x1f8>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <UART_SetConfig+0x1d8>
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	d008      	beq.n	8007910 <UART_SetConfig+0x1e8>
 80078fe:	e00f      	b.n	8007920 <UART_SetConfig+0x1f8>
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007906:	e082      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007908:	2302      	movs	r3, #2
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800790e:	e07e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e07a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791e:	e076      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e072      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <UART_SetConfig+0x2dc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d12a      	bne.n	8007988 <UART_SetConfig+0x260>
 8007932:	4b30      	ldr	r3, [pc, #192]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007940:	d01a      	beq.n	8007978 <UART_SetConfig+0x250>
 8007942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007946:	d81b      	bhi.n	8007980 <UART_SetConfig+0x258>
 8007948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794c:	d00c      	beq.n	8007968 <UART_SetConfig+0x240>
 800794e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007952:	d815      	bhi.n	8007980 <UART_SetConfig+0x258>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <UART_SetConfig+0x238>
 8007958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800795c:	d008      	beq.n	8007970 <UART_SetConfig+0x248>
 800795e:	e00f      	b.n	8007980 <UART_SetConfig+0x258>
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007966:	e052      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007968:	2302      	movs	r3, #2
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796e:	e04e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007970:	2304      	movs	r3, #4
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007976:	e04a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007978:	2308      	movs	r3, #8
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797e:	e046      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007980:	2310      	movs	r3, #16
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007986:	e042      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a17      	ldr	r2, [pc, #92]	@ (80079ec <UART_SetConfig+0x2c4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d13a      	bne.n	8007a08 <UART_SetConfig+0x2e0>
 8007992:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800799c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079a0:	d01a      	beq.n	80079d8 <UART_SetConfig+0x2b0>
 80079a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079a6:	d81b      	bhi.n	80079e0 <UART_SetConfig+0x2b8>
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ac:	d00c      	beq.n	80079c8 <UART_SetConfig+0x2a0>
 80079ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079b2:	d815      	bhi.n	80079e0 <UART_SetConfig+0x2b8>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <UART_SetConfig+0x298>
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	d008      	beq.n	80079d0 <UART_SetConfig+0x2a8>
 80079be:	e00f      	b.n	80079e0 <UART_SetConfig+0x2b8>
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c6:	e022      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079c8:	2302      	movs	r3, #2
 80079ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ce:	e01e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d6:	e01a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079de:	e016      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e012      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079e8:	efff69f3 	.word	0xefff69f3
 80079ec:	40008000 	.word	0x40008000
 80079f0:	40013800 	.word	0x40013800
 80079f4:	40021000 	.word	0x40021000
 80079f8:	40004400 	.word	0x40004400
 80079fc:	40004800 	.word	0x40004800
 8007a00:	40004c00 	.word	0x40004c00
 8007a04:	40005000 	.word	0x40005000
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a9f      	ldr	r2, [pc, #636]	@ (8007c90 <UART_SetConfig+0x568>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d17a      	bne.n	8007b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d824      	bhi.n	8007a6a <UART_SetConfig+0x342>
 8007a20:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x300>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a6b 	.word	0x08007a6b
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a6b 	.word	0x08007a6b
 8007a38:	08007a5b 	.word	0x08007a5b
 8007a3c:	08007a6b 	.word	0x08007a6b
 8007a40:	08007a6b 	.word	0x08007a6b
 8007a44:	08007a6b 	.word	0x08007a6b
 8007a48:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fe f938 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8007a50:	61f8      	str	r0, [r7, #28]
        break;
 8007a52:	e010      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b8f      	ldr	r3, [pc, #572]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007a56:	61fb      	str	r3, [r7, #28]
        break;
 8007a58:	e00d      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fe f899 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8007a5e:	61f8      	str	r0, [r7, #28]
        break;
 8007a60:	e009      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a66:	61fb      	str	r3, [r7, #28]
        break;
 8007a68:	e005      	b.n	8007a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80fb 	beq.w	8007c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	4413      	add	r3, r2
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d305      	bcc.n	8007a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d903      	bls.n	8007aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007aa0:	e0e8      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	022b      	lsls	r3, r5, #8
 8007ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ab8:	0222      	lsls	r2, r4, #8
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	6849      	ldr	r1, [r1, #4]
 8007abe:	0849      	lsrs	r1, r1, #1
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4688      	mov	r8, r1
 8007ac4:	4681      	mov	r9, r0
 8007ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8007aca:	eb43 0b09 	adc.w	fp, r3, r9
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	f7f9 f810 	bl	8000b04 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af2:	d308      	bcc.n	8007b06 <UART_SetConfig+0x3de>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007afa:	d204      	bcs.n	8007b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e0b6      	b.n	8007c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b0c:	e0b2      	b.n	8007c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b16:	d15e      	bne.n	8007bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d828      	bhi.n	8007b72 <UART_SetConfig+0x44a>
 8007b20:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <UART_SetConfig+0x400>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b4d 	.word	0x08007b4d
 8007b2c:	08007b55 	.word	0x08007b55
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	08007b73 	.word	0x08007b73
 8007b38:	08007b63 	.word	0x08007b63
 8007b3c:	08007b73 	.word	0x08007b73
 8007b40:	08007b73 	.word	0x08007b73
 8007b44:	08007b73 	.word	0x08007b73
 8007b48:	08007b6b 	.word	0x08007b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b4c:	f7fe f8b8 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8007b50:	61f8      	str	r0, [r7, #28]
        break;
 8007b52:	e014      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b54:	f7fe f8ca 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 8007b58:	61f8      	str	r0, [r7, #28]
        break;
 8007b5a:	e010      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007b5e:	61fb      	str	r3, [r7, #28]
        break;
 8007b60:	e00d      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b62:	f7fe f815 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8007b66:	61f8      	str	r0, [r7, #28]
        break;
 8007b68:	e009      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6e:	61fb      	str	r3, [r7, #28]
        break;
 8007b70:	e005      	b.n	8007b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d077      	beq.n	8007c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005a      	lsls	r2, r3, #1
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	085b      	lsrs	r3, r3, #1
 8007b8e:	441a      	add	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d916      	bls.n	8007bce <UART_SetConfig+0x4a6>
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba6:	d212      	bcs.n	8007bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f023 030f 	bic.w	r3, r3, #15
 8007bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	8afa      	ldrh	r2, [r7, #22]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e052      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bd4:	e04e      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d827      	bhi.n	8007c2e <UART_SetConfig+0x506>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x4bc>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c19 	.word	0x08007c19
 8007bf0:	08007c2f 	.word	0x08007c2f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c2f 	.word	0x08007c2f
 8007bfc:	08007c2f 	.word	0x08007c2f
 8007c00:	08007c2f 	.word	0x08007c2f
 8007c04:	08007c27 	.word	0x08007c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fe f85a 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	61f8      	str	r0, [r7, #28]
        break;
 8007c0e:	e014      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fe f86c 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 8007c14:	61f8      	str	r0, [r7, #28]
        break;
 8007c16:	e010      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007c1a:	61fb      	str	r3, [r7, #28]
        break;
 8007c1c:	e00d      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1e:	f7fd ffb7 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8007c22:	61f8      	str	r0, [r7, #28]
        break;
 8007c24:	e009      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c2a:	61fb      	str	r3, [r7, #28]
        break;
 8007c2c:	e005      	b.n	8007c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c38:	bf00      	nop
    }

    if (pclk != 0U)
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	085a      	lsrs	r2, r3, #1
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	441a      	add	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d909      	bls.n	8007c6e <UART_SetConfig+0x546>
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c60:	d205      	bcs.n	8007c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	e002      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3728      	adds	r7, #40	@ 0x28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c8e:	bf00      	nop
 8007c90:	40008000 	.word	0x40008000
 8007c94:	00f42400 	.word	0x00f42400

08007c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01a      	beq.n	8007dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d96:	d10a      	bne.n	8007dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b098      	sub	sp, #96	@ 0x60
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dec:	f7fc f97c 	bl	80040e8 <HAL_GetTick>
 8007df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d12e      	bne.n	8007e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f88c 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d021      	beq.n	8007e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e062      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d149      	bne.n	8007f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e74:	2200      	movs	r2, #0
 8007e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f856 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d03c      	beq.n	8007f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	623b      	str	r3, [r7, #32]
   return(result);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e011      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3758      	adds	r7, #88	@ 0x58
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3c:	e04f      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d04b      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f46:	f7fc f8cf 	bl	80040e8 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e04e      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d037      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d034      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d031      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d110      	bne.n	8007faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f838 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e029      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb8:	d111      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f81e 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e00f      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d0a0      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008006:	b480      	push	{r7}
 8008008:	b095      	sub	sp, #84	@ 0x54
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800802c:	643b      	str	r3, [r7, #64]	@ 0x40
 800802e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008078:	2b01      	cmp	r3, #1
 800807a:	d118      	bne.n	80080ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60bb      	str	r3, [r7, #8]
   return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	647b      	str	r3, [r7, #68]	@ 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	613b      	str	r3, [r7, #16]
   return(result);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080c2:	bf00      	nop
 80080c4:	3754      	adds	r7, #84	@ 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <memset>:
 80080ce:	4402      	add	r2, r0
 80080d0:	4603      	mov	r3, r0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d100      	bne.n	80080d8 <memset+0xa>
 80080d6:	4770      	bx	lr
 80080d8:	f803 1b01 	strb.w	r1, [r3], #1
 80080dc:	e7f9      	b.n	80080d2 <memset+0x4>
	...

080080e0 <__libc_init_array>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008118 <__libc_init_array+0x38>)
 80080e4:	4c0d      	ldr	r4, [pc, #52]	@ (800811c <__libc_init_array+0x3c>)
 80080e6:	1b64      	subs	r4, r4, r5
 80080e8:	10a4      	asrs	r4, r4, #2
 80080ea:	2600      	movs	r6, #0
 80080ec:	42a6      	cmp	r6, r4
 80080ee:	d109      	bne.n	8008104 <__libc_init_array+0x24>
 80080f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008120 <__libc_init_array+0x40>)
 80080f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008124 <__libc_init_array+0x44>)
 80080f4:	f001 f8ac 	bl	8009250 <_init>
 80080f8:	1b64      	subs	r4, r4, r5
 80080fa:	10a4      	asrs	r4, r4, #2
 80080fc:	2600      	movs	r6, #0
 80080fe:	42a6      	cmp	r6, r4
 8008100:	d105      	bne.n	800810e <__libc_init_array+0x2e>
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	f855 3b04 	ldr.w	r3, [r5], #4
 8008108:	4798      	blx	r3
 800810a:	3601      	adds	r6, #1
 800810c:	e7ee      	b.n	80080ec <__libc_init_array+0xc>
 800810e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008112:	4798      	blx	r3
 8008114:	3601      	adds	r6, #1
 8008116:	e7f2      	b.n	80080fe <__libc_init_array+0x1e>
 8008118:	0800e490 	.word	0x0800e490
 800811c:	0800e490 	.word	0x0800e490
 8008120:	0800e490 	.word	0x0800e490
 8008124:	0800e494 	.word	0x0800e494

08008128 <memcpy>:
 8008128:	440a      	add	r2, r1
 800812a:	4291      	cmp	r1, r2
 800812c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008130:	d100      	bne.n	8008134 <memcpy+0xc>
 8008132:	4770      	bx	lr
 8008134:	b510      	push	{r4, lr}
 8008136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800813a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813e:	4291      	cmp	r1, r2
 8008140:	d1f9      	bne.n	8008136 <memcpy+0xe>
 8008142:	bd10      	pop	{r4, pc}
 8008144:	0000      	movs	r0, r0
	...

08008148 <cos>:
 8008148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800814a:	ec53 2b10 	vmov	r2, r3, d0
 800814e:	4826      	ldr	r0, [pc, #152]	@ (80081e8 <cos+0xa0>)
 8008150:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008154:	4281      	cmp	r1, r0
 8008156:	d806      	bhi.n	8008166 <cos+0x1e>
 8008158:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80081e0 <cos+0x98>
 800815c:	b005      	add	sp, #20
 800815e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008162:	f000 b899 	b.w	8008298 <__kernel_cos>
 8008166:	4821      	ldr	r0, [pc, #132]	@ (80081ec <cos+0xa4>)
 8008168:	4281      	cmp	r1, r0
 800816a:	d908      	bls.n	800817e <cos+0x36>
 800816c:	4610      	mov	r0, r2
 800816e:	4619      	mov	r1, r3
 8008170:	f7f8 f82e 	bl	80001d0 <__aeabi_dsub>
 8008174:	ec41 0b10 	vmov	d0, r0, r1
 8008178:	b005      	add	sp, #20
 800817a:	f85d fb04 	ldr.w	pc, [sp], #4
 800817e:	4668      	mov	r0, sp
 8008180:	f000 fa0e 	bl	80085a0 <__ieee754_rem_pio2>
 8008184:	f000 0003 	and.w	r0, r0, #3
 8008188:	2801      	cmp	r0, #1
 800818a:	d00b      	beq.n	80081a4 <cos+0x5c>
 800818c:	2802      	cmp	r0, #2
 800818e:	d015      	beq.n	80081bc <cos+0x74>
 8008190:	b9d8      	cbnz	r0, 80081ca <cos+0x82>
 8008192:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008196:	ed9d 0b00 	vldr	d0, [sp]
 800819a:	f000 f87d 	bl	8008298 <__kernel_cos>
 800819e:	ec51 0b10 	vmov	r0, r1, d0
 80081a2:	e7e7      	b.n	8008174 <cos+0x2c>
 80081a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081a8:	ed9d 0b00 	vldr	d0, [sp]
 80081ac:	f000 f93c 	bl	8008428 <__kernel_sin>
 80081b0:	ec53 2b10 	vmov	r2, r3, d0
 80081b4:	4610      	mov	r0, r2
 80081b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80081ba:	e7db      	b.n	8008174 <cos+0x2c>
 80081bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081c0:	ed9d 0b00 	vldr	d0, [sp]
 80081c4:	f000 f868 	bl	8008298 <__kernel_cos>
 80081c8:	e7f2      	b.n	80081b0 <cos+0x68>
 80081ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081ce:	ed9d 0b00 	vldr	d0, [sp]
 80081d2:	2001      	movs	r0, #1
 80081d4:	f000 f928 	bl	8008428 <__kernel_sin>
 80081d8:	e7e1      	b.n	800819e <cos+0x56>
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w
	...
 80081e8:	3fe921fb 	.word	0x3fe921fb
 80081ec:	7fefffff 	.word	0x7fefffff

080081f0 <sin>:
 80081f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081f2:	ec53 2b10 	vmov	r2, r3, d0
 80081f6:	4826      	ldr	r0, [pc, #152]	@ (8008290 <sin+0xa0>)
 80081f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081fc:	4281      	cmp	r1, r0
 80081fe:	d807      	bhi.n	8008210 <sin+0x20>
 8008200:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008288 <sin+0x98>
 8008204:	2000      	movs	r0, #0
 8008206:	b005      	add	sp, #20
 8008208:	f85d eb04 	ldr.w	lr, [sp], #4
 800820c:	f000 b90c 	b.w	8008428 <__kernel_sin>
 8008210:	4820      	ldr	r0, [pc, #128]	@ (8008294 <sin+0xa4>)
 8008212:	4281      	cmp	r1, r0
 8008214:	d908      	bls.n	8008228 <sin+0x38>
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	f7f7 ffd9 	bl	80001d0 <__aeabi_dsub>
 800821e:	ec41 0b10 	vmov	d0, r0, r1
 8008222:	b005      	add	sp, #20
 8008224:	f85d fb04 	ldr.w	pc, [sp], #4
 8008228:	4668      	mov	r0, sp
 800822a:	f000 f9b9 	bl	80085a0 <__ieee754_rem_pio2>
 800822e:	f000 0003 	and.w	r0, r0, #3
 8008232:	2801      	cmp	r0, #1
 8008234:	d00c      	beq.n	8008250 <sin+0x60>
 8008236:	2802      	cmp	r0, #2
 8008238:	d011      	beq.n	800825e <sin+0x6e>
 800823a:	b9e8      	cbnz	r0, 8008278 <sin+0x88>
 800823c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008240:	ed9d 0b00 	vldr	d0, [sp]
 8008244:	2001      	movs	r0, #1
 8008246:	f000 f8ef 	bl	8008428 <__kernel_sin>
 800824a:	ec51 0b10 	vmov	r0, r1, d0
 800824e:	e7e6      	b.n	800821e <sin+0x2e>
 8008250:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008254:	ed9d 0b00 	vldr	d0, [sp]
 8008258:	f000 f81e 	bl	8008298 <__kernel_cos>
 800825c:	e7f5      	b.n	800824a <sin+0x5a>
 800825e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008262:	ed9d 0b00 	vldr	d0, [sp]
 8008266:	2001      	movs	r0, #1
 8008268:	f000 f8de 	bl	8008428 <__kernel_sin>
 800826c:	ec53 2b10 	vmov	r2, r3, d0
 8008270:	4610      	mov	r0, r2
 8008272:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008276:	e7d2      	b.n	800821e <sin+0x2e>
 8008278:	ed9d 1b02 	vldr	d1, [sp, #8]
 800827c:	ed9d 0b00 	vldr	d0, [sp]
 8008280:	f000 f80a 	bl	8008298 <__kernel_cos>
 8008284:	e7f2      	b.n	800826c <sin+0x7c>
 8008286:	bf00      	nop
	...
 8008290:	3fe921fb 	.word	0x3fe921fb
 8008294:	7fefffff 	.word	0x7fefffff

08008298 <__kernel_cos>:
 8008298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	ec57 6b10 	vmov	r6, r7, d0
 80082a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80082a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80082a8:	ed8d 1b00 	vstr	d1, [sp]
 80082ac:	d206      	bcs.n	80082bc <__kernel_cos+0x24>
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 fbdf 	bl	8000a74 <__aeabi_d2iz>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f000 8088 	beq.w	80083cc <__kernel_cos+0x134>
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f8 f93c 	bl	8000540 <__aeabi_dmul>
 80082c8:	4b51      	ldr	r3, [pc, #324]	@ (8008410 <__kernel_cos+0x178>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	4604      	mov	r4, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	f7f8 f936 	bl	8000540 <__aeabi_dmul>
 80082d4:	a340      	add	r3, pc, #256	@ (adr r3, 80083d8 <__kernel_cos+0x140>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	4682      	mov	sl, r0
 80082dc:	468b      	mov	fp, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 f92d 	bl	8000540 <__aeabi_dmul>
 80082e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80083e0 <__kernel_cos+0x148>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f7 ff72 	bl	80001d4 <__adddf3>
 80082f0:	4622      	mov	r2, r4
 80082f2:	462b      	mov	r3, r5
 80082f4:	f7f8 f924 	bl	8000540 <__aeabi_dmul>
 80082f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80083e8 <__kernel_cos+0x150>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f7 ff67 	bl	80001d0 <__aeabi_dsub>
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	f7f8 f91b 	bl	8000540 <__aeabi_dmul>
 800830a:	a339      	add	r3, pc, #228	@ (adr r3, 80083f0 <__kernel_cos+0x158>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f7 ff60 	bl	80001d4 <__adddf3>
 8008314:	4622      	mov	r2, r4
 8008316:	462b      	mov	r3, r5
 8008318:	f7f8 f912 	bl	8000540 <__aeabi_dmul>
 800831c:	a336      	add	r3, pc, #216	@ (adr r3, 80083f8 <__kernel_cos+0x160>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f7 ff55 	bl	80001d0 <__aeabi_dsub>
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	f7f8 f909 	bl	8000540 <__aeabi_dmul>
 800832e:	a334      	add	r3, pc, #208	@ (adr r3, 8008400 <__kernel_cos+0x168>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f7 ff4e 	bl	80001d4 <__adddf3>
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	f7f8 f900 	bl	8000540 <__aeabi_dmul>
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	f7f8 f8fc 	bl	8000540 <__aeabi_dmul>
 8008348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f8 f8f4 	bl	8000540 <__aeabi_dmul>
 8008358:	460b      	mov	r3, r1
 800835a:	4602      	mov	r2, r0
 800835c:	4629      	mov	r1, r5
 800835e:	4620      	mov	r0, r4
 8008360:	f7f7 ff36 	bl	80001d0 <__aeabi_dsub>
 8008364:	4b2b      	ldr	r3, [pc, #172]	@ (8008414 <__kernel_cos+0x17c>)
 8008366:	4598      	cmp	r8, r3
 8008368:	4606      	mov	r6, r0
 800836a:	460f      	mov	r7, r1
 800836c:	d810      	bhi.n	8008390 <__kernel_cos+0xf8>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4650      	mov	r0, sl
 8008374:	4659      	mov	r1, fp
 8008376:	f7f7 ff2b 	bl	80001d0 <__aeabi_dsub>
 800837a:	460b      	mov	r3, r1
 800837c:	4926      	ldr	r1, [pc, #152]	@ (8008418 <__kernel_cos+0x180>)
 800837e:	4602      	mov	r2, r0
 8008380:	2000      	movs	r0, #0
 8008382:	f7f7 ff25 	bl	80001d0 <__aeabi_dsub>
 8008386:	ec41 0b10 	vmov	d0, r0, r1
 800838a:	b003      	add	sp, #12
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008390:	4b22      	ldr	r3, [pc, #136]	@ (800841c <__kernel_cos+0x184>)
 8008392:	4921      	ldr	r1, [pc, #132]	@ (8008418 <__kernel_cos+0x180>)
 8008394:	4598      	cmp	r8, r3
 8008396:	bf8c      	ite	hi
 8008398:	4d21      	ldrhi	r5, [pc, #132]	@ (8008420 <__kernel_cos+0x188>)
 800839a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800839e:	2400      	movs	r4, #0
 80083a0:	4622      	mov	r2, r4
 80083a2:	462b      	mov	r3, r5
 80083a4:	2000      	movs	r0, #0
 80083a6:	f7f7 ff13 	bl	80001d0 <__aeabi_dsub>
 80083aa:	4622      	mov	r2, r4
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	462b      	mov	r3, r5
 80083b2:	4650      	mov	r0, sl
 80083b4:	4659      	mov	r1, fp
 80083b6:	f7f7 ff0b 	bl	80001d0 <__aeabi_dsub>
 80083ba:	4632      	mov	r2, r6
 80083bc:	463b      	mov	r3, r7
 80083be:	f7f7 ff07 	bl	80001d0 <__aeabi_dsub>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4640      	mov	r0, r8
 80083c8:	4649      	mov	r1, r9
 80083ca:	e7da      	b.n	8008382 <__kernel_cos+0xea>
 80083cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008408 <__kernel_cos+0x170>
 80083d0:	e7db      	b.n	800838a <__kernel_cos+0xf2>
 80083d2:	bf00      	nop
 80083d4:	f3af 8000 	nop.w
 80083d8:	be8838d4 	.word	0xbe8838d4
 80083dc:	bda8fae9 	.word	0xbda8fae9
 80083e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80083e4:	3e21ee9e 	.word	0x3e21ee9e
 80083e8:	809c52ad 	.word	0x809c52ad
 80083ec:	3e927e4f 	.word	0x3e927e4f
 80083f0:	19cb1590 	.word	0x19cb1590
 80083f4:	3efa01a0 	.word	0x3efa01a0
 80083f8:	16c15177 	.word	0x16c15177
 80083fc:	3f56c16c 	.word	0x3f56c16c
 8008400:	5555554c 	.word	0x5555554c
 8008404:	3fa55555 	.word	0x3fa55555
 8008408:	00000000 	.word	0x00000000
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	3fd33332 	.word	0x3fd33332
 8008418:	3ff00000 	.word	0x3ff00000
 800841c:	3fe90000 	.word	0x3fe90000
 8008420:	3fd20000 	.word	0x3fd20000
 8008424:	00000000 	.word	0x00000000

08008428 <__kernel_sin>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ec55 4b10 	vmov	r4, r5, d0
 8008430:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008434:	b085      	sub	sp, #20
 8008436:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800843a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800843e:	4680      	mov	r8, r0
 8008440:	d205      	bcs.n	800844e <__kernel_sin+0x26>
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 fb15 	bl	8000a74 <__aeabi_d2iz>
 800844a:	2800      	cmp	r0, #0
 800844c:	d052      	beq.n	80084f4 <__kernel_sin+0xcc>
 800844e:	4622      	mov	r2, r4
 8008450:	462b      	mov	r3, r5
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	f7f8 f873 	bl	8000540 <__aeabi_dmul>
 800845a:	4682      	mov	sl, r0
 800845c:	468b      	mov	fp, r1
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f8 f86b 	bl	8000540 <__aeabi_dmul>
 800846a:	a342      	add	r3, pc, #264	@ (adr r3, 8008574 <__kernel_sin+0x14c>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	e9cd 0100 	strd	r0, r1, [sp]
 8008474:	4650      	mov	r0, sl
 8008476:	4659      	mov	r1, fp
 8008478:	f7f8 f862 	bl	8000540 <__aeabi_dmul>
 800847c:	a33f      	add	r3, pc, #252	@ (adr r3, 800857c <__kernel_sin+0x154>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 fea5 	bl	80001d0 <__aeabi_dsub>
 8008486:	4652      	mov	r2, sl
 8008488:	465b      	mov	r3, fp
 800848a:	f7f8 f859 	bl	8000540 <__aeabi_dmul>
 800848e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008584 <__kernel_sin+0x15c>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f7 fe9e 	bl	80001d4 <__adddf3>
 8008498:	4652      	mov	r2, sl
 800849a:	465b      	mov	r3, fp
 800849c:	f7f8 f850 	bl	8000540 <__aeabi_dmul>
 80084a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800858c <__kernel_sin+0x164>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f7 fe93 	bl	80001d0 <__aeabi_dsub>
 80084aa:	4652      	mov	r2, sl
 80084ac:	465b      	mov	r3, fp
 80084ae:	f7f8 f847 	bl	8000540 <__aeabi_dmul>
 80084b2:	a338      	add	r3, pc, #224	@ (adr r3, 8008594 <__kernel_sin+0x16c>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f7 fe8c 	bl	80001d4 <__adddf3>
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	d11b      	bne.n	80084fe <__kernel_sin+0xd6>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4650      	mov	r0, sl
 80084cc:	4659      	mov	r1, fp
 80084ce:	f7f8 f837 	bl	8000540 <__aeabi_dmul>
 80084d2:	a325      	add	r3, pc, #148	@ (adr r3, 8008568 <__kernel_sin+0x140>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f7f7 fe7a 	bl	80001d0 <__aeabi_dsub>
 80084dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e0:	f7f8 f82e 	bl	8000540 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 fe72 	bl	80001d4 <__adddf3>
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	ec45 4b10 	vmov	d0, r4, r5
 80084f8:	b005      	add	sp, #20
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008502:	4b1b      	ldr	r3, [pc, #108]	@ (8008570 <__kernel_sin+0x148>)
 8008504:	2200      	movs	r2, #0
 8008506:	f7f8 f81b 	bl	8000540 <__aeabi_dmul>
 800850a:	4632      	mov	r2, r6
 800850c:	4680      	mov	r8, r0
 800850e:	4689      	mov	r9, r1
 8008510:	463b      	mov	r3, r7
 8008512:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008516:	f7f8 f813 	bl	8000540 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	f7f7 fe55 	bl	80001d0 <__aeabi_dsub>
 8008526:	4652      	mov	r2, sl
 8008528:	465b      	mov	r3, fp
 800852a:	f7f8 f809 	bl	8000540 <__aeabi_dmul>
 800852e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008532:	f7f7 fe4d 	bl	80001d0 <__aeabi_dsub>
 8008536:	a30c      	add	r3, pc, #48	@ (adr r3, 8008568 <__kernel_sin+0x140>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008544:	f7f7 fffc 	bl	8000540 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f7 fe40 	bl	80001d4 <__adddf3>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4620      	mov	r0, r4
 800855a:	4629      	mov	r1, r5
 800855c:	f7f7 fe38 	bl	80001d0 <__aeabi_dsub>
 8008560:	e7c6      	b.n	80084f0 <__kernel_sin+0xc8>
 8008562:	bf00      	nop
 8008564:	f3af 8000 	nop.w
 8008568:	55555549 	.word	0x55555549
 800856c:	3fc55555 	.word	0x3fc55555
 8008570:	3fe00000 	.word	0x3fe00000
 8008574:	5acfd57c 	.word	0x5acfd57c
 8008578:	3de5d93a 	.word	0x3de5d93a
 800857c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008580:	3e5ae5e6 	.word	0x3e5ae5e6
 8008584:	57b1fe7d 	.word	0x57b1fe7d
 8008588:	3ec71de3 	.word	0x3ec71de3
 800858c:	19c161d5 	.word	0x19c161d5
 8008590:	3f2a01a0 	.word	0x3f2a01a0
 8008594:	1110f8a6 	.word	0x1110f8a6
 8008598:	3f811111 	.word	0x3f811111
 800859c:	00000000 	.word	0x00000000

080085a0 <__ieee754_rem_pio2>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	ec57 6b10 	vmov	r6, r7, d0
 80085a8:	4bc5      	ldr	r3, [pc, #788]	@ (80088c0 <__ieee754_rem_pio2+0x320>)
 80085aa:	b08d      	sub	sp, #52	@ 0x34
 80085ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80085b0:	4598      	cmp	r8, r3
 80085b2:	4604      	mov	r4, r0
 80085b4:	9704      	str	r7, [sp, #16]
 80085b6:	d807      	bhi.n	80085c8 <__ieee754_rem_pio2+0x28>
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	ed80 0b00 	vstr	d0, [r0]
 80085c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085c4:	2500      	movs	r5, #0
 80085c6:	e028      	b.n	800861a <__ieee754_rem_pio2+0x7a>
 80085c8:	4bbe      	ldr	r3, [pc, #760]	@ (80088c4 <__ieee754_rem_pio2+0x324>)
 80085ca:	4598      	cmp	r8, r3
 80085cc:	d878      	bhi.n	80086c0 <__ieee754_rem_pio2+0x120>
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	4dbd      	ldr	r5, [pc, #756]	@ (80088c8 <__ieee754_rem_pio2+0x328>)
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	4630      	mov	r0, r6
 80085d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008888 <__ieee754_rem_pio2+0x2e8>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4639      	mov	r1, r7
 80085de:	dd38      	ble.n	8008652 <__ieee754_rem_pio2+0xb2>
 80085e0:	f7f7 fdf6 	bl	80001d0 <__aeabi_dsub>
 80085e4:	45a8      	cmp	r8, r5
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	d01a      	beq.n	8008622 <__ieee754_rem_pio2+0x82>
 80085ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008890 <__ieee754_rem_pio2+0x2f0>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fded 	bl	80001d0 <__aeabi_dsub>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4680      	mov	r8, r0
 80085fc:	4689      	mov	r9, r1
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f7 fde5 	bl	80001d0 <__aeabi_dsub>
 8008606:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008890 <__ieee754_rem_pio2+0x2f0>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fde0 	bl	80001d0 <__aeabi_dsub>
 8008610:	e9c4 8900 	strd	r8, r9, [r4]
 8008614:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008618:	2501      	movs	r5, #1
 800861a:	4628      	mov	r0, r5
 800861c:	b00d      	add	sp, #52	@ 0x34
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	a39d      	add	r3, pc, #628	@ (adr r3, 8008898 <__ieee754_rem_pio2+0x2f8>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	f7f7 fdd2 	bl	80001d0 <__aeabi_dsub>
 800862c:	a39c      	add	r3, pc, #624	@ (adr r3, 80088a0 <__ieee754_rem_pio2+0x300>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	f7f7 fdcb 	bl	80001d0 <__aeabi_dsub>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4680      	mov	r8, r0
 8008640:	4689      	mov	r9, r1
 8008642:	4630      	mov	r0, r6
 8008644:	4639      	mov	r1, r7
 8008646:	f7f7 fdc3 	bl	80001d0 <__aeabi_dsub>
 800864a:	a395      	add	r3, pc, #596	@ (adr r3, 80088a0 <__ieee754_rem_pio2+0x300>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	e7dc      	b.n	800860c <__ieee754_rem_pio2+0x6c>
 8008652:	f7f7 fdbf 	bl	80001d4 <__adddf3>
 8008656:	45a8      	cmp	r8, r5
 8008658:	4606      	mov	r6, r0
 800865a:	460f      	mov	r7, r1
 800865c:	d018      	beq.n	8008690 <__ieee754_rem_pio2+0xf0>
 800865e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008890 <__ieee754_rem_pio2+0x2f0>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f7f7 fdb6 	bl	80001d4 <__adddf3>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4680      	mov	r8, r0
 800866e:	4689      	mov	r9, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 fdac 	bl	80001d0 <__aeabi_dsub>
 8008678:	a385      	add	r3, pc, #532	@ (adr r3, 8008890 <__ieee754_rem_pio2+0x2f0>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 fda9 	bl	80001d4 <__adddf3>
 8008682:	f04f 35ff 	mov.w	r5, #4294967295
 8008686:	e9c4 8900 	strd	r8, r9, [r4]
 800868a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800868e:	e7c4      	b.n	800861a <__ieee754_rem_pio2+0x7a>
 8008690:	a381      	add	r3, pc, #516	@ (adr r3, 8008898 <__ieee754_rem_pio2+0x2f8>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fd9d 	bl	80001d4 <__adddf3>
 800869a:	a381      	add	r3, pc, #516	@ (adr r3, 80088a0 <__ieee754_rem_pio2+0x300>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	4606      	mov	r6, r0
 80086a2:	460f      	mov	r7, r1
 80086a4:	f7f7 fd96 	bl	80001d4 <__adddf3>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f7 fd8c 	bl	80001d0 <__aeabi_dsub>
 80086b8:	a379      	add	r3, pc, #484	@ (adr r3, 80088a0 <__ieee754_rem_pio2+0x300>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	e7de      	b.n	800867e <__ieee754_rem_pio2+0xde>
 80086c0:	4b82      	ldr	r3, [pc, #520]	@ (80088cc <__ieee754_rem_pio2+0x32c>)
 80086c2:	4598      	cmp	r8, r3
 80086c4:	f200 80d1 	bhi.w	800886a <__ieee754_rem_pio2+0x2ca>
 80086c8:	f000 f966 	bl	8008998 <fabs>
 80086cc:	ec57 6b10 	vmov	r6, r7, d0
 80086d0:	a375      	add	r3, pc, #468	@ (adr r3, 80088a8 <__ieee754_rem_pio2+0x308>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	f7f7 ff31 	bl	8000540 <__aeabi_dmul>
 80086de:	4b7c      	ldr	r3, [pc, #496]	@ (80088d0 <__ieee754_rem_pio2+0x330>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 fd77 	bl	80001d4 <__adddf3>
 80086e6:	f7f8 f9c5 	bl	8000a74 <__aeabi_d2iz>
 80086ea:	4605      	mov	r5, r0
 80086ec:	f7f7 febe 	bl	800046c <__aeabi_i2d>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086f8:	a363      	add	r3, pc, #396	@ (adr r3, 8008888 <__ieee754_rem_pio2+0x2e8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff1f 	bl	8000540 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4630      	mov	r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	f7f7 fd61 	bl	80001d0 <__aeabi_dsub>
 800870e:	a360      	add	r3, pc, #384	@ (adr r3, 8008890 <__ieee754_rem_pio2+0x2f0>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	4682      	mov	sl, r0
 8008716:	468b      	mov	fp, r1
 8008718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871c:	f7f7 ff10 	bl	8000540 <__aeabi_dmul>
 8008720:	2d1f      	cmp	r5, #31
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	dc0c      	bgt.n	8008742 <__ieee754_rem_pio2+0x1a2>
 8008728:	4b6a      	ldr	r3, [pc, #424]	@ (80088d4 <__ieee754_rem_pio2+0x334>)
 800872a:	1e6a      	subs	r2, r5, #1
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	4543      	cmp	r3, r8
 8008732:	d006      	beq.n	8008742 <__ieee754_rem_pio2+0x1a2>
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4650      	mov	r0, sl
 800873a:	4659      	mov	r1, fp
 800873c:	f7f7 fd48 	bl	80001d0 <__aeabi_dsub>
 8008740:	e00e      	b.n	8008760 <__ieee754_rem_pio2+0x1c0>
 8008742:	463b      	mov	r3, r7
 8008744:	4632      	mov	r2, r6
 8008746:	4650      	mov	r0, sl
 8008748:	4659      	mov	r1, fp
 800874a:	f7f7 fd41 	bl	80001d0 <__aeabi_dsub>
 800874e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008758:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800875c:	2b10      	cmp	r3, #16
 800875e:	dc02      	bgt.n	8008766 <__ieee754_rem_pio2+0x1c6>
 8008760:	e9c4 0100 	strd	r0, r1, [r4]
 8008764:	e039      	b.n	80087da <__ieee754_rem_pio2+0x23a>
 8008766:	a34c      	add	r3, pc, #304	@ (adr r3, 8008898 <__ieee754_rem_pio2+0x2f8>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008770:	f7f7 fee6 	bl	8000540 <__aeabi_dmul>
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f7 fd26 	bl	80001d0 <__aeabi_dsub>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4680      	mov	r8, r0
 800878a:	4689      	mov	r9, r1
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	f7f7 fd1e 	bl	80001d0 <__aeabi_dsub>
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	f7f7 fd1a 	bl	80001d0 <__aeabi_dsub>
 800879c:	a340      	add	r3, pc, #256	@ (adr r3, 80088a0 <__ieee754_rem_pio2+0x300>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087aa:	f7f7 fec9 	bl	8000540 <__aeabi_dmul>
 80087ae:	4632      	mov	r2, r6
 80087b0:	463b      	mov	r3, r7
 80087b2:	f7f7 fd0d 	bl	80001d0 <__aeabi_dsub>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	4640      	mov	r0, r8
 80087c0:	4649      	mov	r1, r9
 80087c2:	f7f7 fd05 	bl	80001d0 <__aeabi_dsub>
 80087c6:	9a05      	ldr	r2, [sp, #20]
 80087c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b31      	cmp	r3, #49	@ 0x31
 80087d0:	dc20      	bgt.n	8008814 <__ieee754_rem_pio2+0x274>
 80087d2:	e9c4 0100 	strd	r0, r1, [r4]
 80087d6:	46c2      	mov	sl, r8
 80087d8:	46cb      	mov	fp, r9
 80087da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80087de:	4650      	mov	r0, sl
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 fcf3 	bl	80001d0 <__aeabi_dsub>
 80087ea:	463b      	mov	r3, r7
 80087ec:	4632      	mov	r2, r6
 80087ee:	f7f7 fcef 	bl	80001d0 <__aeabi_dsub>
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80087fa:	f6bf af0e 	bge.w	800861a <__ieee754_rem_pio2+0x7a>
 80087fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008808:	f8c4 8000 	str.w	r8, [r4]
 800880c:	60a0      	str	r0, [r4, #8]
 800880e:	60e3      	str	r3, [r4, #12]
 8008810:	426d      	negs	r5, r5
 8008812:	e702      	b.n	800861a <__ieee754_rem_pio2+0x7a>
 8008814:	a326      	add	r3, pc, #152	@ (adr r3, 80088b0 <__ieee754_rem_pio2+0x310>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881e:	f7f7 fe8f 	bl	8000540 <__aeabi_dmul>
 8008822:	4606      	mov	r6, r0
 8008824:	460f      	mov	r7, r1
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	f7f7 fccf 	bl	80001d0 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4682      	mov	sl, r0
 8008838:	468b      	mov	fp, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f7 fcc7 	bl	80001d0 <__aeabi_dsub>
 8008842:	4632      	mov	r2, r6
 8008844:	463b      	mov	r3, r7
 8008846:	f7f7 fcc3 	bl	80001d0 <__aeabi_dsub>
 800884a:	a31b      	add	r3, pc, #108	@ (adr r3, 80088b8 <__ieee754_rem_pio2+0x318>)
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008858:	f7f7 fe72 	bl	8000540 <__aeabi_dmul>
 800885c:	4632      	mov	r2, r6
 800885e:	463b      	mov	r3, r7
 8008860:	f7f7 fcb6 	bl	80001d0 <__aeabi_dsub>
 8008864:	4606      	mov	r6, r0
 8008866:	460f      	mov	r7, r1
 8008868:	e764      	b.n	8008734 <__ieee754_rem_pio2+0x194>
 800886a:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <__ieee754_rem_pio2+0x338>)
 800886c:	4598      	cmp	r8, r3
 800886e:	d935      	bls.n	80088dc <__ieee754_rem_pio2+0x33c>
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f7f7 fcaa 	bl	80001d0 <__aeabi_dsub>
 800887c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008880:	e9c4 0100 	strd	r0, r1, [r4]
 8008884:	e69e      	b.n	80085c4 <__ieee754_rem_pio2+0x24>
 8008886:	bf00      	nop
 8008888:	54400000 	.word	0x54400000
 800888c:	3ff921fb 	.word	0x3ff921fb
 8008890:	1a626331 	.word	0x1a626331
 8008894:	3dd0b461 	.word	0x3dd0b461
 8008898:	1a600000 	.word	0x1a600000
 800889c:	3dd0b461 	.word	0x3dd0b461
 80088a0:	2e037073 	.word	0x2e037073
 80088a4:	3ba3198a 	.word	0x3ba3198a
 80088a8:	6dc9c883 	.word	0x6dc9c883
 80088ac:	3fe45f30 	.word	0x3fe45f30
 80088b0:	2e000000 	.word	0x2e000000
 80088b4:	3ba3198a 	.word	0x3ba3198a
 80088b8:	252049c1 	.word	0x252049c1
 80088bc:	397b839a 	.word	0x397b839a
 80088c0:	3fe921fb 	.word	0x3fe921fb
 80088c4:	4002d97b 	.word	0x4002d97b
 80088c8:	3ff921fb 	.word	0x3ff921fb
 80088cc:	413921fb 	.word	0x413921fb
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	0800e2b0 	.word	0x0800e2b0
 80088d8:	7fefffff 	.word	0x7fefffff
 80088dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80088e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80088e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80088e8:	4630      	mov	r0, r6
 80088ea:	460f      	mov	r7, r1
 80088ec:	f7f8 f8c2 	bl	8000a74 <__aeabi_d2iz>
 80088f0:	f7f7 fdbc 	bl	800046c <__aeabi_i2d>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008900:	f7f7 fc66 	bl	80001d0 <__aeabi_dsub>
 8008904:	4b22      	ldr	r3, [pc, #136]	@ (8008990 <__ieee754_rem_pio2+0x3f0>)
 8008906:	2200      	movs	r2, #0
 8008908:	f7f7 fe1a 	bl	8000540 <__aeabi_dmul>
 800890c:	460f      	mov	r7, r1
 800890e:	4606      	mov	r6, r0
 8008910:	f7f8 f8b0 	bl	8000a74 <__aeabi_d2iz>
 8008914:	f7f7 fdaa 	bl	800046c <__aeabi_i2d>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008924:	f7f7 fc54 	bl	80001d0 <__aeabi_dsub>
 8008928:	4b19      	ldr	r3, [pc, #100]	@ (8008990 <__ieee754_rem_pio2+0x3f0>)
 800892a:	2200      	movs	r2, #0
 800892c:	f7f7 fe08 	bl	8000540 <__aeabi_dmul>
 8008930:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008934:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008938:	f04f 0803 	mov.w	r8, #3
 800893c:	2600      	movs	r6, #0
 800893e:	2700      	movs	r7, #0
 8008940:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	46c2      	mov	sl, r8
 800894a:	f108 38ff 	add.w	r8, r8, #4294967295
 800894e:	f7f8 f85f 	bl	8000a10 <__aeabi_dcmpeq>
 8008952:	2800      	cmp	r0, #0
 8008954:	d1f4      	bne.n	8008940 <__ieee754_rem_pio2+0x3a0>
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <__ieee754_rem_pio2+0x3f4>)
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	2302      	movs	r3, #2
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4653      	mov	r3, sl
 8008962:	4621      	mov	r1, r4
 8008964:	a806      	add	r0, sp, #24
 8008966:	f000 f81f 	bl	80089a8 <__kernel_rem_pio2>
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	4605      	mov	r5, r0
 8008970:	f6bf ae53 	bge.w	800861a <__ieee754_rem_pio2+0x7a>
 8008974:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008978:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800897c:	e9c4 2300 	strd	r2, r3, [r4]
 8008980:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008988:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800898c:	e740      	b.n	8008810 <__ieee754_rem_pio2+0x270>
 800898e:	bf00      	nop
 8008990:	41700000 	.word	0x41700000
 8008994:	0800e330 	.word	0x0800e330

08008998 <fabs>:
 8008998:	ec51 0b10 	vmov	r0, r1, d0
 800899c:	4602      	mov	r2, r0
 800899e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80089a2:	ec43 2b10 	vmov	d0, r2, r3
 80089a6:	4770      	bx	lr

080089a8 <__kernel_rem_pio2>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	ed2d 8b02 	vpush	{d8}
 80089b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80089b4:	f112 0f14 	cmn.w	r2, #20
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	9104      	str	r1, [sp, #16]
 80089bc:	4bbe      	ldr	r3, [pc, #760]	@ (8008cb8 <__kernel_rem_pio2+0x310>)
 80089be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80089c0:	9008      	str	r0, [sp, #32]
 80089c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ce:	bfa8      	it	ge
 80089d0:	1ed4      	subge	r4, r2, #3
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	bfb2      	itee	lt
 80089d6:	2400      	movlt	r4, #0
 80089d8:	2318      	movge	r3, #24
 80089da:	fb94 f4f3 	sdivge	r4, r4, r3
 80089de:	f06f 0317 	mvn.w	r3, #23
 80089e2:	fb04 3303 	mla	r3, r4, r3, r3
 80089e6:	eb03 0b02 	add.w	fp, r3, r2
 80089ea:	9b00      	ldr	r3, [sp, #0]
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008ca8 <__kernel_rem_pio2+0x300>
 80089f2:	eb03 0802 	add.w	r8, r3, r2
 80089f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80089f8:	1aa7      	subs	r7, r4, r2
 80089fa:	ae20      	add	r6, sp, #128	@ 0x80
 80089fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008a00:	2500      	movs	r5, #0
 8008a02:	4545      	cmp	r5, r8
 8008a04:	dd13      	ble.n	8008a2e <__kernel_rem_pio2+0x86>
 8008a06:	9b06      	ldr	r3, [sp, #24]
 8008a08:	aa20      	add	r2, sp, #128	@ 0x80
 8008a0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008a0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008a12:	f04f 0800 	mov.w	r8, #0
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	4598      	cmp	r8, r3
 8008a1a:	dc31      	bgt.n	8008a80 <__kernel_rem_pio2+0xd8>
 8008a1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008ca8 <__kernel_rem_pio2+0x300>
 8008a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a28:	462f      	mov	r7, r5
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	e01b      	b.n	8008a66 <__kernel_rem_pio2+0xbe>
 8008a2e:	42ef      	cmn	r7, r5
 8008a30:	d407      	bmi.n	8008a42 <__kernel_rem_pio2+0x9a>
 8008a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a36:	f7f7 fd19 	bl	800046c <__aeabi_i2d>
 8008a3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a3e:	3501      	adds	r5, #1
 8008a40:	e7df      	b.n	8008a02 <__kernel_rem_pio2+0x5a>
 8008a42:	ec51 0b18 	vmov	r0, r1, d8
 8008a46:	e7f8      	b.n	8008a3a <__kernel_rem_pio2+0x92>
 8008a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008a50:	f7f7 fd76 	bl	8000540 <__aeabi_dmul>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5c:	f7f7 fbba 	bl	80001d4 <__adddf3>
 8008a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a64:	3601      	adds	r6, #1
 8008a66:	9b05      	ldr	r3, [sp, #20]
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	f1a7 0708 	sub.w	r7, r7, #8
 8008a6e:	ddeb      	ble.n	8008a48 <__kernel_rem_pio2+0xa0>
 8008a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a74:	f108 0801 	add.w	r8, r8, #1
 8008a78:	ecaa 7b02 	vstmia	sl!, {d7}
 8008a7c:	3508      	adds	r5, #8
 8008a7e:	e7ca      	b.n	8008a16 <__kernel_rem_pio2+0x6e>
 8008a80:	9b00      	ldr	r3, [sp, #0]
 8008a82:	f8dd 8000 	ldr.w	r8, [sp]
 8008a86:	aa0c      	add	r2, sp, #48	@ 0x30
 8008a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008a90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9c:	ab98      	add	r3, sp, #608	@ 0x260
 8008a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008aa2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008aa6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008aaa:	ac0c      	add	r4, sp, #48	@ 0x30
 8008aac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008aae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008ab2:	46a1      	mov	r9, r4
 8008ab4:	46c2      	mov	sl, r8
 8008ab6:	f1ba 0f00 	cmp.w	sl, #0
 8008aba:	f1a5 0508 	sub.w	r5, r5, #8
 8008abe:	dc77      	bgt.n	8008bb0 <__kernel_rem_pio2+0x208>
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008ac6:	f000 fac7 	bl	8009058 <scalbn>
 8008aca:	ec57 6b10 	vmov	r6, r7, d0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f7 fd32 	bl	8000540 <__aeabi_dmul>
 8008adc:	ec41 0b10 	vmov	d0, r0, r1
 8008ae0:	f000 fb3a 	bl	8009158 <floor>
 8008ae4:	4b75      	ldr	r3, [pc, #468]	@ (8008cbc <__kernel_rem_pio2+0x314>)
 8008ae6:	ec51 0b10 	vmov	r0, r1, d0
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fd28 	bl	8000540 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fb6a 	bl	80001d0 <__aeabi_dsub>
 8008afc:	460f      	mov	r7, r1
 8008afe:	4606      	mov	r6, r0
 8008b00:	f7f7 ffb8 	bl	8000a74 <__aeabi_d2iz>
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	f7f7 fcb1 	bl	800046c <__aeabi_i2d>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fb5d 	bl	80001d0 <__aeabi_dsub>
 8008b16:	f1bb 0f00 	cmp.w	fp, #0
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	dd6c      	ble.n	8008bfa <__kernel_rem_pio2+0x252>
 8008b20:	f108 31ff 	add.w	r1, r8, #4294967295
 8008b24:	ab0c      	add	r3, sp, #48	@ 0x30
 8008b26:	9d02      	ldr	r5, [sp, #8]
 8008b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b2c:	f1cb 0018 	rsb	r0, fp, #24
 8008b30:	fa43 f200 	asr.w	r2, r3, r0
 8008b34:	4415      	add	r5, r2
 8008b36:	4082      	lsls	r2, r0
 8008b38:	1a9b      	subs	r3, r3, r2
 8008b3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8008b3c:	9502      	str	r5, [sp, #8]
 8008b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008b42:	f1cb 0217 	rsb	r2, fp, #23
 8008b46:	fa43 f902 	asr.w	r9, r3, r2
 8008b4a:	f1b9 0f00 	cmp.w	r9, #0
 8008b4e:	dd64      	ble.n	8008c1a <__kernel_rem_pio2+0x272>
 8008b50:	9b02      	ldr	r3, [sp, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	3301      	adds	r3, #1
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	4615      	mov	r5, r2
 8008b5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008b5e:	4590      	cmp	r8, r2
 8008b60:	f300 80b8 	bgt.w	8008cd4 <__kernel_rem_pio2+0x32c>
 8008b64:	f1bb 0f00 	cmp.w	fp, #0
 8008b68:	dd07      	ble.n	8008b7a <__kernel_rem_pio2+0x1d2>
 8008b6a:	f1bb 0f01 	cmp.w	fp, #1
 8008b6e:	f000 80bf 	beq.w	8008cf0 <__kernel_rem_pio2+0x348>
 8008b72:	f1bb 0f02 	cmp.w	fp, #2
 8008b76:	f000 80c6 	beq.w	8008d06 <__kernel_rem_pio2+0x35e>
 8008b7a:	f1b9 0f02 	cmp.w	r9, #2
 8008b7e:	d14c      	bne.n	8008c1a <__kernel_rem_pio2+0x272>
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	494e      	ldr	r1, [pc, #312]	@ (8008cc0 <__kernel_rem_pio2+0x318>)
 8008b86:	2000      	movs	r0, #0
 8008b88:	f7f7 fb22 	bl	80001d0 <__aeabi_dsub>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	d042      	beq.n	8008c1a <__kernel_rem_pio2+0x272>
 8008b94:	4658      	mov	r0, fp
 8008b96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008cb0 <__kernel_rem_pio2+0x308>
 8008b9a:	f000 fa5d 	bl	8009058 <scalbn>
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	ec53 2b10 	vmov	r2, r3, d0
 8008ba6:	f7f7 fb13 	bl	80001d0 <__aeabi_dsub>
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	e034      	b.n	8008c1a <__kernel_rem_pio2+0x272>
 8008bb0:	4b44      	ldr	r3, [pc, #272]	@ (8008cc4 <__kernel_rem_pio2+0x31c>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb8:	f7f7 fcc2 	bl	8000540 <__aeabi_dmul>
 8008bbc:	f7f7 ff5a 	bl	8000a74 <__aeabi_d2iz>
 8008bc0:	f7f7 fc54 	bl	800046c <__aeabi_i2d>
 8008bc4:	4b40      	ldr	r3, [pc, #256]	@ (8008cc8 <__kernel_rem_pio2+0x320>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4606      	mov	r6, r0
 8008bca:	460f      	mov	r7, r1
 8008bcc:	f7f7 fcb8 	bl	8000540 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd8:	f7f7 fafa 	bl	80001d0 <__aeabi_dsub>
 8008bdc:	f7f7 ff4a 	bl	8000a74 <__aeabi_d2iz>
 8008be0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008be4:	f849 0b04 	str.w	r0, [r9], #4
 8008be8:	4639      	mov	r1, r7
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7f7 faf2 	bl	80001d4 <__adddf3>
 8008bf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf8:	e75d      	b.n	8008ab6 <__kernel_rem_pio2+0x10e>
 8008bfa:	d107      	bne.n	8008c0c <__kernel_rem_pio2+0x264>
 8008bfc:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c00:	aa0c      	add	r2, sp, #48	@ 0x30
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008c0a:	e79e      	b.n	8008b4a <__kernel_rem_pio2+0x1a2>
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8008ccc <__kernel_rem_pio2+0x324>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f7f7 ff1c 	bl	8000a4c <__aeabi_dcmpge>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d143      	bne.n	8008ca0 <__kernel_rem_pio2+0x2f8>
 8008c18:	4681      	mov	r9, r0
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4630      	mov	r0, r6
 8008c20:	4639      	mov	r1, r7
 8008c22:	f7f7 fef5 	bl	8000a10 <__aeabi_dcmpeq>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f000 80bf 	beq.w	8008daa <__kernel_rem_pio2+0x402>
 8008c2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c30:	2200      	movs	r2, #0
 8008c32:	9900      	ldr	r1, [sp, #0]
 8008c34:	428b      	cmp	r3, r1
 8008c36:	da6e      	bge.n	8008d16 <__kernel_rem_pio2+0x36e>
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	f000 8089 	beq.w	8008d50 <__kernel_rem_pio2+0x3a8>
 8008c3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c42:	ab0c      	add	r3, sp, #48	@ 0x30
 8008c44:	f1ab 0b18 	sub.w	fp, fp, #24
 8008c48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0f6      	beq.n	8008c3e <__kernel_rem_pio2+0x296>
 8008c50:	4658      	mov	r0, fp
 8008c52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008cb0 <__kernel_rem_pio2+0x308>
 8008c56:	f000 f9ff 	bl	8009058 <scalbn>
 8008c5a:	f108 0301 	add.w	r3, r8, #1
 8008c5e:	00da      	lsls	r2, r3, #3
 8008c60:	9205      	str	r2, [sp, #20]
 8008c62:	ec55 4b10 	vmov	r4, r5, d0
 8008c66:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008c68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008cc4 <__kernel_rem_pio2+0x31c>
 8008c6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008c70:	4646      	mov	r6, r8
 8008c72:	f04f 0a00 	mov.w	sl, #0
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	f280 80cf 	bge.w	8008e1a <__kernel_rem_pio2+0x472>
 8008c7c:	4644      	mov	r4, r8
 8008c7e:	2c00      	cmp	r4, #0
 8008c80:	f2c0 80fd 	blt.w	8008e7e <__kernel_rem_pio2+0x4d6>
 8008c84:	4b12      	ldr	r3, [pc, #72]	@ (8008cd0 <__kernel_rem_pio2+0x328>)
 8008c86:	461f      	mov	r7, r3
 8008c88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c8e:	9306      	str	r3, [sp, #24]
 8008c90:	f04f 0a00 	mov.w	sl, #0
 8008c94:	f04f 0b00 	mov.w	fp, #0
 8008c98:	2600      	movs	r6, #0
 8008c9a:	eba8 0504 	sub.w	r5, r8, r4
 8008c9e:	e0e2      	b.n	8008e66 <__kernel_rem_pio2+0x4be>
 8008ca0:	f04f 0902 	mov.w	r9, #2
 8008ca4:	e754      	b.n	8008b50 <__kernel_rem_pio2+0x1a8>
 8008ca6:	bf00      	nop
	...
 8008cb4:	3ff00000 	.word	0x3ff00000
 8008cb8:	0800e478 	.word	0x0800e478
 8008cbc:	40200000 	.word	0x40200000
 8008cc0:	3ff00000 	.word	0x3ff00000
 8008cc4:	3e700000 	.word	0x3e700000
 8008cc8:	41700000 	.word	0x41700000
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	0800e438 	.word	0x0800e438
 8008cd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8008cd8:	b945      	cbnz	r5, 8008cec <__kernel_rem_pio2+0x344>
 8008cda:	b123      	cbz	r3, 8008ce6 <__kernel_rem_pio2+0x33e>
 8008cdc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	461d      	mov	r5, r3
 8008cea:	e738      	b.n	8008b5e <__kernel_rem_pio2+0x1b6>
 8008cec:	1acb      	subs	r3, r1, r3
 8008cee:	e7f7      	b.n	8008ce0 <__kernel_rem_pio2+0x338>
 8008cf0:	f108 32ff 	add.w	r2, r8, #4294967295
 8008cf4:	ab0c      	add	r3, sp, #48	@ 0x30
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008cfe:	a90c      	add	r1, sp, #48	@ 0x30
 8008d00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d04:	e739      	b.n	8008b7a <__kernel_rem_pio2+0x1d2>
 8008d06:	f108 32ff 	add.w	r2, r8, #4294967295
 8008d0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8008d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d14:	e7f3      	b.n	8008cfe <__kernel_rem_pio2+0x356>
 8008d16:	a90c      	add	r1, sp, #48	@ 0x30
 8008d18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	e787      	b.n	8008c32 <__kernel_rem_pio2+0x28a>
 8008d22:	3401      	adds	r4, #1
 8008d24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d0fa      	beq.n	8008d22 <__kernel_rem_pio2+0x37a>
 8008d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d32:	eb0d 0503 	add.w	r5, sp, r3
 8008d36:	9b06      	ldr	r3, [sp, #24]
 8008d38:	aa20      	add	r2, sp, #128	@ 0x80
 8008d3a:	4443      	add	r3, r8
 8008d3c:	f108 0701 	add.w	r7, r8, #1
 8008d40:	3d98      	subs	r5, #152	@ 0x98
 8008d42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008d46:	4444      	add	r4, r8
 8008d48:	42bc      	cmp	r4, r7
 8008d4a:	da04      	bge.n	8008d56 <__kernel_rem_pio2+0x3ae>
 8008d4c:	46a0      	mov	r8, r4
 8008d4e:	e6a2      	b.n	8008a96 <__kernel_rem_pio2+0xee>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d52:	2401      	movs	r4, #1
 8008d54:	e7e6      	b.n	8008d24 <__kernel_rem_pio2+0x37c>
 8008d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008d5c:	f7f7 fb86 	bl	800046c <__aeabi_i2d>
 8008d60:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009028 <__kernel_rem_pio2+0x680>
 8008d64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d70:	46b2      	mov	sl, r6
 8008d72:	f04f 0800 	mov.w	r8, #0
 8008d76:	9b05      	ldr	r3, [sp, #20]
 8008d78:	4598      	cmp	r8, r3
 8008d7a:	dd05      	ble.n	8008d88 <__kernel_rem_pio2+0x3e0>
 8008d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d80:	3701      	adds	r7, #1
 8008d82:	eca5 7b02 	vstmia	r5!, {d7}
 8008d86:	e7df      	b.n	8008d48 <__kernel_rem_pio2+0x3a0>
 8008d88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008d8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d90:	f7f7 fbd6 	bl	8000540 <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9c:	f7f7 fa1a 	bl	80001d4 <__adddf3>
 8008da0:	f108 0801 	add.w	r8, r8, #1
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	e7e5      	b.n	8008d76 <__kernel_rem_pio2+0x3ce>
 8008daa:	f1cb 0000 	rsb	r0, fp, #0
 8008dae:	ec47 6b10 	vmov	d0, r6, r7
 8008db2:	f000 f951 	bl	8009058 <scalbn>
 8008db6:	ec55 4b10 	vmov	r4, r5, d0
 8008dba:	4b9d      	ldr	r3, [pc, #628]	@ (8009030 <__kernel_rem_pio2+0x688>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fe43 	bl	8000a4c <__aeabi_dcmpge>
 8008dc6:	b300      	cbz	r0, 8008e0a <__kernel_rem_pio2+0x462>
 8008dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8009034 <__kernel_rem_pio2+0x68c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fbb6 	bl	8000540 <__aeabi_dmul>
 8008dd4:	f7f7 fe4e 	bl	8000a74 <__aeabi_d2iz>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f7f7 fb47 	bl	800046c <__aeabi_i2d>
 8008dde:	4b94      	ldr	r3, [pc, #592]	@ (8009030 <__kernel_rem_pio2+0x688>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	f7f7 fbad 	bl	8000540 <__aeabi_dmul>
 8008de6:	460b      	mov	r3, r1
 8008de8:	4602      	mov	r2, r0
 8008dea:	4629      	mov	r1, r5
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7f7 f9ef 	bl	80001d0 <__aeabi_dsub>
 8008df2:	f7f7 fe3f 	bl	8000a74 <__aeabi_d2iz>
 8008df6:	ab0c      	add	r3, sp, #48	@ 0x30
 8008df8:	f10b 0b18 	add.w	fp, fp, #24
 8008dfc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008e08:	e722      	b.n	8008c50 <__kernel_rem_pio2+0x2a8>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fe31 	bl	8000a74 <__aeabi_d2iz>
 8008e12:	ab0c      	add	r3, sp, #48	@ 0x30
 8008e14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008e18:	e71a      	b.n	8008c50 <__kernel_rem_pio2+0x2a8>
 8008e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8008e1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e20:	f7f7 fb24 	bl	800046c <__aeabi_i2d>
 8008e24:	4622      	mov	r2, r4
 8008e26:	462b      	mov	r3, r5
 8008e28:	f7f7 fb8a 	bl	8000540 <__aeabi_dmul>
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008e32:	465b      	mov	r3, fp
 8008e34:	4620      	mov	r0, r4
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7f7 fb82 	bl	8000540 <__aeabi_dmul>
 8008e3c:	3e01      	subs	r6, #1
 8008e3e:	4604      	mov	r4, r0
 8008e40:	460d      	mov	r5, r1
 8008e42:	e718      	b.n	8008c76 <__kernel_rem_pio2+0x2ce>
 8008e44:	9906      	ldr	r1, [sp, #24]
 8008e46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008e4a:	9106      	str	r1, [sp, #24]
 8008e4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008e50:	f7f7 fb76 	bl	8000540 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4650      	mov	r0, sl
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	f7f7 f9ba 	bl	80001d4 <__adddf3>
 8008e60:	3601      	adds	r6, #1
 8008e62:	4682      	mov	sl, r0
 8008e64:	468b      	mov	fp, r1
 8008e66:	9b00      	ldr	r3, [sp, #0]
 8008e68:	429e      	cmp	r6, r3
 8008e6a:	dc01      	bgt.n	8008e70 <__kernel_rem_pio2+0x4c8>
 8008e6c:	42b5      	cmp	r5, r6
 8008e6e:	dae9      	bge.n	8008e44 <__kernel_rem_pio2+0x49c>
 8008e70:	ab48      	add	r3, sp, #288	@ 0x120
 8008e72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e76:	e9c5 ab00 	strd	sl, fp, [r5]
 8008e7a:	3c01      	subs	r4, #1
 8008e7c:	e6ff      	b.n	8008c7e <__kernel_rem_pio2+0x2d6>
 8008e7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	dc0b      	bgt.n	8008e9c <__kernel_rem_pio2+0x4f4>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dc39      	bgt.n	8008efc <__kernel_rem_pio2+0x554>
 8008e88:	d05d      	beq.n	8008f46 <__kernel_rem_pio2+0x59e>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	f003 0007 	and.w	r0, r3, #7
 8008e90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008e94:	ecbd 8b02 	vpop	{d8}
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d1f3      	bne.n	8008e8a <__kernel_rem_pio2+0x4e2>
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ea8:	eb0d 0403 	add.w	r4, sp, r3
 8008eac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008eb0:	4625      	mov	r5, r4
 8008eb2:	46c2      	mov	sl, r8
 8008eb4:	f1ba 0f00 	cmp.w	sl, #0
 8008eb8:	f1a5 0508 	sub.w	r5, r5, #8
 8008ebc:	dc6b      	bgt.n	8008f96 <__kernel_rem_pio2+0x5ee>
 8008ebe:	4645      	mov	r5, r8
 8008ec0:	2d01      	cmp	r5, #1
 8008ec2:	f1a4 0408 	sub.w	r4, r4, #8
 8008ec6:	f300 8087 	bgt.w	8008fd8 <__kernel_rem_pio2+0x630>
 8008eca:	9c05      	ldr	r4, [sp, #20]
 8008ecc:	ab48      	add	r3, sp, #288	@ 0x120
 8008ece:	441c      	add	r4, r3
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	f1b8 0f01 	cmp.w	r8, #1
 8008ed8:	f300 809c 	bgt.w	8009014 <__kernel_rem_pio2+0x66c>
 8008edc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008ee0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	f040 80a6 	bne.w	8009038 <__kernel_rem_pio2+0x690>
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	e9c3 7800 	strd	r7, r8, [r3]
 8008ef2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008ef6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008efa:	e7c6      	b.n	8008e8a <__kernel_rem_pio2+0x4e2>
 8008efc:	9d05      	ldr	r5, [sp, #20]
 8008efe:	ab48      	add	r3, sp, #288	@ 0x120
 8008f00:	441d      	add	r5, r3
 8008f02:	4644      	mov	r4, r8
 8008f04:	2000      	movs	r0, #0
 8008f06:	2100      	movs	r1, #0
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	da35      	bge.n	8008f78 <__kernel_rem_pio2+0x5d0>
 8008f0c:	f1b9 0f00 	cmp.w	r9, #0
 8008f10:	d038      	beq.n	8008f84 <__kernel_rem_pio2+0x5dc>
 8008f12:	4602      	mov	r2, r0
 8008f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f18:	9c04      	ldr	r4, [sp, #16]
 8008f1a:	e9c4 2300 	strd	r2, r3, [r4]
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008f26:	f7f7 f953 	bl	80001d0 <__aeabi_dsub>
 8008f2a:	ad4a      	add	r5, sp, #296	@ 0x128
 8008f2c:	2401      	movs	r4, #1
 8008f2e:	45a0      	cmp	r8, r4
 8008f30:	da2b      	bge.n	8008f8a <__kernel_rem_pio2+0x5e2>
 8008f32:	f1b9 0f00 	cmp.w	r9, #0
 8008f36:	d002      	beq.n	8008f3e <__kernel_rem_pio2+0x596>
 8008f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008f44:	e7a1      	b.n	8008e8a <__kernel_rem_pio2+0x4e2>
 8008f46:	9c05      	ldr	r4, [sp, #20]
 8008f48:	ab48      	add	r3, sp, #288	@ 0x120
 8008f4a:	441c      	add	r4, r3
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	da09      	bge.n	8008f6a <__kernel_rem_pio2+0x5c2>
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	d002      	beq.n	8008f62 <__kernel_rem_pio2+0x5ba>
 8008f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f60:	4619      	mov	r1, r3
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	e9c3 0100 	strd	r0, r1, [r3]
 8008f68:	e78f      	b.n	8008e8a <__kernel_rem_pio2+0x4e2>
 8008f6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f6e:	f7f7 f931 	bl	80001d4 <__adddf3>
 8008f72:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f76:	e7eb      	b.n	8008f50 <__kernel_rem_pio2+0x5a8>
 8008f78:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008f7c:	f7f7 f92a 	bl	80001d4 <__adddf3>
 8008f80:	3c01      	subs	r4, #1
 8008f82:	e7c1      	b.n	8008f08 <__kernel_rem_pio2+0x560>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	e7c6      	b.n	8008f18 <__kernel_rem_pio2+0x570>
 8008f8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008f8e:	f7f7 f921 	bl	80001d4 <__adddf3>
 8008f92:	3401      	adds	r4, #1
 8008f94:	e7cb      	b.n	8008f2e <__kernel_rem_pio2+0x586>
 8008f96:	ed95 7b00 	vldr	d7, [r5]
 8008f9a:	ed8d 7b00 	vstr	d7, [sp]
 8008f9e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008fa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fa6:	ec53 2b17 	vmov	r2, r3, d7
 8008faa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fae:	f7f7 f911 	bl	80001d4 <__adddf3>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fbe:	f7f7 f907 	bl	80001d0 <__aeabi_dsub>
 8008fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fc6:	f7f7 f905 	bl	80001d4 <__adddf3>
 8008fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008fd2:	e9c5 6700 	strd	r6, r7, [r5]
 8008fd6:	e76d      	b.n	8008eb4 <__kernel_rem_pio2+0x50c>
 8008fd8:	ed94 7b00 	vldr	d7, [r4]
 8008fdc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008fe0:	ec51 0b17 	vmov	r0, r1, d7
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	ed8d 7b00 	vstr	d7, [sp]
 8008fec:	f7f7 f8f2 	bl	80001d4 <__adddf3>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	460f      	mov	r7, r1
 8008ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ffc:	f7f7 f8e8 	bl	80001d0 <__aeabi_dsub>
 8009000:	4652      	mov	r2, sl
 8009002:	465b      	mov	r3, fp
 8009004:	f7f7 f8e6 	bl	80001d4 <__adddf3>
 8009008:	3d01      	subs	r5, #1
 800900a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800900e:	e9c4 6700 	strd	r6, r7, [r4]
 8009012:	e755      	b.n	8008ec0 <__kernel_rem_pio2+0x518>
 8009014:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009018:	f7f7 f8dc 	bl	80001d4 <__adddf3>
 800901c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009020:	e758      	b.n	8008ed4 <__kernel_rem_pio2+0x52c>
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
	...
 8009030:	41700000 	.word	0x41700000
 8009034:	3e700000 	.word	0x3e700000
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	601f      	str	r7, [r3, #0]
 800903e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009042:	605c      	str	r4, [r3, #4]
 8009044:	609d      	str	r5, [r3, #8]
 8009046:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800904a:	60d3      	str	r3, [r2, #12]
 800904c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009050:	6110      	str	r0, [r2, #16]
 8009052:	6153      	str	r3, [r2, #20]
 8009054:	e719      	b.n	8008e8a <__kernel_rem_pio2+0x4e2>
 8009056:	bf00      	nop

08009058 <scalbn>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	ec55 4b10 	vmov	r4, r5, d0
 800905e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009062:	4606      	mov	r6, r0
 8009064:	462b      	mov	r3, r5
 8009066:	b991      	cbnz	r1, 800908e <scalbn+0x36>
 8009068:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800906c:	4323      	orrs	r3, r4
 800906e:	d03d      	beq.n	80090ec <scalbn+0x94>
 8009070:	4b35      	ldr	r3, [pc, #212]	@ (8009148 <scalbn+0xf0>)
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	2200      	movs	r2, #0
 8009078:	f7f7 fa62 	bl	8000540 <__aeabi_dmul>
 800907c:	4b33      	ldr	r3, [pc, #204]	@ (800914c <scalbn+0xf4>)
 800907e:	429e      	cmp	r6, r3
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	da0f      	bge.n	80090a6 <scalbn+0x4e>
 8009086:	a328      	add	r3, pc, #160	@ (adr r3, 8009128 <scalbn+0xd0>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	e01e      	b.n	80090cc <scalbn+0x74>
 800908e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009092:	4291      	cmp	r1, r2
 8009094:	d10b      	bne.n	80090ae <scalbn+0x56>
 8009096:	4622      	mov	r2, r4
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 f89a 	bl	80001d4 <__adddf3>
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	e022      	b.n	80090ec <scalbn+0x94>
 80090a6:	460b      	mov	r3, r1
 80090a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80090ac:	3936      	subs	r1, #54	@ 0x36
 80090ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80090b2:	4296      	cmp	r6, r2
 80090b4:	dd0d      	ble.n	80090d2 <scalbn+0x7a>
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009130 <scalbn+0xd8>)
 80090ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090be:	da02      	bge.n	80090c6 <scalbn+0x6e>
 80090c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009138 <scalbn+0xe0>)
 80090c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009130 <scalbn+0xd8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 fa38 	bl	8000540 <__aeabi_dmul>
 80090d0:	e7e6      	b.n	80090a0 <scalbn+0x48>
 80090d2:	1872      	adds	r2, r6, r1
 80090d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80090d8:	428a      	cmp	r2, r1
 80090da:	dcec      	bgt.n	80090b6 <scalbn+0x5e>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	dd08      	ble.n	80090f2 <scalbn+0x9a>
 80090e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80090e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80090e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80090ec:	ec45 4b10 	vmov	d0, r4, r5
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80090f6:	da08      	bge.n	800910a <scalbn+0xb2>
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8009128 <scalbn+0xd0>)
 80090fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009100:	dac1      	bge.n	8009086 <scalbn+0x2e>
 8009102:	a10f      	add	r1, pc, #60	@ (adr r1, 8009140 <scalbn+0xe8>)
 8009104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009108:	e7bd      	b.n	8009086 <scalbn+0x2e>
 800910a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800910e:	3236      	adds	r2, #54	@ 0x36
 8009110:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009114:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009118:	4620      	mov	r0, r4
 800911a:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <scalbn+0xf8>)
 800911c:	4629      	mov	r1, r5
 800911e:	2200      	movs	r2, #0
 8009120:	e7d4      	b.n	80090cc <scalbn+0x74>
 8009122:	bf00      	nop
 8009124:	f3af 8000 	nop.w
 8009128:	c2f8f359 	.word	0xc2f8f359
 800912c:	01a56e1f 	.word	0x01a56e1f
 8009130:	8800759c 	.word	0x8800759c
 8009134:	7e37e43c 	.word	0x7e37e43c
 8009138:	8800759c 	.word	0x8800759c
 800913c:	fe37e43c 	.word	0xfe37e43c
 8009140:	c2f8f359 	.word	0xc2f8f359
 8009144:	81a56e1f 	.word	0x81a56e1f
 8009148:	43500000 	.word	0x43500000
 800914c:	ffff3cb0 	.word	0xffff3cb0
 8009150:	3c900000 	.word	0x3c900000
 8009154:	00000000 	.word	0x00000000

08009158 <floor>:
 8009158:	ec51 0b10 	vmov	r0, r1, d0
 800915c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009164:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009168:	2e13      	cmp	r6, #19
 800916a:	460c      	mov	r4, r1
 800916c:	4605      	mov	r5, r0
 800916e:	4680      	mov	r8, r0
 8009170:	dc34      	bgt.n	80091dc <floor+0x84>
 8009172:	2e00      	cmp	r6, #0
 8009174:	da17      	bge.n	80091a6 <floor+0x4e>
 8009176:	a332      	add	r3, pc, #200	@ (adr r3, 8009240 <floor+0xe8>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 f82a 	bl	80001d4 <__adddf3>
 8009180:	2200      	movs	r2, #0
 8009182:	2300      	movs	r3, #0
 8009184:	f7f7 fc6c 	bl	8000a60 <__aeabi_dcmpgt>
 8009188:	b150      	cbz	r0, 80091a0 <floor+0x48>
 800918a:	2c00      	cmp	r4, #0
 800918c:	da55      	bge.n	800923a <floor+0xe2>
 800918e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009192:	432c      	orrs	r4, r5
 8009194:	2500      	movs	r5, #0
 8009196:	42ac      	cmp	r4, r5
 8009198:	4c2b      	ldr	r4, [pc, #172]	@ (8009248 <floor+0xf0>)
 800919a:	bf08      	it	eq
 800919c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80091a0:	4621      	mov	r1, r4
 80091a2:	4628      	mov	r0, r5
 80091a4:	e023      	b.n	80091ee <floor+0x96>
 80091a6:	4f29      	ldr	r7, [pc, #164]	@ (800924c <floor+0xf4>)
 80091a8:	4137      	asrs	r7, r6
 80091aa:	ea01 0307 	and.w	r3, r1, r7
 80091ae:	4303      	orrs	r3, r0
 80091b0:	d01d      	beq.n	80091ee <floor+0x96>
 80091b2:	a323      	add	r3, pc, #140	@ (adr r3, 8009240 <floor+0xe8>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 f80c 	bl	80001d4 <__adddf3>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	f7f7 fc4e 	bl	8000a60 <__aeabi_dcmpgt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d0eb      	beq.n	80091a0 <floor+0x48>
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	bfbe      	ittt	lt
 80091cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80091d0:	4133      	asrlt	r3, r6
 80091d2:	18e4      	addlt	r4, r4, r3
 80091d4:	ea24 0407 	bic.w	r4, r4, r7
 80091d8:	2500      	movs	r5, #0
 80091da:	e7e1      	b.n	80091a0 <floor+0x48>
 80091dc:	2e33      	cmp	r6, #51	@ 0x33
 80091de:	dd0a      	ble.n	80091f6 <floor+0x9e>
 80091e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80091e4:	d103      	bne.n	80091ee <floor+0x96>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	f7f6 fff3 	bl	80001d4 <__adddf3>
 80091ee:	ec41 0b10 	vmov	d0, r0, r1
 80091f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80091fa:	f04f 37ff 	mov.w	r7, #4294967295
 80091fe:	40df      	lsrs	r7, r3
 8009200:	4207      	tst	r7, r0
 8009202:	d0f4      	beq.n	80091ee <floor+0x96>
 8009204:	a30e      	add	r3, pc, #56	@ (adr r3, 8009240 <floor+0xe8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffe3 	bl	80001d4 <__adddf3>
 800920e:	2200      	movs	r2, #0
 8009210:	2300      	movs	r3, #0
 8009212:	f7f7 fc25 	bl	8000a60 <__aeabi_dcmpgt>
 8009216:	2800      	cmp	r0, #0
 8009218:	d0c2      	beq.n	80091a0 <floor+0x48>
 800921a:	2c00      	cmp	r4, #0
 800921c:	da0a      	bge.n	8009234 <floor+0xdc>
 800921e:	2e14      	cmp	r6, #20
 8009220:	d101      	bne.n	8009226 <floor+0xce>
 8009222:	3401      	adds	r4, #1
 8009224:	e006      	b.n	8009234 <floor+0xdc>
 8009226:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800922a:	2301      	movs	r3, #1
 800922c:	40b3      	lsls	r3, r6
 800922e:	441d      	add	r5, r3
 8009230:	4545      	cmp	r5, r8
 8009232:	d3f6      	bcc.n	8009222 <floor+0xca>
 8009234:	ea25 0507 	bic.w	r5, r5, r7
 8009238:	e7b2      	b.n	80091a0 <floor+0x48>
 800923a:	2500      	movs	r5, #0
 800923c:	462c      	mov	r4, r5
 800923e:	e7af      	b.n	80091a0 <floor+0x48>
 8009240:	8800759c 	.word	0x8800759c
 8009244:	7e37e43c 	.word	0x7e37e43c
 8009248:	bff00000 	.word	0xbff00000
 800924c:	000fffff 	.word	0x000fffff

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
